<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ApprEngineer.log]]></title>
  <link href="http://kentaktwo.github.com/atom.xml" rel="self"/>
  <link href="http://kentaktwo.github.com/"/>
  <updated>2012-07-01T00:26:04+09:00</updated>
  <id>http://kentaktwo.github.com/</id>
  <author>
    <name><![CDATA[kentaktwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX enviroment Chapter 3]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/06/30/apue-chapter-3/"/>
    <updated>2012-06-30T13:49:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/06/30/apue-chapter-3</id>
    <content type="html"><![CDATA[<h1>File I/O</h1>

<!--more-->


<h2>File Descriptors</h2>

<ul>
<li>標準入出力は <code>&lt;unistd.h&gt;</code> に定義されている

<ul>
<li><code>STDIN_FILENO</code>: 0</li>
<li><code>STDOUT_FILENO</code>: 1</li>
<li><code>STDERR_FILENO</code>: 2</li>
<li>0, 1, 2 に割り当てられているのは慣習であり、UNIX の取り決めではない</li>
</ul>
</li>
<li>File descriptor の範囲は 0 から <code>OPEN_MAX</code> まで

<ul>
<li>昔は 19 までだったが最近は 63 まであるシステムが多い</li>
</ul>
</li>
</ul>


<h2>open Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oflag</span><span class="p">,</span> <span class="p">...</span> <span class="cm">/* mode_t mode */</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイルを開いたり作成したりする</li>
<li>第二引数 (<em>oflag</em>) に入れるオプションは <code>&lt;fcntl.h&gt;</code> に定義されている

<ul>
<li><code>O_RDONLY</code>, <code>O_WRONLY</code>, <code>O_RDWR</code> のいずれかは必須</li>
</ul>
</li>
<li>open される file descriptor は使われていないもののうち最小のものになる

<ul>
<li>なので、標準出力(1) を close して open すると 1番に割り当てられたりする</li>
</ul>
</li>
<li>ファイル名が長すぎた (<code>NAME_MAX</code>以上) ときどうするかは OS 依存

<ul>
<li>System V 系だと勝手にはみ出た分を切り捨てる</li>
<li>BSD 系だとエラー (<code>ENAMETOOLONG</code>) を出す</li>
<li>POSIX.1 なら <code>_POSIX_NO_TRUNC</code> を定義すればエラーを出すようにできる</li>
</ul>
</li>
</ul>


<h2>creat Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">creat</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="n">mode_t</span> <span class="n">mode</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>open(pathname, O_WRONLY | O_CREAT | O_TRUNC, mode);</code> と同じ</li>
</ul>


<h2>close Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">close</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>プロセスが終了するときにはカーネルによって自動的に close される</li>
</ul>


<h2>lseek Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">off_t</span> <span class="n">lseek</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">offset</span><span class="p">,</span> <span class="kt">int</span> <span class="n">whence</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>オフセットの位置を指定する</li>
<li>open されたファイルは現在のファイルの始めからのオフセットを非負整数で持っている</li>
<li>デフォルトでは open されたときオフセットは 0 に設定される (<code>O_APPEND</code> を設定している場合を除く)</li>
<li><em>offset</em> の値の適用の仕方は <em>whence</em> の値による

<ul>
<li><code>SEEK_SET</code>: ファイルの始めから <em>offset</em> 進めたところ</li>
<li><code>SEEK_CUR</code>: 現在のオフセットから <em>offset</em> 進めたところ</li>
<li><code>SEEK_END</code>: ファイルの終わり（正確には現在のファイルサイズ）から <em>offset</em> 進めたところ</li>
</ul>
</li>
<li><code>lseek</code> は新しいファイルオフセットを返すので、これを利用して現在のオフセットを取得することができる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">off_t</span> <span class="n">currpos</span> <span class="o">=</span> <span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_CUR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイルオフセットをファイルサイズより大きくして write すると、その間は 0 で埋められるが、ディスクブロックは割り当てられない</li>
</ul>


<h2>od command</h2>

<ul>
<li>ファイルコンテンツを見る</li>
<li><code>-c</code> オプションをつけるとコンテンツを文字として表示する</li>
</ul>


<h2>read Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">read</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>戻り値は実際に読み込んだバイト数

<ul>
<li>EOF のときは 0</li>
</ul>
</li>
</ul>


<h2>write Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ディスクがいっぱいで書き込めなくなったときはエラー (-1) を返す</li>
</ul>


<h2>File Sharing</h2>

<ul>
<li>カーネルは open されたファイルを3種類のデータ構造で管理している

<ul>
<li>process table

<ul>
<li>各プロセスが持つ</li>
<li>open された file descriptor のテーブル</li>
<li>各 descriptor は file table へのポインタを持つ</li>
</ul>
</li>
<li>file table

<ul>
<li>ファイルステータス (read, write, append, sync など)、現在のファイルオフセットを持つ</li>
<li>v-node table へのポインタを持つ</li>
</ul>
</li>
<li>v-node table

<ul>
<li>ファイルタイプ、i-node 情報を持つ</li>
<li>i-node はファイルのオーナー、サイズ、実データの格納場所へのポインタなどを持っている</li>
</ul>
</li>
</ul>
</li>
<li>Linux には v-node は無いが、その代わりに generic i-node が使われる</li>
<li>2つのプロセスが同じファイルを open すると、file table は2つできるが、それらが同じ v-node table を指す</li>
</ul>


<h2>Atomic Operations</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">pread</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">offset</span><span class="p">);</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">pwrite</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">offset</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>lseek</code> と <code>read</code> または <code>write</code> を atomic に行なってくれる</p>

<h2>dup and dup2 Functions</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">dup</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">dup2</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">int</span> <span class="n">filedes2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>file descriptor を複製する

<ul>
<li>dup では複製されたディスクリプタは使用可能なディスクリプタのうち最小のものとなる</li>
<li>dup2 では複製されたディスクリプタの番号を <em>filedes2</em> で指定する</li>
</ul>
</li>
<li>元のディスクリプタと複製されたディスクリプタは同じ file table を指す

<ul>
<li>なので、ファイルステータスやファイルオフセットなどが共有される</li>
</ul>
</li>
</ul>


<h2>sync, fsync, and fdatasync Functions</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fsync</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fdatasync</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">sync</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UNIX の実装では、write されたデータはカーネルによって一旦バッファにコピーされ、少し後にディスクに書き込まれる</li>
<li><code>sync</code> を呼ぶと、すべての変更されたブロックを書き込む

<ul>
<li>通常デーモンによって30秒に1回 <code>sync</code> が呼ばれている</li>
<li>ディスクの書き込みが終わるのを待たずに return する</li>
</ul>
</li>
<li><code>fsync</code> は特定のファイルディスクリプタに対して行う

<ul>
<li>ディスクへの書き込みが終わるのを待つ</li>
</ul>
</li>
<li><code>fdatasync</code> はデータの更新のみを行う

<ul>
<li><code>fsync</code> はファイル属性の更新も行う</li>
</ul>
</li>
</ul>


<h2>fcntl Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fcntl</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmd</span><span class="p">,</span> <span class="p">...</span> <span class="cm">/* int arg */</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>open されたファイルのプロパティを変更する</li>
<li>以下のようなことができる (<em>cmd</em> で指定)

<ul>
<li>descriptor の複製</li>
<li>descriptor flag の取得・設定</li>
<li>file status flag の取得・設定</li>
<li>オーナーシップ (process ID, group ID) の取得・設定</li>
<li>record lock の取得・設定（詳しくは14章）</li>
</ul>
</li>
</ul>


<h2>/dev/fd</h2>

<ul>
<li><code>/dev/fd</code> に 0, 1, 2 と呼ばれるファイルがあり、それぞれ file descriptor 0, 1, 2 に対応している</li>
<li><code>/dev/fd/n</code> を open する際、<em>mode</em> の値は無視される。 <code>/dev/fd/0</code> は read only であり、</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dev/fd/0&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>としても fd に書き込むことはできない
- shell で使われることが多い</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>filter file2 | cat file1 - file3 | lpr
</span></code></pre></td></tr></table></div></figure>


<p>は file1, filter file2, file3 を cat しているが (<code>-</code> は標準入力)、
<code>-</code> は場合によって標準入力だったり出力だったりわかりにくいので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>filter file2 | cat file1 /dev/fd/0 file3 | lpr
</span></code></pre></td></tr></table></div></figure>


<p>として明確に書くことができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 2]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/05/07/unp-chapter-2/"/>
    <updated>2012-05-07T23:41:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/05/07/unp-chapter-2</id>
    <content type="html"><![CDATA[<h1>The Transport Layer: TCP, UDP, and SCTP</h1>

<!--more-->


<h2>User Datagram Protocol (UDP)</h2>

<ul>
<li>シンプルなプロトコル

<ol>
<li>アプリケーションがメッセージを UDP socket に書く</li>
<li>UDP socket は UDP datagram にカプセル化される</li>
<li>UDP datagram は IP datagram にカプセル化される</li>
<li>IP datagram が目的地に送信される</li>
</ol>
</li>
<li>UDP datagram が目的地に届けられる補償は無い</li>
<li>UDP datagram は長さを持つ

<ul>
<li>datagram の長さの情報はデータと一緒に受信者に届けられる</li>
</ul>
</li>
<li>UDP は <em>connectionless</em> service とも言われる

<ul>
<li>client - server 間に長期間の依存を持たないため</li>
<li>例えば UDP client が socket を作って datagram を server に送り、その後すぐに別の datagram を別の servevr に同じ socket で送ることが可能</li>
</ul>
</li>
</ul>


<h2>Transmission Control Protocol (TCP)</h2>

<ul>
<li>クライアント・サーバ間でコネクションを張る</li>
<li>信頼性 <em>(reliability)</em> がある

<ul>
<li>TCP がデータを送信すると、応答 (acknowledgment) が来るのを待つ</li>
<li>応答が来ない場合、TCP は自動的にデータを再送信し、さらに待つ</li>
<li>しばらく繰り返しても来ない場合は諦める</li>
</ul>
</li>
<li>RTT <em>(round trip time)</em> を推測するアルゴリズムを含んでいる

<ul>
<li>応答にどれだけ時間がかかりそうかを推測する</li>
</ul>
</li>
<li>TCP が送信するデータには各 byte に連番 <em>(sequence numbers)</em> が振られている

<ul>
<li>到着したセグメント（TCP が IP に渡すデータの単位）が壊れていた場合、セグメントを再要求する</li>
<li>データが重複していた場合、番号を見て重複しているデータを削除する</li>
</ul>
</li>
<li><em>flow control</em> を提供する

<ul>
<li>peer に対して何バイトのサイズのデータを受け入れられるか <em>(advertised window)</em> 伝える</li>
<li>送信者が受信バッファを超えるデータを送ることを防ぐ</li>
<li>送信者からデータを受信すると window サイズは小さくなり、受信アプリケーションがバッファからデータを読むと window サイズは大きくなる</li>
</ul>
</li>
<li>TCP コネクションは <em>full-duplex</em> である

<ul>
<li>アプリケーションはいつでもデータの送信と受信ができる</li>
<li>sequence number や window size の状態の経過を追い続ける</li>
</ul>
</li>
</ul>


<h2>Stream Control Transmission Protocol (SCTP)</h2>

<ul>
<li>クライアント・サーバ間の接続は connection ではなく、 <em>association</em> と呼ばれる

<ul>
<li>2システム間の通信が2つ以上のアドレスを使用することができる</li>
</ul>
</li>
<li><em>message-oriented</em> である

<ul>
<li>TCP は byte 指向</li>
</ul>
</li>
<li>接続間で複数のストリーム (multiple stream) を提供する

<ul>
<li>ストリームの1つに含まれる message が失われても、他のストリームの message の配信に影響しない</li>
</ul>
</li>
<li>マルチホーミング (multihoming) を提供する

<ul>
<li>1つの SCTP エンドポイントが複数の IP アドレスをサポートする</li>
<li>ネットワークの不安定さに対するロバスト性を向上させる</li>
</ul>
</li>
</ul>


<h2>Three-Way Handshake</h2>

<p>TCP connection を張るときには以下のような処理が行われる：</p>

<ol>
<li>サーバは <code>socket</code>, <code>bind</code>, <code>listen</code> を呼び、接続を受け入れる準備をする <em>(passive open)</em></li>
<li>クライアントは <code>connect</code> を呼び <em>active open</em> を発行する。
クライアント TCP は SYN (synchronize) segment を送信して、サーバにクライアントが送る予定のデータサイズを教える。</li>
<li>サーバはクライアントの SYN を受け入れ、ACK (acknowledge) と自分の SYN を送る。
SYN にはサーバが送る予定のデータサイズが含まれている。
サーバの SYN とクライアントの SYN に対する ACK は1つのセグメントで送られる。</li>
<li>クライアントはサーバの SYN を受け入れる (ACK)</li>
</ol>


<h2>TCP Connection Termination</h2>

<p>接続を切るときは以下のような処理で行われる：</p>

<ol>
<li>片方のアプリケーションが <code>close</code> を呼び <em>(active close)</em>、TCP は FIN segment を送る。</li>
<li>もう片方の TCP が FIN を受け入れる <em>(passive close)</em>。FIN は end-of-file としてアプリケーションに通知される。</li>
<li>しばらくして、end-of-file を受信したアプリケーションはソケットを <code>close</code> し、FIN を送る。</li>
<li>active close を行った側の TCP が FIN を受け入れる。</li>
</ol>


<p>2 から 3 の間で passive close を行った側から active close を行った側にデータが送られることがある <em>(half-close)</em>。</p>

<h2>TIME_WAIT State</h2>

<ul>
<li>active close を行った側が close を受け取ったあとのタイムアウト待ち状態

<ul>
<li>タイムアウト時間は MSL <em>(maximum segment lifetime)</em> の2倍 (2MSL)</li>
</ul>
</li>
<li>TCP のコネクションを確実に切断する

<ul>
<li>ルータの異常によりループが発生すると古いパケットが残り続ける</li>
<li>そこで TCP がパケットを再送すると、ループが解消されたときに重複してパケットが送られる</li>
</ul>
</li>
<li>古い重複したセグメントをネットワークから expire させる

<ul>
<li>コネクションを再接続するときに、古いパケットが残らないようにする</li>
</ul>
</li>
</ul>


<h2>Four-Way Handshake</h2>

<p>SCTP connection を張るときには以下のような処理が行われる：</p>

<ol>
<li>サーバは <code>socket</code>, <code>bind</code>, <code>listen</code> を呼び、passive open を行う</li>
<li>クライアントは <code>connect</code> を呼び、active open を行う。
これによりクライアントは IP のリスト、初期シーケンス番号、この association での全てのパケットを識別するためのタグ、
クライアントがリクエストするストリーム量、クライアントが受け入れることのできるストリーム量を含んだ INIT メッセージを送る。</li>
<li>サーバはクライアントの INIT を受け取り、 INIT-ACK メッセージを送る。
INIT-ACK には 2. で述べた INIT が持つ情報に加えて state cookie が含まれる。
state cookie にはサーバが association が正当であることを補償するための全ての状態が含まれている。</li>
<li>クライアントはサーバの state cookie を COOKIE-ECHO メッセージとして返す。</li>
<li>サーバは cookie が正しいことを確かめ、COOKIE-ACK メッセージを送り association を成立させる。</li>
</ol>


<p>four-way handshake は SCTP が DoS 攻撃を防ぐために用いられる。</p>

<h2>Association Terminate</h2>

<ul>
<li>SCTP では TCP とは違い half-closed は受け入れられず、片方が association を切断した時にはもう片方はデータの送信をやめなければならない。</li>
<li>SCTP では verification tags があるため、TIME_WAIT state は存在しない。</li>
</ul>


<h2>Port Numbers</h2>

<ul>
<li>UDP, SCTP, TCP はプロセスを区別するために 16-bit integer のポート番号を使用する。</li>
<li>ポート番号は以下の3つのレンジに分かれる

<ul>
<li><em>well-known ports</em>: 0 - 1023<br/>
IANA によって管理されているポート</li>
<li><em>registered ports</em>: 1024 - 49151<br/>
IANA によって管理はされていないが、使い方を決めているポート</li>
<li><em>dynamic (private) ports</em>: 49152 - 65535<br/>
IANA が管理していないポート。 <em>ephemeral ports</em> （transport protocol によってクライアントに割り当てられるポート）に使われる。</li>
</ul>
</li>
<li>接続先を決めるための2つの値である IP アドレスとポート番号の組は <em>socket</em> と呼ばれる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX environment Chapter 2]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/05/02/apue-chapter-2/"/>
    <updated>2012-05-02T14:31:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/05/02/apue-chapter-2</id>
    <content type="html"><![CDATA[<h1>UNIX Standardization and Implementations</h1>

<!--more-->


<h2>Limits</h2>

<ul>
<li>Compile-time limits

<ul>
<li>short integer の最大値など</li>
<li>ヘッダに定義</li>
<li>コンパイル時にインクルードされる</li>
</ul>
</li>
<li>Runtime limits

<ul>
<li>filename の最大文字数など</li>
<li>プロセスが関数を呼んで値を取得する必要がある</li>
</ul>
</li>
<li>Runtime limits は以下の関数を呼ぶことで取得できる

<ul>
<li><code>sysconf()</code>

<ul>
<li>file や directory に関係しない limit</li>
<li><code>_SC_</code> で始まる値を取得できる</li>
</ul>
</li>
<li><code>pathconf()</code>

<ul>
<li>file や directory に関係する limit</li>
<li><code>_PC_</code> で始まる値を取得できる</li>
</ul>
</li>
<li><code>fpathconf()</code>: <code>pathconf</code> の引数がファイルディスクリプタになった版</li>
</ul>
</li>
<li>limits は未定義なこともある

<ul>
<li>e.g. pathname の最大値

<ol>
<li><code>&lt;limits.h&gt;</code> に定義されていればその値を使う</li>
<li>定義されていなければ、<code>pathconf("/", _PC_PATH_MAX)</code> して取得する</li>
<li>取得できなければ、適当な値を推測して使う</li>
</ol>
</li>
</ul>
</li>
</ul>


<h2>Primitive System Data Types</h2>

<ul>
<li>C のデータ型は UNIX システムに依存することがある</li>
<li><code>&lt;sys/types.h&gt;</code> に実装依存のデータ型 (<em>primitive system data types</em>) が定義されている

<ul>
<li><code>clock_t</code>, <code>size_t</code>, <code>time_t</code> など</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/29/unp-chapter-1/"/>
    <updated>2012-04-29T17:30:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/29/unp-chapter-1</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<!--more-->


<h2>Introduction</h2>

<ul>
<li><em>protocol</em> とは、プログラムが通信する際の約束事</li>
<li>クライアントとサーバはネットワークプロトコルで通信するが、ネットワークプロトコルは複数の層からなる</li>
</ul>


<pre>
Web Client: Application layer
|
TCP (Transmission Control Protocol): Transport layer
|
IP (Internet Protocol): Network layer
|
Ethernet: Datalink layer
</pre>


<ul>
<li>クライアントとサーバがユーザプロセスであっても、 TCP や IP は通常カーネル内のプロトコルスタックとして動く</li>
<li>client と server は <em>LAN (Local Area Network)</em> や <em>WAN (Wide Area Network)</em> でつながっている</li>
<li>router が WAN のブロックを形成している</li>
<li>最大の WAN は <em>Internet</em> と呼ばれる</li>
</ul>


<h2>Error Handling: Wrapper Functions</h2>

<ul>
<li>エラーが起きた時に終了させる事はよくあるので、<em>wrapper function</em> として定義すると良い</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">Socket</span><span class="p">(</span><span class="kt">int</span> <span class="n">family</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="kt">int</span> <span class="n">protocol</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">family</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">protocol</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">err_sys</span><span class="p">(</span><span class="s">&quot;socket error&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>スレッド関数はエラーが起きても <code>errno</code> に値をセットしないため、自分で関数の戻り値を <code>errno</code> にセットする必要がある</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ndone_mutex</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">errno</span> <span class="o">=</span> <span class="n">n</span><span class="p">,</span> <span class="n">err_sys</span><span class="p">(</span><span class="s">&quot;pthread_mutex_lock error&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>wrapper function を書くと見やすくなる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">Pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mptr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">mptr</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="n">errno</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">err_sys</span><span class="p">(</span><span class="s">&quot;pthread_mutex_lock error&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>OSI Model</h2>

<p>ネットワークの階層の有名な定義にISO (International Organization for Standardization) の <em>OSI (Open Systems Interconnecton)</em> Model がある</p>

<pre>
  +--------------+    +--------------+
7 | application  |    |              |
  +--------------+    |              |
6 | presentation |    | application  |   user process
  +--------------+    |              |        ^
5 | session      |    |              |        |
  +==============+    +==============+   ============
4 | transport    |    | TCP |  | UDP |        |
  +--------------+    +--------------+        v
3 | network      |    |  IPv4, IPv6  |      kernel
  +--------------+    +--------------+
2 | datalink     |    | device       |
  +--------------+    | driver       |
1 | physical     |    | hardware     |
  +--------------+    +--------------+
</pre>


<h2>Test Networks and Hosts</h2>

<ul>
<li><code>netstat -i</code> でネットワークインターフェースの情報が見れる

<ul>
<li><code>-n</code> オプションをつけるとアドレスを名前ではなく数字で表示する</li>
<li>loopback interface は <code>lo</code>, Ethernet は <code>eth0</code> 等と表示される</li>
</ul>
</li>
<li><code>netstat -r</code> でルーティングテーブルを表示する</li>
<li><code>ifconfig &lt;interface name&gt;</code> でインターフェースの詳細を表示する</li>
</ul>


<h2>64-Bit Architectures</h2>

<ul>
<li>32-bit Unix system のプログラミングモデルは <em>ILP32</em> model と呼ばれる

<ul>
<li>I: integers</li>
<li>L: long integers</li>
<li>P: pointers</li>
<li>integer も long integer も 32-bit</li>
</ul>
</li>
<li>64-bit Unix system のプログラミングモデルは <em>LP64</em> model と呼ばれる

<ul>
<li>long integer と pointer のみが　64-bit であることを必要とする</li>
<li>他は 32-bit</li>
</ul>
</li>
<li><code>size_t</code> 型は 32-bit system では 32-bit だが、64-bit system では 64-bit である

<ul>
<li>socket address programming 等で <code>size_t</code> が出てくることがある</li>
<li>しかし 64-bit も必要ない</li>
<li>そのため 64-bit system でも 32-bit のままであるような <code>t_scalar_t</code> や <code>t_uscalar_t</code> がある</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX environment Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/28/apue-chapter-1/"/>
    <updated>2012-04-28T22:45:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/28/apue-chapter-1</id>
    <content type="html"><![CDATA[<h1>UNIX System Overview</h1>

<!--more-->


<h2>UNIX Architecture</h2>

<ul>
<li>OS (Operating System) とは、コンピュータのハードウェアを制御し、プログラムが動作する環境を提供するソフトウェアのこと</li>
<li>このソフトウェアのことを <em>kernel</em> と呼ぶ</li>
<li>kernel とのインターフェースとなるソフトウェア群を <em>system calls</em> と呼ぶ</li>
<li>shell は他のアプリケーションを動かすためのインターフェースとなるアプリケーション</li>
</ul>


<h2>Logging In</h2>

<ul>
<li>ログイン名は たいてい <code>/etc/passwd</code> に書かれている</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 最近はパスワードは別ファイルになっていることが多い</span>
</span><span class='line'>&lt;loginName&gt;:&lt;encryptedPassword&gt;:&lt;userID&gt;:&lt;groupID&gt;:&lt;comment&gt;:&lt;homeDirectory&gt;:&lt;shellProgram&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Files and Directories</h2>

<ul>
<li><em>directory</em> とは directory entries を含んだファイルのこと</li>
<li>directory の中にある名前を <em>filename</em> という

<ul>
<li>filename には <code>/</code> と null 文字以外の全ての文字が使える</li>
</ul>
</li>
<li>UNIX のマニュアルは section 1 から 8 まである

<ul>
<li>ls は Section 1 にある</li>
</ul>
</li>
</ul>


<h2>Input and Output</h2>

<ul>
<li>File descriptors とは、カーネルがプロセスからアクセスされるファイルを識別するための non-negative な整数のこと</li>
<li>Unbuffered I/O は <code>open</code>, <code>read</code>, <code>write</code>, <code>lseek</code>, <code>close</code> によって提供される</li>
<li>Standard I/O は unbuffered I/O にバッファインターフェースを提供する

<ul>
<li>バッファサイズを気にする必要がない</li>
<li>行ごとの処理が楽 (<code>fgets</code> etc.)</li>
</ul>
</li>
</ul>


<h2>Programs and Processes</h2>

<ul>
<li><em>program</em> とは、ディレクトリにある実行可能なファイルのこと</li>
<li>program はメモリに読み込まれ、カーネルによって実行される</li>
<li>実行中のプログラムのことを <em>process</em> と呼ぶ

<ul>
<li><em>task</em> と呼んだりする OS もある</li>
</ul>
</li>
<li>UNIX は全てのプロセスにユニークな <em>process ID</em> を割り振る

<ul>
<li>process ID は non-negative な整数</li>
</ul>
</li>
<li>プロセス内で動いているスレッドは同じアドレス空間、ファイルディスクリプタ、スタック等のプロセスに関する属性を共有する

<ul>
<li>そのため、矛盾を起こさないように同期をとる必要がある</li>
</ul>
</li>
<li>スレッドは thread ID で管理される

<ul>
<li>thread ID はプロセスごとに閉じている</li>
</ul>
</li>
</ul>


<h2>Error Handling</h2>

<ul>
<li>UNIX システム関数でエラーが起こると、たいてい負の値が返り、<code>errno</code> と呼ばれる整数がセットされる

<ul>
<li><code>errno</code> が取りうる値は <code>&lt;errno.h&gt;</code> に定義されている</li>
<li>UNIX マニュアルの Section 2 の始め (<code>intro(2)</code>) で <code>errno</code> の説明が見れる

<ul>
<li>Linux では <code>errno(3)</code></li>
</ul>
</li>
</ul>
</li>
<li><code>errno</code> はエラーが起こらない限りクリアされないので、関数の戻り値を見てから <code>errno</code> を調べる必要がある</li>
<li><code>errno</code> に 0 がセットされることはない</li>
<li><code>strerror()</code> で <code>errno</code> に対応するエラーメッセージが取得できる</li>
<li><code>perror()</code> で引数に渡したメッセージと現在の <code>errno</code> に対応するエラーメッセージを standard error に出力できる</li>
<li><code>&lt;errno.h&gt;</code> に定義されたエラーは fatal なものと nonfatal なものに分かれる

<ul>
<li>fatal なエラーが起きた場合はエラーメッセージを出してプログラムを終了すべきである</li>
<li>リソース不足で起きるエラーなどが nonfatal なエラーに分類される</li>
<li>リソース関連の nonfatal エラーは <code>EAGAIN</code>, <code>ENFILE</code>, <code>ENOBUFS</code>, <code>ENOLCK</code>, <code>ENOSPC</code>, <code>ENOSR</code>, <code>EWOULDBLOCK</code>, <code>ENOMEM</code> など</li>
<li>リソース関連のエラーが起きた場合は少し待ってやり直すことで対応できることがある</li>
</ul>
</li>
</ul>


<h2>User Identification</h2>

<ul>
<li><em>user ID</em> はログイン名が作られたときに割り振られ、変更することはできない</li>
<li>user ID が 0 のユーザは <em>root</em> または <em>superuser</em> と呼ばれる</li>
<li><em>group ID</em> もログイン名が作られた時に割り振られる。</li>
<li>group name を group ID にマップするファイルが <code>/etc/group</code> にあり、group file と呼ばれる</li>
<li><code>getuid()</code> や <code>getgid()</code> で user ID や group ID が取れる</li>
<li>group ID の他に追加でグループに所属させることもできる (<em>supplementary group ID</em>)

<ul>
<li>16 個まで</li>
</ul>
</li>
</ul>


<h2>Signals</h2>

<ul>
<li>signal は何かが起きたことをプロセスに伝える手段

<ul>
<li>例えばゼロ除算が発生すると、<code>SIGFPE</code> がプロセスに送られる</li>
</ul>
</li>
<li>プロセスのシグナルの処理の仕方は 3 通りある

<ol>
<li>シグナルを無視する</li>
<li>デフォルトの動作を実行させる</li>
<li>シグナルが起きた時に呼ぶ関数を与える</li>
</ol>
</li>
<li>DELETE または Ctrl-C は <em>interrupt key</em>, Ctrl-backslash は <em>quit key</em> と呼ばれ、実行中のプロセスを終了させるのに使う</li>
<li><code>kill()</code> を呼ぶとシグナルを送ることができる</li>
<li>シグナルを送るためには、そのプロセスのオーナーでなければならない</li>
</ul>


<h2>Time Values</h2>

<ul>
<li>UNIX は2種類の時間を管理している

<ol>
<li>Calendar time: Epoch (UTC 1970 1/1 00:00:00) からの秒数

<ul>
<li><code>time_t</code> 型はこの値を持っている</li>
</ul>
</li>
<li>Process time: clock によって計測される

<ul>
<li>プロセスによって使われたリソースを計測するのに使う</li>
<li>CPU time ともいう</li>
<li><code>clock_t</code> 型がこの値を持っている</li>
</ul>
</li>
</ol>
</li>
<li>プロセスの実行時間を計測すると、3種類の値が得られる

<ul>
<li>Clock time: プロセスを実行するのにかかった時間

<ul>
<li>システム上で動いている他のプロセスの影響を受ける</li>
</ul>
</li>
<li>User CPU time: ユーザの命令が実行された時間（ループ処理など）</li>
<li>System CPU time: システムコールを行うのにかかった時間</li>
</ul>
</li>
<li>user CPU time と system CPU time を合わせて <em>CPU time</em> と呼ぶ</li>
</ul>


<h2>System Calls and Library Functions</h2>

<ul>
<li>system call のドキュメントは <em>UNIX Programmer&#8217;s Manual</em> の Section 2 にある</li>
<li>Section 3 にはプログラマが普段使うであろう関数 (Library functions) の説明が書かれている (<code>printf()</code> etc.)

<ul>
<li>ライブラリ関数は複数のシステムコールの組み合わせでできている</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[neobundle.vim を使ってみる]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/17/neobundle/"/>
    <updated>2012-04-17T22:38:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/17/neobundle</id>
    <content type="html"><![CDATA[<p>vundle.vim の後釜である、neobundle を入れてみました。</p>

<p><a href="http://vim-users.jp/2011/10/hack238/">Hack #238: neobundle.vim で plugin をモダンに管理する</a></p>

<!--more-->


<h2>インストール</h2>

<pre><code>$ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle
</code></pre>

<h2>plugin の管理</h2>

<p>最初の方に追加</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="s2">&quot;&quot;&quot; neobundle</span>
</span><span class='line'><span class="s2">filetype plugin indent off</span>
</span><span class='line'><span class="s2">if has(&#39;vim_starting&#39;)</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="nb">set </span>rtp+<span class="o">=</span>~/.vim/bundle/vundle/
</span><span class='line'>    <span class="nb">set </span>rtp+<span class="o">=</span>~/.vim/bundle/neobundle/
</span><span class='line'>    <span class="s2">&quot;call vundle#rc()</span>
</span><span class='line'><span class="s2">    call neobundle#rc(expand(&#39;~/.vim/bundle&#39;))</span>
</span><span class='line'><span class="s2">endif</span>
</span><span class='line'>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/neobundle&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;houtsnip/vim-emacscommandline&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;buftabs&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/unite&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;YankRing&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/neocomplcache&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/vimshell&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/vimproc&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;gtags&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;sudo&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;autodate&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;tangledhelix/vim-octopress&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">filetype plugin indent on</span>
</span><span class='line'><span class="s2">&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>plugin のインストール</h2>

<pre><code>:NeoBundleInstall
</code></pre>

<h2>plugin のクリーン</h2>

<pre><code>:NeoBundleClean
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BackTrack 5 RC2 をインストール]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/17/install-backtrack/"/>
    <updated>2012-04-17T21:49:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/17/install-backtrack</id>
    <content type="html"><![CDATA[<p>ペネトレーションテストに特化した Linux ディストリビューションの BackTrack をインストールしました。</p>

<p><a href="http://www.backtrack-linux.org/">http://www.backtrack-linux.org/</a></p>

<!--more-->


<h2>BackTrack とは</h2>

<ul>
<li>Ubuntu がベース (BackTrack4 以降)</li>
<li>様々なセキュリティツールが入っている</li>
</ul>


<h2>インストール</h2>

<p>Virtual Box にインストールした。</p>

<ul>
<li>OS タイプは Ubuntu 64 bit</li>
<li>NAT + ホストオンリーアダプタ</li>
</ul>


<p>起動したら root/toor で root にログインして、</p>

<pre><code>$ startx
</code></pre>

<p>で GUI を起動する。</p>

<h2>設定</h2>

<h3>ユーザの追加</h3>

<pre><code>$ adduser &lt;username&gt;
</code></pre>

<p>useradd だとホームディレクトリの作成や設定のコピー等をやってくれない</p>

<h3>sudo の設定</h3>

<pre><code>$ visudo
</code></pre>

<p>エディタは vi でないので注意。</p>

<pre><code>%&lt;username&gt; ALL=(ALL) ALL
</code></pre>

<p>を追加。</p>

<h3>host 名の変更</h3>

<pre><code>$ sudo vi /etc/hostname
$ sudo vi /etc/hosts
</code></pre>

<h3>IP の設定</h3>

<p>eth1 の部分を以下のように編集</p>

<figure class='code'><figcaption><span>/etc/network/interfaces</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>auto eth1
</span><span class='line'>iface eth1 inet static
</span><span class='line'>    address 192.168.56.121
</span><span class='line'>    netmask 255.255.255.0
</span><span class='line'>    network 192.168.56.0
</span><span class='line'>    broadcast 192.168.56.255
</span></code></pre></td></tr></table></div></figure>


<h3>ssh の設定</h3>

<pre><code>$ sudo apt-get --purge remove openssh-server
$ sudo apt-get install openssh-server
</code></pre>

<figure class='code'><figcaption><span>/etc/ssh/sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># root でのログインを無効にする</span>
</span><span class='line'>PermitRootLogin no
</span><span class='line'>
</span><span class='line'><span class="c"># パスワード認証を一時的に有効にする</span>
</span><span class='line'>PasswordAuthentication yes
</span></code></pre></td></tr></table></div></figure>


<p>sshd 再起動</p>

<pre><code>$ sudo /etc/init.d/ssh restart
$ sudo lsof -nPi:22  # 確認
</code></pre>

<p>鍵の設定が終わったら、PasswordAuthentication を no に戻しておく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mojito チュートリアル]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/11/mojito-tutorial/"/>
    <updated>2012-04-11T23:20:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/11/mojito-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://developer.yahoo.com/cocktails/mojito/docs/getting_started/mojito_getting_started_tutorial.html">Tutorial: Creating Your First Application</a></p>

<!--more-->


<h2>アプリケーションの作成</h2>

<p>アプリケーション用ディレクトリを作って移動する</p>

<pre><code>$ mkdir mojito_apps
$ cd mojito_apps
</code></pre>

<p>Mojito アプリケーションの作成</p>

<pre><code>$ mojito create app minty_app
</code></pre>

<h2>サンプル Mojit の作成</h2>

<p>Mojito アプリケーションの構成要素を <em>mojit</em> (module + widget) と呼ぶ。<br/>
Mojit は MVC の構造をしており、definition と instance configuration の2つの部分からなる。</p>

<p>definition は mojit の controller と model を含む。
また definition にはユニットテストも含まれている。</p>

<p>instance configuration は mojit の各インスタンスの設定を定義する。</p>

<p>mojit の作成</p>

<pre><code>$ mojito create mojit HelloMojit
</code></pre>

<p>application.json の中でポートや使う mojit の設定などを行う。</p>

<figure class='code'><figcaption><span> (application.json)</span> <a href='http://kentaktwo.github.com/downloads/code/application.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;settings&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;master&quot;</span> <span class="p">],</span>
</span><span class='line'>        <span class="s2">&quot;appPort&quot;</span><span class="o">:</span> <span class="mi">8666</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;specs&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;hello&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;HelloMojit&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>routes.json の中で実行する mojit のルーティングの設定を行う。</p>

<figure class='code'><figcaption><span> (routes.json)</span> <a href='http://kentaktwo.github.com/downloads/code/routes.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;settings&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;master&quot;</span> <span class="p">],</span>
</span><span class='line'>        <span class="s2">&quot;hello index&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;verbs&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;get&quot;</span><span class="p">],</span>
</span><span class='line'>            <span class="s2">&quot;path&quot;</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;call&quot;</span><span class="o">:</span> <span class="s2">&quot;hello.index&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上の設定だと、ポート 8666 で <code>/</code> が get メソッドで叩かれると、
HelloMojit のインスタンス hello の index メソッドが呼ばれる。</p>

<p>HelloMojit の動作の定義は <code>mojits/HelloMojit/controller.server.js</code> で行う。</p>

<figure class='code'><figcaption><span>mojits/HelloMojit/controller.server.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">YUI</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;HelloMojit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * The HelloMojit module.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @module HelloMojit</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructor for the Controller class.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @class Controller</span>
</span><span class='line'><span class="cm">     * @constructor</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nx">Y</span><span class="p">.</span><span class="nx">mojito</span><span class="p">.</span><span class="nx">controller</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Method corresponding to the &#39;index&#39; action.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * @param ac {Object} The action context that</span>
</span><span class='line'><span class="cm">         * provides access to the Mojito API.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="nx">index</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">actionContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">actionContext</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">},</span> <span class="s1">&#39;0.0.1&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">requires</span><span class="o">:</span> <span class="p">[]});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>サーバの起動</h2>

<pre><code>$ mojito start
</code></pre>

<p><code>http://localhost:8666/</code> にアクセスするとアプリケーションの出力を見ることができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mojito のインストール]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/11/install-mojito/"/>
    <updated>2012-04-11T21:37:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/11/install-mojito</id>
    <content type="html"><![CDATA[<p>Yahoo! Inc. がリリースした Web アプリケーションフレームワーク、Mojito をインストールしてみました。</p>

<p><a href="http://developer.yahoo.com/cocktails/mojito/">http://developer.yahoo.com/cocktails/mojito/</a></p>

<!--More-->


<h2>Mojito とは</h2>

<ul>
<li>MVC モデルな Web アプリケーションフレームワーク</li>
<li>YUI3 を使ってる</li>
<li>JavaScript で記述</li>
<li>1つのコードで複数のデバイス (PC, Android, iOS, etc.) での表示が可能</li>
<li>Xcode に渡せば iOS アプリも作れる</li>
</ul>


<h2>インストール</h2>

<h3>Node.js のインストール</h3>

<p>Mojito を動かすためには Node.js が必要。<br/>
Node.js の環境管理ツールには nvm などがあるが、<br/>
nvm は zsh だとうまく動かないようなので、nodebrew を使う。</p>

<p>参考： <a href="http://d.hatena.ne.jp/Jxck/20120224/1330035058">http://d.hatena.ne.jp/Jxck/20120224/1330035058</a></p>

<p>nodebrew のインストール</p>

<pre><code>$ curl https://raw.github.com/hokaccha/nodebrew/master/nodebrew | perl - setup
$ wget https://raw.github.com/hokaccha/nodebrew/master/nodebrew
$ perl nodebrew setup
</code></pre>

<p>.zshrc のパスの設定</p>

<pre><code>export PATH=$HOME/.nodebrew/current/bin:/usr/local/bin:$PATH
</code></pre>

<p>Node.js のインストール</p>

<pre><code>$ nodebrew install v0.6.14
$ nodebrew use v0.6.14
</code></pre>

<h3>Mojito のインストール</h3>

<p><a href="http://developer.yahoo.com/cocktails/mojito/docs/quickstart/">http://developer.yahoo.com/cocktails/mojito/docs/quickstart/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mercurial & bitbucket で version 管理]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/28/mercurial-bitbucket/"/>
    <updated>2012-01-28T18:35:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/28/mercurial-bitbucket</id>
    <content type="html"><![CDATA[<p>Bitbucket は Mercurial と呼ばれる分散型のバージョン管理システムを使ったホスティングサービスです。
分散型で有名なものには Git を使った Github などがあります。<br/>
Github はプライベートリポジトリが有料ですが、
Bitbucket は無料で無制限にプライベートリポジトリが使えます。</p>

<!--more-->


<h2>Mercurial とは</h2>

<ul>
<li>分散型バージョン管理システム</li>
<li>Python で実装</li>
<li>コマンドは <code>hg</code>  (mercury が水銀を意味し、その元素記号 Hg に由来するらしい)</li>
<li>コマンドが subversion に似ており、Git より分かりやすい</li>
<li>Google Code とかに使われてる</li>
</ul>


<h2>Bitbucket とは</h2>

<ul>
<li><a href="https://bitbucket.org/">https://bitbucket.org/</a></li>
<li>Mercurial を使ったウェブホスティングサービス</li>
<li>公開リポジトリ、プライベートリポジトリともに無料、容量無制限</li>
<li>無料で使えるプライベートリポジトリのユーザ数は5人まで。それ以降は有料</li>
</ul>


<h2>使ってみる</h2>

<p>Mac OS X で Mercurial と Bitbucket を使ってみました。</p>

<h3>Mercurial のインストール</h3>

<pre><code>$ brew install mercurial
</code></pre>

<h3>Bitbucket を使ったリポジトリの新規作成</h3>

<ul>
<li>Bitbucket 上にリポジトリを作成</li>
<li>ローカルにリポジトリを clone</li>
</ul>


<pre><code>$ hg clone ssh://hg@bitbucket.org/username/repositoryname</code></pre>


<ul>
<li>ファイルを追加・変更</li>
<li>リポジトリにファイルを追加</li>
</ul>


<pre><code>$ hg add * </code></pre>


<ul>
<li>ステータス確認</li>
</ul>


<pre><code>$ hg stat</code></pre>


<ul>
<li>コミット</li>
</ul>


<pre><code>$ hg commit -m "initial commit"</code></pre>


<ul>
<li>更新やコミットはローカルでの操作なので、リモートに更新を反映させるには push する</li>
</ul>


<pre><code>$ hg push</code></pre>


<h2>参考</h2>

<ul>
<li><a href="http://www.slideshare.net/kenjis/mercurialbitbucket">http://www.slideshare.net/kenjis/mercurialbitbucket</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD のセットアップ]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/26/freebsd-setup/"/>
    <updated>2012-01-26T00:16:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/26/freebsd-setup</id>
    <content type="html"><![CDATA[<p>FreeBSD 9.0 のインストールとか設定とか</p>

<!--more-->


<h2>FreeBSD 9.0 のインストール</h2>

<p>FreeBSD 9.x 以降では bsdinstall と呼ばれるインストールプログラムを使う。<br/>
以下を見ながらインストール<br/>
<a href="http://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/bsdinstall.html">http://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/bsdinstall.html</a></p>

<h2>ホスト名の変更</h2>

<pre><code>$ hostname "ホスト名"
</code></pre>

<p>で一時的に変更できるが、OS を再起動すると元に戻ってしまうため、<br/>
<code>/etc/hosts</code>, <code>/etc/resolv.conf</code>, <code>/etc/rc.conf</code> の設定も直しておく (Linux の場合は <code>/etc/sysconfig/network</code>)</p>

<h2>ports からパッケージのインストール</h2>

<h3>ports ツリーの構成</h3>

<pre><code>$ pkg_add -r portsnap  # portsnap が無い場合まず package からインストールする
$ portsnap fetch
$ portsnap extract
$ portsnap update
</code></pre>

<p>ports にあるパッケージは <code>/usr/ports/</code> 以下にカテゴリ別に置かれている。<br/>
<a href="http://www.freebsd.org/cgi/ports.cgi">http://www.freebsd.org/cgi/ports.cgi</a><br/>
からパッケージの検索ができる。<br/>
また、</p>

<pre><code>$ whereis &lt;package name&gt;
</code></pre>

<p>でどこのパッケージがあるか探すことができる。</p>

<h3>sudo</h3>

<p>FreeBSD には デフォルトで sudo は入っていない</p>

<pre><code>$ su root
# cd /usr/ports/security/sudo
# make install clean
</code></pre>

<p>インストール後 visudo で sudoers を編集</p>

<h3>portaudit</h3>

<p>パッケージのセキュリティに関する脆弱性を調べる</p>

<pre><code>$ cd /usr/ports/ports-mgmt/portaudit
$ sudo make install clean
$ portaudit -F
</code></pre>

<h3>portupgrade</h3>

<p>portinstall, portupgrade 等が使えるようになる</p>

<pre><code>$ cd /usr/ports/ports-mgmt/portsupgrade
$ sudo make install clean
</code></pre>

<h3>ports package の設定をやり直す</h3>

<pre><code>$ sudo make config
</code></pre>

<h3>ports package のアンインストール</h3>

<pre><code>$ sudo make deinstall
</code></pre>

<h3>ports package の再インストール</h3>

<pre><code>$ sudo make reinstall
</code></pre>

<h2>login 時の shell の設定</h2>

<pre><code>$ chsh -s /usr/local/bin/zsh
</code></pre>

<h2>httpd 起動のための設定</h2>

<p>accept filter を使うために <code>accf_http.ko</code> というカーネルモジュールを読み込む必要がある。</p>

<pre><code>$ sudo kldload accf_http.ko
</code></pre>

<p>OS 起動時に読み込ませるには、<code>/boot/loader.conf</code> に</p>

<pre><code>accf_http_load="YES"
</code></pre>

<p>を追加する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox に入れたゲスト OS に ssh login]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/25/vbox-portforwarding/"/>
    <updated>2012-01-25T23:51:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/25/vbox-portforwarding</id>
    <content type="html"><![CDATA[<p>家の Mac OS X の VirtualBox に FreeBSD 9.0 を入れました。<br/>
Host から Guest に ssh する設定をしました。</p>

<!-- more -->


<h2>ゲスト OS のポートフォワーディング設定</h2>

<pre><code># ssh の設定
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guestssh/Protocol" TCP
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guestssh/GuestPort" 22
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guestssh/HostPort" 60022

# http の設定
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guesthttp/Protocol" TCP
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guesthttp/GuestPort" 80
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guesthttp/HostPort" 60080
</code></pre>

<ul>
<li>Guest の 22 番ポートを Host の 60022 番ポートへ</li>
<li>Guest の 80 番ポートを Host の 60080 番ポートへ</li>
</ul>


<p>転送する。f1 は VM の名前。<br/>
自由に使用できるポート番号は 49152 〜 65535 らしい。
50000 番台は CentOS が使っているので、FreeBSD は 60000 番台に割り当てました。</p>

<h2>ゲスト OS の起動</h2>

<pre><code>$ VBoxManage startvm --type vrdp f1
</code></pre>

<h2>ゲスト OS に ssh</h2>

<pre><code>$ ssh -p 60022 localhost
</code></pre>

<h2>ゲスト OS に scp</h2>

<pre><code>$ scp -P 60022 file username@localhost:/home/uername/path
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress を使ってみる]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/09/octopress/"/>
    <updated>2012-01-09T18:03:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/09/octopress</id>
    <content type="html"><![CDATA[<p>Tumblr を使って自分が勉強した事のメモとかを書いていましたが、
Octopress という技術ブログ向けフレームワークがあるということなので、使ってみました。</p>

<p><a href="http://octopress.org/">http://octopress.org/</a></p>

<!--more-->


<h2>インストール</h2>

<p>以下を参考にしながらインストール。
<a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/</a></p>

<h2>新規投稿</h2>

<pre><code>rake new_post['title']
</code></pre>

<p>なお、自分の環境だとファイルが作られたときのフォーマットが iso-2022-jp になっているようなので、初回は</p>

<pre><code># In vim
:set fileencoding=utf-8
</code></pre>

<p>で文字コードを直す。</p>

<h2>デプロイ</h2>

<pre><code># ページの作成
rake generate
# プレビュー
rake preview
# デプロイ
rake deploy
# 作成とデプロイを同時にやる場合
rake_gendeploy
</code></pre>

<h2>markdown 記法</h2>

<p>記事は markdown 記法と呼ばれる記法で書くらしい。</p>

<p>参考：<br/>
<a href="http://www.kotono8.com/wiki/Markdown#.E8.A6.8B.E5.87.BA.E3.81.97">http://www.kotono8.com/wiki/Markdown#.E8.A6.8B.E5.87.BA.E3.81.97</a>
<a href="http://nakama.cc.sophia.ac.jp/help.php?file=advanced_markdown.html">http://nakama.cc.sophia.ac.jp/help.php?file=advanced_markdown.html</a></p>

<p>見た目の変更とかは後々やろうと思います。<br/>
とりあえず、前に書いた記事のうちいくつかを移してみよう。</p>
]]></content>
  </entry>
  
</feed>
