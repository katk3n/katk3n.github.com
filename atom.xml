<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ApprEngineer.log]]></title>
  <link href="http://kentaktwo.github.com/atom.xml" rel="self"/>
  <link href="http://kentaktwo.github.com/"/>
  <updated>2015-01-24T23:42:45+09:00</updated>
  <id>http://kentaktwo.github.com/</id>
  <author>
    <name><![CDATA[kentaktwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nvm + Node.js + Mojito のインストール]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/05/03/install-nodejs/"/>
    <updated>2013-05-03T13:17:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/05/03/install-nodejs</id>
    <content type="html"><![CDATA[<p>Ubuntu 12.04 LTS に nvm + Node.js + Mojito をインストール</p>

<!--more-->


<h2>nvm とは</h2>

<p>Node Version Manager<br/>
複数のバージョンの Node.js をインストールし、必要に応じて切り替えることができる。</p>

<h2>nvm のインストール</h2>

<ul>
<li>ソースを取ってくるだけ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir .nvm
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> .nvm
</span><span class='line'><span class="nv">$ </span>git clone git://github.com/creationix/nvm.git .
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>起動時に nvm コマンドが使えるようにする<br/>
zsh の場合、nvm.sh の10行目で (修正されたはずなのに) エラーが出てしまったので、<br/>
そこを通らないように、先に <code>NVM_DIR</code> も設定しておく。</li>
</ul>


<figure class='code'><figcaption><span>.zshrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">## NVM</span>
</span><span class='line'><span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/.nvm/
</span><span class='line'><span class="nb">source</span> <span class="nv">$HOME</span>/.nvm/nvm.sh
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ヘルプ表示</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nvm
</span><span class='line'>
</span><span class='line'>Node Version Manager
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>    nvm <span class="nb">help                    </span>Show this message
</span><span class='line'>    nvm install <span class="o">[</span>-s<span class="o">]</span> &lt;version&gt;  Download and install a &lt;version&gt;
</span><span class='line'>    nvm uninstall &lt;version&gt;     Uninstall a version
</span><span class='line'>    nvm use &lt;version&gt;           Modify PATH to use &lt;version&gt;    nvm run &lt;version&gt; <span class="o">[</span>&lt;args&gt;<span class="o">]</span>  Run &lt;version&gt; with &lt;args&gt; as arguments
</span><span class='line'>    nvm ls                      List installed versions
</span><span class='line'>    nvm ls &lt;version&gt;            List versions matching a given description
</span><span class='line'>    nvm ls-remote               List remote versions available <span class="k">for </span>install
</span><span class='line'>    nvm deactivate              Undo effects of NVM on current shell
</span><span class='line'>    nvm <span class="nb">alias</span> <span class="o">[</span>&lt;pattern&gt;<span class="o">]</span>       Show all aliases beginning with &lt;pattern&gt;
</span><span class='line'>    nvm <span class="nb">alias</span> &lt;name&gt; &lt;version&gt;  Set an <span class="nb">alias </span>named &lt;name&gt; pointing to &lt;version&gt;
</span><span class='line'>    nvm <span class="nb">unalias</span> &lt;name&gt;          Deletes the <span class="nb">alias </span>named &lt;name&gt;
</span><span class='line'>    nvm copy-packages &lt;version&gt; Install global NPM packages contained in &lt;version&gt; to current version
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>    nvm install v0.4.12         Install a specific version number
</span><span class='line'>    nvm use 0.2                 Use the latest available 0.2.x release
</span><span class='line'>    nvm run 0.4.12 myApp.js     Run myApp.js using node v0.4.12
</span><span class='line'>    nvm <span class="nb">alias </span>default 0.4       Auto use the latest installed v0.4.x version
</span></code></pre></td></tr></table></div></figure>


<h2>Node.js のインストール</h2>

<p>インストールできるバージョン一覧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nvm ls-remote
</span></code></pre></td></tr></table></div></figure>


<p>Mojito を使いたいので、0.9 より低いバージョンをインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nvm install v0.8.19
</span></code></pre></td></tr></table></div></figure>


<h2>Mojito のインストール</h2>

<ul>
<li><a href="http://developer.yahoo.com/cocktails/mojito/docs/getting_started/quickstart.html">http://developer.yahoo.com/cocktails/mojito/docs/getting_started/quickstart.html</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install mojito -g
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac で休止状態にする]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/05/03/mac-sleep/"/>
    <updated>2013-05-03T13:05:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/05/03/mac-sleep</id>
    <content type="html"><![CDATA[<p>Mac で Windows でいう休止状態にする方法。</p>

<!--more-->


<p>以下のコマンドで、スリープを選択したときの挙動が変わる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pmset -a hibernatemode 3    # セーフスリープモード (デフォルト、バッテリーが無くなるまではスリープ、無くなったら休止状態)
</span><span class='line'>$ pmset -a hibernatemode 0    # スリープモード (Windows のスリープ)
</span><span class='line'>$ pmset -a hibernatemode 1    # ディープスリープモード (Windows の休止状態)</span></code></pre></td></tr></table></div></figure>


<p>現在の設定を確認するには、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pmset -g
</span><span class='line'>Active Profiles:
</span><span class='line'>Battery Power           -1
</span><span class='line'>AC Power                -1*
</span><span class='line'>Currently in use:
</span><span class='line'>standbydelay   4200
</span><span class='line'>standby        1
</span><span class='line'>womp           1
</span><span class='line'>halfdim        1
</span><span class='line'>panicrestart   157680000
</span><span class='line'>hibernatefile  /var/vm/sleepimage
</span><span class='line'>networkoversleep       0
</span><span class='line'>disksleep      10
</span><span class='line'>sleep          10
</span><span class='line'>hibernatemode  1             # ここがスリープの設定
</span><span class='line'>ttyskeepawake  1
</span><span class='line'>displaysleep   10
</span><span class='line'>acwake         0
</span><span class='line'>lidwake        1</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming in Lua Chapter 6]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/05/01/lua-chapter-6/"/>
    <updated>2013-05-01T18:31:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/05/01/lua-chapter-6</id>
    <content type="html"><![CDATA[<h1>More About Functions</h1>

<!--more-->


<ul>
<li>Lua の関数は JavaScript みたいに変数や table に入れたり、引数に渡したり、関数の戻り値として返すことができる。</li>
<li>Lua の関数は anonymous である</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>の syntax suger である。</p>

<h2>Closures</h2>

<ul>
<li>ある関数が他の関数の内部に書かれているとき、<br/>
その内部の関数はその内包している関数のローカル変数にアクセスすることができる (<em>lexical scoping</em>)。

<ul>
<li>そのローカル変数のことを <em>non-local variable</em> あるいは、Lua の世界では <em>upvalues</em> と呼ぶ。</li>
</ul>
</li>
<li>Lua の中では変数に入った関数は <em>closure</em> として振る舞う。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">newCounter</span><span class="p">()</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">function</span><span class="p">()</span>  <span class="c1">-- anonymous function</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">c1</span> <span class="o">=</span> <span class="n">newCounter</span><span class="p">()</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">c1</span><span class="p">())</span>  <span class="c1">--&gt; 1</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">c1</span><span class="p">())</span>  <span class="c1">--&gt; 2</span>
</span><span class='line'><span class="n">c2</span> <span class="o">=</span> <span class="n">newCounter</span><span class="p">()</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">c2</span><span class="p">())</span>  <span class="c1">--&gt; 1</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">c1</span><span class="p">())</span>  <span class="c1">--&gt; 3</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">c2</span><span class="p">())</span>  <span class="c1">--&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>関数自体は closure のプロトタイプのようなものである。</p>

<ul>
<li>関数を再定義することもできる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">oldSin</span> <span class="o">=</span> <span class="nb">math.sin</span>
</span><span class='line'><span class="nb">math.sin</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">oldSin</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="nb">math.pi</span><span class="o">/</span><span class="mi">180</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Non-Global Functions</h2>

<ul>
<li>table のフィールドに関数を定義できる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">Lib</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">Lib</span><span class="p">.</span><span class="n">foo</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">Lib</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">Lib</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">function</span> <span class="nc">Lib</span><span class="p">.</span><span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ローカル関数が定義できるが、再帰的に呼ぶときは注意。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">fact</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1">-- does not work</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>fact(n-1)</code> が呼ばれる時点で <code>fact</code> はまだ定義されていないので、グローバル変数の fact が呼ばれてしまう。
先にローカル変数を宣言しておけばよい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">fact</span>
</span><span class='line'><span class="n">fact</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>    <span class="c1">-- ここで local を書かないこと (新しくローカル変数が定義されてしまう)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span> <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="o">&lt;</span><span class="n">params</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">foo</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="o">&lt;</span><span class="n">params</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>の syntax suger なので、この書き方をするなら上記のような心配はしなくてよい。</p>

<h2>Proper Tail Calls</h2>

<ul>
<li>Lua は tail-call elimination (末尾呼出の最適化) を自動的に行う。

<ul>
<li>末尾再帰などで関数から関数を呼び出すときにスタックに積むのではなく、<br/>
goto 文にすることでスタックオーバーフローしないようにする。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- これはスタックオーバーフローしない</span>
</span><span class='line'><span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">then</span> <span class="k">return</span> <span class="n">foo</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>tail-call elimination が有効になるのは、</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">return</span> <span class="n">g</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>の形のときのみで、以下のように g() の結果を使って何かしている場合は tail call ではない</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="n">g</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">end</span>                 <span class="c1">-- return しない</span>
</span><span class='line'><span class="k">function</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="n">g</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">end</span>      <span class="c1">-- f(x) が g(x) の結果に1を足している</span>
</span><span class='line'><span class="k">function</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="n">g</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="k">end</span>        <span class="c1">-- f(x) が g(x) の結果を1つにまるめている</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming in Lua Chapter 5]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/04/30/lua-chapter-5/"/>
    <updated>2013-04-30T23:34:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/04/30/lua-chapter-5</id>
    <content type="html"><![CDATA[<h1>Functions</h1>

<!--more-->


<ul>
<li>関数の引数が1つのみで、かつ引数が文字列リテラルまたは table のコンストラクタのときのみ、
関数の括弧を省略してよい。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span> <span class="s2">&quot;</span><span class="s">Hello World&quot;</span>     <span class="c1">-- print(&quot;Hello World&quot;)</span>
</span><span class='line'><span class="n">f</span><span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">20</span><span class="p">}</span>           <span class="c1">-- f({x=10, y=20})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>table obj の関数 foo() に対し、<code>obj:foo(x)</code> は <code>obj.foo(obj, x)</code> と同じ。<br/>
これはオブジェクト指向のような書き方をするときに使える。</li>
<li>関数の引数より少なく値が渡された場合は、値が渡されなかった引数には nil が入る。<br/>
また、引数より多く値が渡された場合は、余分な値は無視される。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">something</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>     <span class="c1">--&gt; a=3, b=4</span>
</span><span class='line'><span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>        <span class="c1">--&gt; a=3, b=nil</span>
</span><span class='line'><span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1">--&gt; a=3, b=4 (5 は無視される)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Multiple Results</h2>

<ul>
<li>Lua の関数は複数の値を返すことができる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="k">return</span> <span class="s2">&quot;</span><span class="s">a&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">b&quot;</span> <span class="k">end</span>
</span><span class='line'><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">foo</span><span class="p">()</span>        <span class="c1">-- x=&quot;a&quot;, y=&quot;b&quot;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">foo</span><span class="p">()</span>           <span class="c1">-- x=&quot;a&quot;</span>
</span><span class='line'><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="n">foo</span><span class="p">()</span>     <span class="c1">-- x=&quot;a&quot;, y=&quot;b&quot;, z=nil</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>複数の戻り値を受け取れるのは、その関数が文の中で最後に呼ばれたときのみ。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">foo</span><span class="p">()</span>     <span class="c1">-- x=10, y=&quot;a&quot;, z=&quot;b&quot;</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="n">foo</span><span class="p">(),</span> <span class="mi">10</span>     <span class="c1">-- x=&quot;a&quot;, y=10, z=nil</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">foo</span><span class="p">())</span>            <span class="c1">--&gt; a    b</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">foo</span><span class="p">(),</span> <span class="mi">1</span><span class="p">)</span>         <span class="c1">--&gt; a    1</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="p">{</span><span class="n">foo</span><span class="p">(),</span> <span class="mi">4</span><span class="p">}</span>          <span class="c1">-- t[1] = &quot;a&quot;, t[2] = 4</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>関数を余分に括弧で囲んで呼び出すと、戻り値を1つのみにすることができる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">((</span><span class="n">foo</span><span class="p">()))</span>          <span class="c1">--&gt; a</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Variable Number of Arguments</h2>

<ul>
<li><code>...</code> で可変引数が扱える。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="o">..</span><span class="p">.)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">{</span><span class="o">..</span><span class="p">.}</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>    <span class="c1">--&gt; 54</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>printf() のような関数が書ける</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">fwrite</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="o">..</span><span class="p">.)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">io.write</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="o">..</span><span class="p">.))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Named Arguments</h2>

<ul>
<li>Lua に <code>foo(x="a", y="b")</code> のように引数に名前をつけて関数を呼び出す機能は無いが、table を用いて似たようなことができる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">foo1</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo1</span><span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">a&quot;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">b&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming in Lua Chapter 4]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/04/29/lua-chapter-4/"/>
    <updated>2013-04-29T23:48:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/04/29/lua-chapter-4</id>
    <content type="html"><![CDATA[<h1>Statements</h1>

<!--more-->


<h2>Assignment</h2>

<ul>
<li>Lua は複数の変数への代入を同時にできる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span>  <span class="c1">-- swap &#39;x&#39; for &#39;y&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>変数の数の方が多かった場合、多かった分の変数には nil が入る。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>  <span class="c1">--&gt; 0  1  nil</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- 初期化するときは注意</span>
</span><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>  <span class="c1">--&gt; 0  nil  nil</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>代入値の方が多かった場合、多かった分の値は無視される。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>  <span class="c1">--&gt; 3  4</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Local Variables and Blocks</h2>

<ul>
<li>ローカル変数を使うには <code>local</code> を頭につけて宣言する。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">j</span> <span class="o">=</span> <span class="mi">10</span>          <span class="c1">-- global variable</span>
</span><span class='line'><span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>     <span class="c1">-- local variable</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>do-end</code> を使ってブロックが作れる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">foo&quot;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>        <span class="c1">--&gt; foo</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s">bar&#39;</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>        <span class="c1">--&gt; bar</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>            <span class="c1">--&gt; foo</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>local foo = foo</code> とすれば、グローバル変数の foo を変えずにローカル変数の foo を操作できる。</li>
<li>ローカル変数の方がアクセスがスコープが限定されていて、アクセスも速いので、できるだけローカル変数を使うようにする。</li>
</ul>


<h2>Control Structures</h2>

<h3>if then else</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">if</span> <span class="n">op</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">+&quot;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="k">elseif</span> <span class="n">op</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">-&quot;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>else if</code> ではなく <code>elseif</code></li>
</ul>


<h3>while</h3>

<p><code>while-do-end</code> の形で使う</p>

<h3>repeat</h3>

<p>C 言語でいう do-while みたいなやつ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">repeat</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">until</span> <span class="n">line</span> <span class="o">~=</span> <span class="s2">&quot;</span><span class="s">&quot;</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>他の多くのプログラミング言語と違い、repeat 内のローカル変数は until の中でも有効。</li>
</ul>


<h3>Numeric for</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- i=10 から始めて、1 まで -1 刻みで &lt;something&gt; をする。</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">something</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- 3つ目を省略すると 1 刻みになる。</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">a</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>     <span class="c1">-- すべての a[i] に1をたす</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>break</code> が使える。</li>
</ul>


<h3>Generic for</h3>

<p>イテレータ関数を使って要素を回す</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- 配列 &#39;a&#39; の全要素を表示する</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>break and return</h2>

<ul>
<li><code>break</code> と <code>return</code> が使える。</li>
<li><code>end</code>, <code>else</code>, <code>until</code> のいずれかの直前にしか置いてはいけない。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">foo</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span>          <span class="c1">--&lt;&lt; SYNTAX ERROR</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">something</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>デバッグ用途などで return を書きたい場合は、<code>do-end</code> を使う。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">foo</span><span class="p">()</span>
</span><span class='line'>    <span class="k">do</span> <span class="k">return</span> <span class="k">end</span>  <span class="c1">-- end の直前にあるので OK</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">something</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming in Lua Chapter 3]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/04/29/lua-chapter-3/"/>
    <updated>2013-04-29T23:04:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/04/29/lua-chapter-3</id>
    <content type="html"><![CDATA[<h1>Expressions</h1>

<!--more-->


<h2>Arithmetic Operations</h2>

<p>Lua がサポートしている演算子は<br/>
<code>+</code>, <code>-</code> (二項演算子), <code>*</code>, <code>/</code>, <code>^</code> (累乗), <code>%</code>, <code>-</code> (単項演算子)</p>

<p><code>%</code> の定義は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">%</span> <span class="n">b</span> <span class="o">==</span> <span class="n">a</span> <span class="o">-</span> <span class="n">floor</span><span class="p">(</span><span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="p">)</span><span class="o">*</span><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>%</code> 演算子は小数でも有効で、例えば <code>x - x%0.01</code> とすれば、<code>x</code> の小数第二位までが取れる。</p>

<h2>Relational Operators</h2>

<p>Lua の比較演算子は、型の一致も含めてチェックする。<br/>
よって <code>1 == "1"</code> は false。<br/>
ちなみに &ldquo;等しくない&rdquo; は <code>!=</code> ではなく <code>~=</code>。<br/>
table, userdata, function の比較は参照単位で行われる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{};</span> <span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{};</span> <span class="n">b</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">b</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">=</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span>  <span class="c1">--&gt; false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">=</span> <span class="n">a</span> <span class="o">==</span> <span class="n">c</span>  <span class="c1">--&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>2 &lt; "15"</code> のように型が違う値の大小関係を調べようとするとエラーになる。</p>

<h2>Logical Operators</h2>

<p><code>and</code>, <code>or</code>, <code>not</code> がある。<br/>
<code>x and y</code> は、x が true なら y, false なら x<br/>
<code>x or y</code> は、x が true なら x, false なら y</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="ow">or</span> <span class="n">v</span>
</span></code></pre></td></tr></table></div></figure>


<p>は <code>if not x then x = v end</code> と同じで、x にデフォルト値を入れるときなどに使える。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="p">(</span><span class="n">a</span> <span class="ow">and</span> <span class="n">b</span><span class="p">)</span> <span class="ow">or</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、C 言語の <code>a ? b : c</code> と同じことができる。</p>

<h2>Table Constructors</h2>

<p>table を作るときに初期値が入れられる。index は 1 始まり。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="cm">--[[</span>
</span><span class='line'><span class="cm">t1[1] = &quot;a&quot; (t[0] ではない)</span>
</span><span class='line'><span class="cm">t1[2] = &quot;b&quot;</span>
</span><span class='line'><span class="cm">t1[3] = &quot;c&quot;</span>
</span><span class='line'><span class="cm">t1[&quot;x&quot;] = &quot;d&quot; (t.x = &quot;d&quot;)</span>
</span><span class='line'><span class="cm">t1[&quot;y&quot;] = &quot;e&quot; (t.y = &quot;e&quot;)</span>
</span><span class='line'><span class="cm">--]]</span>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;</span><span class="s">a&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">b&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">c&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">d&quot;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">e&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">--[[</span>
</span><span class='line'><span class="cm">[] を使うと複雑な index も作れる</span>
</span><span class='line'><span class="cm">{[&quot;x&quot;] = 0} と {x=0} は同じ</span>
</span><span class='line'>
</span><span class='line'><span class="cm">t2[-1] = &quot;a&quot;</span>
</span><span class='line'><span class="cm">t2[&quot;+&quot;] = &quot;add&quot;</span>
</span><span class='line'><span class="cm">t[22] = &quot;s&quot;</span>
</span><span class='line'><span class="cm">--]]</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="p">{[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">a&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;</span><span class="s">+&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">add&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">s&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">--[[</span>
</span><span class='line'><span class="cm">0 始まりの table を作ることもできるが、</span>
</span><span class='line'><span class="cm">ほとんどの関数等は 1 始まりを想定して作られているのでやめたほうがいい。</span>
</span><span class='line'><span class="cm">--]]</span>
</span><span class='line'><span class="n">t3</span> <span class="o">=</span> <span class="p">{[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">a&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">b&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">c&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">d&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">--[[</span>
</span><span class='line'><span class="cm">要素の区切りにカンマの代わりにセミコロンが使える。</span>
</span><span class='line'><span class="cm">--]]</span>
</span><span class='line'><span class="n">t4</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">45</span><span class="p">;</span> <span class="s2">&quot;</span><span class="s">one&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">two&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">three&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.4 インストール]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/04/07/centos6-install/"/>
    <updated>2013-04-07T18:18:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/04/07/centos6-install</id>
    <content type="html"><![CDATA[<p>CentOS 6.4 (64-bit) を Virtual Box VM にインストール</p>

<!--more-->


<h1>VirtualBox VM 準備</h1>

<p>ネットワークの設定は</p>

<ul>
<li>ネットワークアダプタ1: NAT</li>
<li>ネットワークアダプタ2: ホストオンリーアダプタ</li>
</ul>


<p>ストレージにインストーラをセットして起動</p>

<h1>インストール</h1>

<p>&ldquo;Install or Update an existing System&rdquo; を選択して開始</p>

<h2>Disk Found</h2>

<p>Skip を選択</p>

<h2>Warning, Error processing Drive</h2>

<p>&ldquo;Re-initialize all&rdquo; を選択</p>

<h2>Time Zone Selection</h2>

<p>&ldquo;System clock uses UTC&rdquo; にチェックを入れ、&#8221;Asia/Tokyo&#8221; を選択し、OK</p>

<h2>Partitioning Type</h2>

<p>&ldquo;Use entire drive&rdquo; を選択</p>

<h1>初期設定</h1>

<h2>ユーザの追加</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ useradd -g wheel &lt;username&gt;
</span><span class='line'>$ passwd &lt;username&gt;
</span><span class='line'>$ vi /etc/sudoers  # wheel に sudo 権限を与える
</span><span class='line'>$ usermod -G wheel &lt;username&gt;  # useradd で wheel group に入れ忘れた場合</span></code></pre></td></tr></table></div></figure>


<h2>iptables, SELinux 無効化</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chkconfig iptables off
</span><span class='line'>$ chkconfig ip6tables off
</span><span class='line'>$ vi /etc/sysconfig/selinux
</span><span class='line'>SELINUX=disabled</span></code></pre></td></tr></table></div></figure>


<p>SELINUX を無効にすると、kernel panic を起こすことがあるので、<br/>
<code>/boot/grub/grub.conf</code> の <code>kernel</code> 行に <code>enforcing=0</code> を追記する。<br/>
kernel panic を起こしてしまった場合は <a href="http://h2np.net/mynotebook/post/130">http://h2np.net/mynotebook/post/130</a></p>

<h2>ホスト名変更</h2>

<p><code>/etc/sysconfig/network</code> を編集</p>

<h2>ネットワーク設定</h2>

<p>ホストマシンと通信するため、ホストオンリーアダプタをセットしたデバイスの設定ファイルを編集</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 追加・変更箇所</span>
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">IPADDR</span><span class="o">=</span>192.168.56.101
</span><span class='line'><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span><span class='line'><span class="nv">GATEWAY</span><span class="o">=</span>192.168.56.0
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX Environment Chapter 5]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/01/18/apue-chapter-5/"/>
    <updated>2013-01-18T21:10:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/01/18/apue-chapter-5</id>
    <content type="html"><![CDATA[<h1>Standard I/O Library</h1>

<!--more-->


<h2>Stream</h2>

<ul>
<li>システムコールでの I/O は file descriptor を使用していた。</li>
<li>standard I/O library では、<em>stream</em> と呼ばれるものを使用する。</li>
<li>stream は single-byte, multibyte (&ldquo;wide&rdquo;) 両方の文字セットで使用できる。</li>
<li>read や write を single-byte か multibyte どちらで行うかを決めるものを stream&rsquo;s orientation と呼ぶ。</li>
<li><code>fwide()</code> 関数で stream&rsquo;s orientation を変更することができる。</li>
</ul>


<h2>FILE Object</h2>

<ul>
<li><code>fopen()</code> などで stream を open すると、<code>FILE</code> オブジェクトのポインタが返ってくる。</li>
<li><code>FILE</code> には standard I/O library が stream を扱うのに必要な情報が入っている。</li>
<li><code>FILE *</code> を file pointer と呼ぶ。</li>
</ul>


<h2>Standard Input, Standard Output, and Standard Error</h2>

<p><code>STDIN_FILENO</code>, <code>STDOUT_FILENO</code>, <code>STDERR_FILENO</code> file descriptor に対応する file pointer として、
<code>stdin</code>, <code>stdout</code>, <code>stderr</code> が <code>&lt;stdio.h&gt;</code> で定義されている。</p>

<h2>Buffering</h2>

<p>standard I/O library は <code>read()</code> や <code>write()</code> の呼び出し回数をできるだけ少なくするために、
buffering を行なっている。3種類の buffering が提供されている:</p>

<ol>
<li>Fully buffered: 実際の I/O は buffer がいっぱいになったときに実行される。<br/>
ディスクの読み込みなどは fully buffered である。</li>
<li>Line buffered: input や output で改行記号を検出したときに I/O が行われる。<br/>
stdin や stdout などのターミナル関連での buffering は Line buffered である。</li>
<li>Unbuffered: buffering しない。<br/>
standard error stream などは Unbuffered である (すぐに表示してほしいため)。</li>
</ol>


<!--dummy comment line for breaking list-->


<ul>
<li>buffering は <code>setbuf()</code> や <code>setvbuf()</code> で変更することができる。</li>
<li>standard I/O buffer の中身を書きだすことを <em>flush</em> と呼ぶ。

<ul>
<li>flush は buffer がいっぱいになったときなどに standard I/O が自動的に行なってくれるが、
<code>fflush()</code> を呼ぶことで明示的に行うこともできる。</li>
</ul>
</li>
</ul>


<h2>Opening a Stream</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">fopen</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">pathname</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">freopen</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">pathname</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">type</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">fdopen</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">file</span> <span class="n">pointer</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="nb">NULL</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>fopen()</code> はファイル名を指定して open する。</li>
<li><code>freopen()</code> はファイル名を指定して、指定した stream に open する。

<ul>
<li>stdin, stdout, stderr などに open したい場合に使う。</li>
</ul>
</li>
<li><code>fdopen()</code> は file descriptor を指定して open する。</li>
<li><em>type</em> は

<ul>
<li><code>r</code> はそのまま、<code>w</code> は truncate する、<code>a</code> は追記する</li>
<li><code>+</code> をつけると read, write 両方になる</li>
<li><code>fdopen()</code> の場合、既にファイルが open されているため、truncate は行われない。</li>
</ul>
</li>
</ul>


<h2>Closing a Stream</h2>

<ul>
<li>open stream を close するには <code>fclose()</code> を使う。</li>
<li>buffering された output data は close される前に flush される。</li>
<li>buffering された input data は破棄される。</li>
<li>standard I/O library が自動的に確保した buffer は解放される。</li>
<li><code>exit()</code> が呼ばれると自動的に <code>close()</code> される。</li>
</ul>


<h2>Reading and Writing a Stream</h2>

<p>unformatted I/O を行う関数には、3種類ある。</p>

<h3>Character-at-a-time I/O</h3>

<p>文字単位で入出力する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Input Functions */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getc</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fgetc</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">getchar</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">next</span> <span class="n">character</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="n">EOF</span> <span class="n">on</span> <span class="n">end</span> <span class="n">of</span> <span class="n">file</span> <span class="n">or</span> <span class="n">error</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Output Functions */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">putc</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fputc</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">putchar</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">c</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="n">EOF</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>getchar()</code> は <code>getc(stdin)</code> と同じ</li>
<li><code>getc()</code> はマクロの場合があるが、<code>fgetc()</code> は必ず関数である</li>
<li><code>EOF</code> は多くの場合 -1 として定義される</li>
</ul>


<p><code>EOF</code> が返ってきたときに、EOF なのかエラーなのかわからないため、それを判別する関数が用意されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">ferror</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">feof</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">nonzero</span> <span class="k">if</span> <span class="n">condition</span> <span class="n">is</span> <span class="nb">true</span><span class="p">,</span> <span class="mi">0</span> <span class="n">otherwise</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>FILE Object の中で、error flag や end-of-file flag が管理されている。</li>
<li><code>clearerr()</code> でそれらの flag をクリアできる。</li>
</ul>


<p><code>ungetc()</code> で1文字読み戻すことができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">ungetc</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">c</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="n">EOF</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>読み戻せるのは1文字まで</li>
</ul>


<h3>Line-at-a-time I/O</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">fgets</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">gets</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">buf</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="nb">NULL</span> <span class="n">on</span> <span class="n">end</span> <span class="n">of</span> <span class="n">file</span> <span class="n">or</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>改行記号に達するか、<em>n - 1</em> byte まで読み込む (最後に null byte を入れるため)</li>
<li><code>gets()</code> は buffer size を指定できないため、使ってはいけない</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">fputs</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">str</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">puts</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">non</span><span class="o">-</span><span class="n">negative</span> <span class="n">value</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="n">EOF</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>null byte まで書きだす (null byte は書き出されない)</li>
<li>改行記号が入っている必要はない</li>
<li><code>puts()</code> に <code>gets()</code> のような脆弱性は無いが、使わない方がいいだろう</li>
</ul>


<h3>Binary I/O</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">size_t</span> <span class="n">fread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">ptr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nobj</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fp</span><span class="p">);</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">fwrite</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">ptr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nobj</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">number</span> <span class="n">of</span> <span class="n">objects</span> <span class="n">read</span> <span class="n">or</span> <span class="n">written</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>1単位あたりのサイズを <em>size</em> で指定して、読み書きする単位数を <em>nobj</em> で指定する

<ul>
<li><em>size</em> は <code>sizeof(float)</code> や構造体のサイズなど</li>
</ul>
</li>
<li>バイナリや、構造体を読み書きするのに使う

<ul>
<li>システムによってデータ構造が違ったりするので、異なるシステム間ではうまく動作しない</li>
</ul>
</li>
</ul>


<h2>Standard I/O Efficiency</h2>

<ul>
<li>システムコールを呼ぶのが一番コストがかかる</li>
<li>standard I/O を使うと、システムコールを呼ぶ回数を減らすように buffering してくれるので、
直接システムコールを呼ぶより高速になることが多い

<ul>
<li>効率良くなるように自分でシステムコールを呼ぶ調整をしている場合は別</li>
</ul>
</li>
</ul>


<h2>Positioning a Stream</h2>

<p>standard I/O stream の位置を調べる関数は3種類ある:
1. <code>ftell()</code>, <code>fseek()</code>: 位置は <code>long</code> で表す
2. <code>ftello()</code>, <code>fseeko()</code>: <code>ftell()</code> と <code>fseek()</code> の <code>long</code> が <code>off_t</code> に置き換わったもの
3. <code>fgetpos()</code>, fsetpos()<code>:</code>fpos_t` を使って位置を表す。UNIX でないシステムではこれを使う</p>

<h2>Formatted I/O</h2>

<h3>Formatted Output</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">printf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fprintf</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">number</span> <span class="n">of</span> <span class="n">characters</span> <span class="n">output</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="n">nagative</span> <span class="n">value</span> <span class="k">if</span> <span class="n">output</span> <span class="n">error</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">sprintf</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">buf</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">snprintf</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">number</span> <span class="n">of</span> <span class="n">characters</span> <span class="n">stored</span> <span class="n">in</span> <span class="n">array</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="n">negative</span> <span class="n">value</span> <span class="k">if</span> <span class="n">encoding</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>sprintf()</code> はオーバーフローする恐れがあるので、<code>snprintf()</code> を使うこと。</li>
<li>% 記号で始まるやつ (conversion specification) のフォーマットは以下の通り</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">%</span><span class="p">[</span><span class="n">flags</span><span class="p">][</span><span class="n">fldwidth</span><span class="p">][</span><span class="n">precision</span><span class="p">][</span><span class="n">lenmodifier</span><span class="p">]</span><span class="n">convtype</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>&ldquo;&hellip;&rdquo; の代わりに、<code>va_list</code> になった <code>vprintf()</code> 系の関数もある (<code>&lt;stdarg.h&gt;</code> を includeする)。</li>
</ul>


<h3>Formatted Input</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">scanf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fscanf</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">sscanf</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">buf</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">number</span> <span class="n">of</span> <span class="n">input</span> <span class="n">items</span> <span class="n">assigned</span><span class="p">,</span> <span class="n">EOF</span> <span class="k">if</span> <span class="n">input</span> <span class="n">error</span> <span class="n">or</span> <span class="n">end</span> <span class="n">of</span> <span class="n">file</span> <span class="n">before</span> <span class="n">any</span> <span class="n">conversion</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>conversion specification のフォーマットは以下の通り</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">%</span><span class="p">[</span><span class="o">*</span><span class="p">][</span><span class="n">fldwidth</span><span class="p">][</span><span class="n">lenmodifier</span><span class="p">]</span><span class="n">convtype</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>頭にアスタリスクがついているやつについては conversion 結果が変数に格納されない</li>
<li>&ldquo;&hellip;&rdquo; の代わりに、<code>va_list</code> になった <code>vscanf()</code> 系の関数もある (<code>&lt;stdarg.h&gt;</code> を includeする)。</li>
</ul>


<h2>Implementation Details</h2>

<ul>
<li><code>fileno()</code> 関数で file pointer に対応する file descriptor が取得できる。</li>
</ul>


<h2>Temporary Files</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">tmpnam</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="n">returns</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">unique</span> <span class="n">pathname</span>
</span><span class='line'>
</span><span class='line'><span class="kt">FILE</span> <span class="o">*</span><span class="n">tmpfile</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="n">returns</span> <span class="n">file</span> <span class="n">pointer</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="nb">NULL</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>tmpnam()</code> は存在しているファイル名とかぶらないパス名を作成する。

<ul>
<li>最大 <code>TMP_MAX</code> 回は異なるパス名が生成される (<code>TMP_MAX</code> は <code>&lt;stdio.h&gt;</code> で定義されている)。</li>
<li><em>ptr</em> が <code>NULL</code> の場合、作られたパス名は static area に格納される。</li>
<li><em>ptr</em> が <code>NULL</code> でない場合、その参照先の buffer は少なくとも
<code>L_tmpnam</code> 以上のサイズがある必要がある (<code>L_tmpnam</code> は <code>&lt;stdio.h&gt;</code> で定義されている)。</li>
</ul>
</li>
<li><code>tmpfile()</code> は type が <code>wb+</code> の一時ファイルを作成する。これはプログラム終了時に削除される。</li>
</ul>


<p>以下の2つの関数が XSI で定義されている</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">tempnam</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">directory</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">prefix</span><span class="p">);</span>
</span><span class='line'><span class="n">returns</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">unique</span> <span class="n">pathname</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">mkstemp</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">template</span><span class="p">);</span>
</span><span class='line'><span class="n">returns</span> <span class="n">file</span> <span class="n">descriptor</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>tempnam()</code> はディレクトリとプレフィックスが指定できる <code>tmpnam()</code> である。

<ul>
<li><em>directory</em> は環境変数 <code>TMP_DIR</code> が最優先される。
<code>TMP_DIR</code> が参照するディレクトリが存在しない場合、スキップされる。</li>
<li><em>directory</em> が <code>NULL</code> の場合、<code>P_tmpdir</code> が使われる。</li>
<li><em>prefix</em> にはファイル名の先頭を最大5文字まで指定することができる。</li>
</ul>
</li>
<li><code>mkstemp()</code> は一時ファイルを作るが、file pointer の代わりに file descriptor を返す。

<ul>
<li><em>template</em> には、最後が <code>XXXXXX</code> で終わるような文字列を渡す。そこにユニークな文字が入る。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX Enviroment Chapter 4]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/10/14/apue-chapter-4/"/>
    <updated>2012-10-14T14:25:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/10/14/apue-chapter-4</id>
    <content type="html"><![CDATA[<h1>Files and Directories</h1>

<!--more-->


<h2>stat, fstat and lstat Functions</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">stat</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">pathname</span><span class="p">,</span> <span class="k">struct</span> <span class="n">stat</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">buf</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fstat</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="k">struct</span> <span class="n">stat</span> <span class="o">*</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">lstat</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">pathname</span><span class="p">,</span> <span class="k">struct</span> <span class="n">stat</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">buf</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイルについての情報が書かれた構造体 (stat 構造体) を返す。

<ul>
<li><code>stat()</code> はファイル名</li>
<li><code>fstat()</code> はファイルディスクリプタ</li>
<li><code>lstat()</code> はシンボリックリンク
(<code>stat()</code> の場合はシンボリックリンクのときはその参照先)</li>
</ul>
</li>
<li>restrict ポインタはそのポインタが別名を持たないことを保証し、
コンパイル時の最適化を効率的に行うことができる。</li>
<li>stat 構造体の定義は実装によるが、だいたい以下のようになる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">stat</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mode_t</span>      <span class="n">st_mode</span><span class="p">;</span>    <span class="cm">/* file type &amp; mode (permissions) */</span>
</span><span class='line'>    <span class="n">ino_t</span>       <span class="n">st_ino</span><span class="p">;</span>     <span class="cm">/* i-node number (serial number) */</span>
</span><span class='line'>    <span class="n">dev_t</span>       <span class="n">st_dev</span><span class="p">;</span>     <span class="cm">/* device number (file system) */</span>
</span><span class='line'>    <span class="n">dev_t</span>       <span class="n">st_rdev</span><span class="p">;</span>    <span class="cm">/* device number for special files */</span>
</span><span class='line'>    <span class="n">nlink_t</span>     <span class="n">st_nlink</span><span class="p">;</span>   <span class="cm">/* number of links */</span>
</span><span class='line'>    <span class="n">uid_t</span>       <span class="n">st_uid</span><span class="p">;</span>     <span class="cm">/* user ID of owner */</span>
</span><span class='line'>    <span class="n">gid_t</span>       <span class="n">st_gid</span><span class="p">;</span>     <span class="cm">/* group ID of owner */</span>
</span><span class='line'>    <span class="kt">off_t</span>       <span class="n">st_size</span><span class="p">;</span>    <span class="cm">/* size in bytes, for regular files */</span>
</span><span class='line'>    <span class="kt">time_t</span>      <span class="n">st_atime</span><span class="p">;</span>   <span class="cm">/* time of last access */</span>
</span><span class='line'>    <span class="kt">time_t</span>      <span class="n">st_mtime</span><span class="p">;</span>   <span class="cm">/* time of last modification */</span>
</span><span class='line'>    <span class="kt">time_t</span>      <span class="n">st_ctime</span><span class="p">;</span>   <span class="cm">/* time of last file status change */</span>
</span><span class='line'>    <span class="n">blksize_t</span>   <span class="n">st_blksize</span><span class="p">;</span> <span class="cm">/* best I/O block size */</span>
</span><span class='line'>    <span class="n">blkcnt_t</span>    <span class="n">st_blocks</span><span class="p">;</span>  <span class="cm">/* number of disk blocks allocated */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>File Types</h2>

<ul>
<li>ファイルの種類は7種類

<ul>
<li>Regular file</li>
<li>Directory file</li>
<li>Block special file: ディスクドライブなどのデバイスに buffered I/O アクセスする</li>
<li>Character special file: デバイスに unbuffered I/O アクセスする</li>
<li>FIFO: プロセス間通信で使う。pipe とも呼ばれる。</li>
<li>Socket: プロセス間のネットワーク通信に使う。</li>
<li>Symbolic link: 他のファイルを参照するファイル</li>
</ul>
</li>
<li>ファイルの種類は <code>st_mode</code> に入っている。</li>
<li>ファイルの種類を調べるには <code>S_ISREG()</code>, <code>S_ISDIR()</code> などのマクロを使う。

<ul>
<li>Linux で <code>S_ISSOCK()</code> マクロを使うには <code>_GNU_SOURCE</code> を定義する必要がある。</li>
</ul>
</li>
</ul>


<h2>Set-User-ID and Set-Group-ID</h2>

<ul>
<li>すべてのプロセスは関連する ID を持っている

<ul>
<li>real user ID, real group ID<br/>
自分が誰なのかを表す。login 時に password file から読み取られる。</li>
<li>effective user ID, effective group ID, supplementary group ID<br/>
ファイルアクセスの権限を表す。</li>
<li>saved set-user-ID, saved set-group-ID<br/>
プログラム実行時の effective user ID と effective group ID のコピー</li>
</ul>
</li>
<li>プログラムが実行されると、通常 effective user (group) ID には real user (group) ID がセットされるが、
<em>set-user-ID</em> bit や <em>set-group-ID</em> bit を立てると、
effective user (group) ID をそのファイルのオーナー (<code>st_uid</code>, <code>st_gid</code>) にすることができる。

<ul>
<li><code>passwd(1)</code> はスーパーユーザーで実行される必要がある。</li>
</ul>
</li>
<li>set-user-ID (set-group-ID) bit は<code>st_mode</code> の中に含まれ、<code>S_ISUID()</code>, <code>S_ISGID()</code> で調べることができる。</li>
</ul>


<h2>File Access Permissions</h2>

<ul>
<li>directory の execute 権限は search bit とも呼ばれる

<ul>
<li>directory の read 権限は directory 内のファイル名のリストを表示したりする (directory file を読む) 権限</li>
<li>directory の execute 権限は directory にアクセスする権限</li>
</ul>
</li>
<li>ファイルを削除するには、そのファイルがある directory に write と execute 権限があることが必要。
そのファイル自体に read や write 権限がある必要はない。</li>
<li>owner ID はファイルのプロパティであり、effective ID はプロセスのプロパティである。</li>
</ul>


<h2>access Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">access</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>(effective でなく) real user (group) ID がファイルへの権限を持っているか調べる。</li>
<li>set-user-ID されていても、real user ID についての権限が調べられる。</li>
</ul>


<h2>umask Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="n">mode_t</span> <span class="n">umask</span><span class="p">(</span><span class="n">mode_t</span> <span class="n">cmask</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nl">return:</span> <span class="err">変更前の</span> <span class="n">mask</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイル作成時に umask に設定した権限を除外することができる。

<ul>
<li><code>S_IROTH | S_IWOTH</code> みたいにして設定</li>
</ul>
</li>
<li>プログラム内で設定した umask はプログラムが終了すると元に戻る。</li>
</ul>


<h2>chmod and fchmod Functions</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">chmod</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="n">mode_t</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fchmod</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="n">mode_t</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイルのアクセス権限を変更する。</li>
<li>現在の権限から group execute 権限を取り除き、set-group-ID するには</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">stat</span> <span class="n">statbuf</span><span class="p">;</span>
</span><span class='line'><span class="n">stat</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">statbuf</span><span class="p">);</span>
</span><span class='line'><span class="n">chmod</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">statbuf</span><span class="p">.</span><span class="n">st_mode</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">S_IXGRP</span><span class="p">)</span> <span class="o">|</span> <span class="n">S_ISGID</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ls -l</code> したときに execute 権限にある <code>S</code> は execute 権限は無いが、
set-user-ID (set-group-ID) されてるという意味。</li>
</ul>


<h2>Sticky Bit</h2>

<ul>
<li>sticky bit がセットされたプログラムが実行されると、
プロセス終了時にそのコピーがスワップ領域にコピーされる。</li>
<li>次回以降そのプログラム実行時のメモリへのロードが高速になる。</li>
<li>sticky bit をセットにするには <code>S_ISVTX</code> をセットする。</li>
<li>最近の UNIX システムでは <em>saved-text</em> bit と呼ばれる。</li>
<li>最近の UNIX システムでは Virtual memory システムだったり、ファイルシステムが高速
になったりで、このテクニックの必要は薄くなっている。</li>
<li>最近は sticky bit は directory にセットされる使い方をしている。

<ul>
<li>directory に sticky bit がセットされると、directory 内のファイルは
directory への write 権限を持っていて、かつ

<ul>
<li>ファイルのオーナーである</li>
<li>ディレクトリのオーナーである</li>
<li>スーパーユーザーである
のいずれかを満たすユーザにしか消去や名前の変更ができないようになる。</li>
</ul>
</li>
<li>sticky bit がセットされている directory には、<code>/tmp</code> などがある。

<ul>
<li><code>/tmp</code> には色んなユーザがファイルを作成するので、
パーミッションは 777 になっているが、sticky bit がセットされているので、
ファイルの削除などはオーナーにしかできない。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>chown, fchown, and lchown Functions</h2>

<ul>
<li><code>chown()</code> でファイルの user ID や group ID を変更することができる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">chown</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="n">uid_t</span> <span class="n">owner</span><span class="p">,</span> <span class="n">gid_t</span> <span class="n">group</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fchown</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="n">uid_t</span> <span class="n">owner</span><span class="p">,</span> <span class="n">gid_t</span> <span class="n">group</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">lchown</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="n">uid_t</span> <span class="n">owner</span><span class="p">,</span> <span class="n">gid_t</span> <span class="n">group</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>lchown()</code> はシンボリックリンク自体のオーナーを変更する</li>
<li><em>owner</em> または <em>group</em> を -1 にすると、その ID は変更されない</li>
<li><code>_POSIX_CHOWN_RESTRICTED</code> が有効になっていると、他のユーザのファイルの user ID は変更できない。
自分のファイルの group ID は変更できるが、自分が所属しているグループにしか変更できない。</li>
<li>superuser のプロセスからこれらの関数が実行されると、set-user-ID と set-group-ID の bit はクリアされる</li>
</ul>


<h2>File Size</h2>

<ul>
<li><code>stat</code> 構造体の <code>st_size</code> にはファイルのサイズがバイト単位で入っている</li>
<li>このフィールドは regular files, directories, symbolic links のときのみ意味をなす

<ul>
<li>regular file の場合、ファイルサイズ 0 が許容される。これはファイルの最初が end-of-file の場合である。</li>
<li>directory の場合、ファイルサイズは 16 や 512 などの複数の値になる。</li>
<li>symbolic link の場合、ファイルサイズはリンク先のファイル名の長さ (byte) になる。
例えば、リンク先が &ldquo;usr/lib&rdquo; のとき、ファイルサイズは 7 になる。</li>
</ul>
</li>
<li>最近の UNIX システムでは、<code>st_blksize</code> と <code>st_blocks</code> というフィールドも用意されている

<ul>
<li><code>st_blksize</code> はファイル I/O の望ましいブロックサイズ</li>
<li><code>st_blocks</code> は割り当てられた 512-byte ブロックの数</li>
<li>standard I/O library では、効率化のため、1回に <code>st_blksize</code> の分だけ read や write を行う</li>
</ul>
</li>
</ul>


<h2>File Truncation</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">truncate</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ftruncate</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイルの長さを <em>length</em> バイトに切り詰める</li>
<li>truncate 前のファイルサイズが <em>length</em> より大きい場合、<em>length</em> より後ろのデータにはアクセスできなくなる</li>
<li>truncate 前のファイルサイズが <em>length</em> より小さい場合、どうなるかは実装依存だが、
XSI-conforming system の場合、ファイルサイズは大きくなる (hole ができる)</li>
</ul>


<h2>File Systems</h2>

<h3>Hard Links</h3>

<ul>
<li>各 i-node は link count を持っている。これは自身の i-node を参照しているディレクトリの数である。</li>
<li>link count が 0 になったときのみ、このファイルは削除することができる。

<ul>
<li>ディレクトリのエントリを削除する関数が delete でなく unlink なのはそのため。</li>
</ul>
</li>
<li>link count は <code>stat</code> 構造体の中の <code>st_nlink</code> メンバに格納されている。この型は <code>nlink_t</code> 型である。</li>
<li>link count の最大値は <code>LINK_MAX</code> で定義されている。</li>
</ul>


<h3>Symbolic Links</h3>

<ul>
<li>symbolic link の指す data block の中にはこのリンクが参照するファイル名が書かれている。</li>
<li>この i-node には file type に <code>S_IFLNK</code> がセットされている。</li>
</ul>


<h3>Directory</h3>

<ul>
<li>directory entry には ファイル名や i-node 番号などが書かれている。</li>
<li>i-node 番号の型は <code>ino_t</code> 型である。</li>
<li>directory entry に書かれた i-node 番号は同じファイルシステム上のものであり、
別のファイルシステムの i-node を参照することはできない。
<code>ln(1)</code> コマンドをファイルシステムをまたがって叩くことができないのはそのためである。</li>
<li><code>mv(1)</code> は directory entry を変更しているだけで、実際のファイルの中身が変更されているわけではない。</li>
<li>leaf directory (他の directory を含んでいない directory) の link count は常に2となる (<code>.</code> と親ディレクトリからの参照)</li>
<li>leaf directory でない directory の link count は 3 以上となる (<code>.</code>, 子ディレクトリの <code>..</code>, 親ディレクトリからの参照)</li>
</ul>


<h2>link, unlink, remove, and rename Functions</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">link</span><span class="p">(</span><span class="n">cont</span> <span class="kt">char</span> <span class="o">*</span><span class="n">existingpath</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">newpath</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">unlink</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>link()</code> は <em>existingpath</em> を参照する新しい directory entry を <em>newpath</em> に作成する。

<ul>
<li><em>newpath</em> がすでに存在する場合はエラーとなる。</li>
<li>POSIX.1 はファイルシステムをまたいで link することを許しているが、
ほとんどの実装ではそれぞれのパスは同じファイルシステム上になくてはならない。</li>
<li>directory の hard link を作成できる実装の場合、それができるのは superuser に限られる。

<ul>
<li>loop が発生する恐れがあるため。</li>
<li>多くのファイルシステムの実装では directory の hard link を作ることを許可していない。</li>
</ul>
</li>
</ul>
</li>
<li><p><code>unlink()</code> は directory entry を削除し、 link count を減らす。</p>

<ul>
<li>link count が 0 になったときのみ、このファイルの中身を削除することができるが、
ファイルが open されているときはまだ削除できない。

<ul>
<li>ファイルが close されたときに、kernel がそのファイルを open しているプロセス数をチェックする。
それが 0 なら、次に link count をチェックし、それも 0 ならファイルの中身を削除する。</li>
</ul>
</li>
<li><em>pathname</em> が symbolic link の場合、<code>unlink()</code> は参照先ではなく、symbolic link 自体を削除する。</li>
</ul>
</li>
<li><p>superuser は <code>unlink()</code> に directory を指定することもできるが、それよりも <code>rmdir()</code> を使うべきである。</p></li>
<li>file と directory 両方に使える関数に <code>remove()</code> がある。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">remove</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>remove()</code> は対象が file なら <code>unlink()</code> と同じであり、directory なら <code>rmdir()</code> と同じである。</p></li>
<li><p>file や directory は <code>rename()</code> で名前を変えることができる。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">rename</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">oldname</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">newname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>newname</em> が既に存在していた場合、<em>newname</em> は削除され、<em>oldname</em> が <em>newname</em> に rename される。

<ul>
<li>directory の場合、<em>newname</em> は空である必要がある。</li>
</ul>
</li>
<li>symbolic link の場合、参照先ではなく、リンク自身が rename される。</li>
<li><em>oldname</em> と <em>newname</em> が同じ場合、変更されずに、0 が返る。</li>
</ul>


<h2>Symbolic Links</h2>

<ul>
<li>symbolic link は i-node を直接参照する hard link とは違い、間接的にファイルを参照する。</li>
<li>symbolic link はファイルシステムをまたぐことに関する制限はない。</li>
<li>directory を指す symbolic link を作る際にも root 権限は必要ない。</li>
<li>ファイル名でファイルを参照する関数には、symbolic link をたどり参照先のファイルを見るものと、
たどらずに、symbolic link 自体を見るものがある。

<ul>
<li><code>chown()</code> がどちらになるかは実装による</li>
<li><code>open()</code> は symbolic link をたどるが、<code>O_CREAT</code> と <code>O_EXCL</code> の両方が付いている場合は例外で、
その時に symbolic link を開こうとすると、エラーとなり、 <code>errno</code> に <code>EEXIST</code> がセットされる。
これは権限のあるプロセスが誤ってファイルに書き込みをしないようにするためである。</li>
</ul>
</li>
</ul>


<h2>symlink and readlink Functions</h2>

<ul>
<li>symbolic link を作成するには <code>symlink()</code> を使う</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">symlink</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">actualpath</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sympath</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>open()</code> は symbolic link をたどってしまうため、symbolic link 自身を open したい場合は <code>readlink()</code> を使う</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">readlink</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">pathname</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">bufsize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">number</span> <span class="n">of</span> <span class="n">bytes</span> <span class="n">read</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>この関数1つで open, read, close を行なっている。</li>
</ul>


<h2>File Times</h2>

<p>各ファイルでは3種類の時刻が管理されている
- <code>st_atime</code>: 最後にファイルにアクセスされた時刻。<code>read()</code> など。<code>ls -u</code> でソート
- <code>st_mtime</code>: 最後にファイルの中身が変更された時刻。<code>write()</code> など。<code>ls -t</code> でソート
- <code>st_ctime</code>: 最後に i-node のステータスが変更された時刻。<code>chmod(), chown()</code> など。<code>ls -c</code> でソート</p>

<h2>utime Function</h2>

<p>ファイルの access time や modification time を変更するには <code>utime()</code> を使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;utime.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">utime</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">utimbuf</span> <span class="o">*</span><span class="n">times</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>utimbuf</code> 構造体は以下のようになっている</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">utimbuf</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">time_t</span> <span class="n">actime</span><span class="p">;</span>  <span class="cm">/* access time */</span>
</span><span class='line'>    <span class="kt">time_t</span> <span class="n">modtime</span><span class="p">;</span> <span class="cm">/* modification time*/</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><em>times</em> が null の場合、access time と modification time は現在の時刻に更新される。</li>
<li>chenged-status time を変更する関数は無い。<code>utime()</code> が実行されると自動的に更新される。</li>
</ul>


<h2>mkdir and rmdir Functions</h2>

<ul>
<li><code>mkdir()</code> で空の directory を作成できる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">mkdir</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="n">mode_t</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>.</code> と <code>..</code> は自動的に作られる。</li>
<li><em>mode</em> にはプロセスの mask による変更が加えられる。</li>
<li><p>directory の場合、execute bit を付けないと directory 内のファイルにアクセスできなくなるので注意</p></li>
<li><p>空の directory を削除するには <code>rmdir()</code> を使う</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">rmdir</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>link count が 0 でも、その directory を open しているプロセスがあれば、close されるまで領域は解放されない。
解放はされないが、その directory 内に新しくファイルを置くことはできなくなる。</li>
</ul>


<h2>Reading Directories</h2>

<p>directory を読むには、以下のような関数を使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;dirent.h&gt;</span>
</span><span class='line'><span class="kt">DIR</span> <span class="o">*</span><span class="n">opendir</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">);</span>    <span class="k">return</span> <span class="n">pointer</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="nb">NULL</span> <span class="n">on</span> <span class="n">error</span>
</span><span class='line'><span class="k">struct</span> <span class="n">dirent</span> <span class="o">*</span><span class="n">readdir</span><span class="p">(</span><span class="kt">DIR</span> <span class="o">*</span><span class="n">dp</span><span class="p">);</span>       <span class="k">return</span> <span class="n">pointer</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="nb">NULL</span> <span class="n">at</span> <span class="n">end</span> <span class="n">of</span> <span class="n">directory</span> <span class="n">or</span> <span class="n">error</span>
</span><span class='line'><span class="kt">void</span> <span class="n">rewinddir</span><span class="p">(</span><span class="kt">DIR</span> <span class="o">*</span><span class="n">dp</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">closedir</span><span class="p">(</span><span class="kt">DIR</span> <span class="o">*</span><span class="n">dp</span><span class="p">);</span>                 <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span><span class='line'><span class="kt">long</span> <span class="n">telldir</span><span class="p">(</span><span class="kt">DIR</span> <span class="o">*</span><span class="n">dp</span><span class="p">);</span>                 <span class="k">return</span> <span class="n">current</span> <span class="n">location</span> <span class="n">in</span> <span class="n">directory</span> <span class="n">associated</span> <span class="n">with</span> <span class="n">dp</span>
</span><span class='line'><span class="kt">void</span> <span class="n">seekdir</span><span class="p">(</span><span class="kt">DIR</span> <span class="o">*</span><span class="n">dp</span><span class="p">,</span> <span class="kt">long</span> <span class="n">loc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>dirent</code> 構造体 の定義は実装依存だが、少なくとも以下の2つは含まれている</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">dirent</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ino_t</span> <span class="n">d_ino</span><span class="p">;</span>                    <span class="cm">/* i-node number */</span>
</span><span class='line'>    <span class="kt">char</span>  <span class="n">d_name</span><span class="p">[</span><span class="n">NAME_MAX</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>     <span class="cm">/* null-terminated filename */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>DIR</code> は <code>FILE</code> 構造体のようなもので、directory が read されるのを管理するための構造体</li>
<li>directory entries の順番は実装依存だが、たいていアルファベット順にはなっていない</li>
<li><code>rewinddir()</code> は DIR のポインタを先頭に戻す</li>
</ul>


<h2>chdir, fchdir, and getcwd Functions</h2>

<ul>
<li>すべてのプロセスは current working directory を持っている。

<ul>
<li>user がログインすると、current working directory が <code>/etc/passwd</code> の第6フィールドにセットされた home directory に設定される。</li>
</ul>
</li>
<li><p>current working directory はプロセスの attribute である。</p></li>
<li><p><code>chdir()</code> や <code>fchdir()</code> を使うと、それを呼んだプロセスの current working directory が変更できる</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">chdir</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fchdir</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>kernel は current working directory の full path を管理しているわけではない</li>
<li>full path を取得するのは、v-node を辿っていけばいいが、そのような関数は既にあり、<code>getcwd()</code> で full path が取得できる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">getcwd</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">buf</span> <span class="k">if</span> <span class="n">OK</span><span class="p">,</span> <span class="nb">NULL</span> <span class="n">on</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Device Special Files</h2>

<p><code>stat</code> 構造体には <code>st_dev</code> と <code>st_rdev</code> の2つのフィールドがある。</p>

<ul>
<li>すべてのファイルシステムには major と minor 2種類のデバイス番号が付けられている。

<ul>
<li>型は <code>dev_t</code> 型</li>
<li>major number はデバイスドライバを識別する番号</li>
<li>minor number はサブデバイスを識別する番号</li>
<li>同じディスクドライブにあるファイルシステムはたいてい同じ major number を持つが、異なる minor number を持つ</li>
</ul>
</li>
<li>major, minor number はそれぞれ <code>major()</code>, <code>minor()</code> マクロで取得できる</li>
<li><code>st_dev</code> はそのファイル名や i-node が格納されているデバイス番号</li>
<li>character special files と block special files の場合のみ <code>st_rdev</code> に値が入っている。
これは実際のデバイスのデバイス番号である。

<ul>
<li><code>/dev/tty0</code> や <code>/dev/hda3</code> などの <code>st_dev</code> のデバイス番号は 0/7 などの <code>devfs</code> 仮想ファイルシステムになっている。
実際のデバイス番号は <code>st_rdev</code> に書かれた 4/0 などである。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables を無効にする]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/10/14/disable-iptables/"/>
    <updated>2012-10-14T00:37:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/10/14/disable-iptables</id>
    <content type="html"><![CDATA[<p>CentOS で iptables を無効化する方法</p>

<!--more-->


<p>VM に Cent OS 入れたのだが、外からアクセスできない。
どうもインストール時には iptables が動いてて、外からのアクセスを拒否してるらしい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo /etc/rc.d/init.d/iptables stop</span></code></pre></td></tr></table></div></figure>


<p>で iptables を無効にできる。</p>

<p>参考: <a href="http://www.server-world.info/query?os=CentOS_6&amp;p=initial_conf&amp;f=2">http://www.server-world.info/query?os=CentOS_6&amp;p=initial_conf&amp;f=2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming in Lua Chapter 2]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/08/11/lua-chapter-2/"/>
    <updated>2012-08-11T20:50:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/08/11/lua-chapter-2</id>
    <content type="html"><![CDATA[<h1>Types and Values</h1>

<!--more-->


<ul>
<li>Lua は動的型付け言語</li>
<li>Lua の基本型は以下の8つ:<br/>
<em>nil, boolean, number, string, userdata, function, thread, table</em></li>
<li>型を調べるには <code>type</code> 関数を使う</li>
</ul>


<h2>Nil</h2>

<ul>
<li>値でないことを表す</li>
<li>グローバル変数の初期値は <em>nil</em></li>
<li>変数を削除するには <em>nil</em> を代入する</li>
</ul>


<h2>Boolean</h2>

<ul>
<li><em>false</em> と <em>true</em> の2つ</li>
<li>Lua では、<em>false</em> と <em>nil</em> のみが false, 他は true</li>
</ul>


<h2>Numbers</h2>

<ul>
<li>C でいう double 型</li>
<li>Lua には integer 型は無い</li>
<li>32-bit の整数までなら丸め誤差無しで表現できる</li>
</ul>


<h2>Strings</h2>

<ul>
<li>Lua では string は immutable</li>
<li>メモリ管理は自動でやってくれる</li>
<li>ダブルクォートとシングルクォートどちらも使える</li>
<li>大カッコ2つで改行を含む文字列が扱える</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">block</span> <span class="o">=</span> <span class="s">[[</span>
</span><span class='line'><span class="s">This is the</span>
</span><span class='line'><span class="s">block string.</span>
</span><span class='line'><span class="s">]]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>カッコの間に <code>=</code> を挟むと、同じ数の <code>=</code> が挟まれたカッコのところまで文字列になる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">block</span> <span class="o">=</span> <span class="s">[===[</span>
</span><span class='line'><span class="s">This is the </span>
</span><span class='line'><span class="s">block string.</span>
</span><span class='line'><span class="s">a[b[i]]</span>
</span><span class='line'><span class="s">]===]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>コメントでも使える</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="cm">--[=[</span>
</span><span class='line'><span class="cm">This is</span>
</span><span class='line'><span class="cm">the comment.</span>
</span><span class='line'><span class="cm">a[b[i]]</span>
</span><span class='line'><span class="cm">]=]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>numbers と strings の変換は自動的にやってくれるが、数字と文字列の比較は false になる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">(</span><span class="mi">10</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">10&quot;</span><span class="p">)</span>  <span class="c1">--&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>明示的に数値や文字列にしたい場合は <code>tonumber</code> や <code>tostring</code> 関数を使う</li>
<li><code>..</code> は文字列の連結</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">(</span><span class="mi">10</span> <span class="o">..</span> <span class="mi">20</span><span class="p">)</span>  <span class="c1">--&gt; 1020</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Lua 5.1 からは、&#8217;#&lsquo; オペレータで文字列の長さが取れる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">hello&quot;</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="o">#</span><span class="n">a</span><span class="p">)</span>  <span class="c1">--&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tables</h2>

<ul>
<li>配列や連想配列を含む</li>
<li>モジュールやパッケージやオブジェクトも table で表現する</li>
<li>table は <code>{}</code> で初期化する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>table は参照（あるいはポインタ）として扱われる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="n">b</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">])</span>  <span class="c1">--&gt; 20</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="kc">nil</span>  <span class="c1">-- b はまだ table を参照している</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>グローバル変数と同様、定義されていないフィールドには <em>nil</em> が入っている</li>
<li><code>a.name</code> は <code>a["name"]</code> のこと。<code>a[name]</code> ではないので注意</li>
<li>Lua では配列のインデックスは 1 からスタート (0 ではない)</li>
<li>Lua 5.1 以降では、&#8217;#&lsquo; オペレータで数字インデックスで最後に <em>nil</em> が入っていないものを返す</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">10000</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">-- 1 から 9999 番目に nil が入る (hole)</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="o">#</span><span class="n">a</span><span class="p">)</span>  <span class="c1">--&gt; 0</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="o">#</span><span class="n">a</span><span class="p">)</span>  <span class="c1">--&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>hole を含めて最後のインデックスを返したいときは <code>table.maxn</code> 関数を使う</li>
</ul>


<h2>Functions, Userdata, and Threads</h2>

<ul>
<li>Lua では関数も値として扱える。つまり変数に関数を入れられる。</li>
<li>userdata は C で書かれた新しい型を表現するのに使う</li>
<li>thread は coroutine を扱うのに使う</li>
<li>functions, userdata, threads は今後の章で詳しく扱う</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming in Lua Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/07/24/lua-chapter-1/"/>
    <updated>2012-07-24T01:05:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/07/24/lua-chapter-1</id>
    <content type="html"><![CDATA[<h1>Getting Started</h1>

<!--more-->


<p>Lua はスクリプト言語の一つで、非常にシンプルなことが特徴です。<br/>
組み込み系で使われることが多く、C 言語と簡単に連携することができます。<br/>
また、nmap の拡張スクリプト(NSE, Nmap Script Engine) も Lua で記述されています。</p>

<h2>Chunks</h2>

<ul>
<li>Lua を実行する1行の命令を <em>chunk</em> と呼ぶ</li>
<li>行末のセミコロンはオプション</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>  <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="mi">2</span>  <span class="c1">-- これでも OK</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Interactive Mode</h2>

<ul>
<li>引数を与えずに lua を実行するとインタラクティブモードで起動する

<ul>
<li>終了するときは <code>EOF</code> を送る (<code>ctrl-D</code>) か、<code>exit</code> 関数を呼ぶ:</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="o">&gt;</span> <span class="nb">os.exit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-i</code> オプションでファイルに書いてある chunk を実行してからインタラクティブモードを起動する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lua -i prog
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>dofile</code> 関数を使ってもできる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="o">&gt;</span> <span class="nb">dofile</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">lib1.lua&quot;</span><span class="p">)</span>  <span class="c1">-- load your library</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Some Lexical Conventions</h2>

<ul>
<li>アンダースコアで始まり、大文字の変数名 (<code>_VERSION</code> など) は Lua 側で定義されているものが多いため、自分で定義するのは避けたほうがいい</li>
<li>Lua の予約語は非常に少ない</li>
<li><p>大文字と小文字は区別される。<code>and</code> は予約語だが、<code>And</code> や <code>AND</code> は使える</p></li>
<li><p>ハイフン2つ (<code>--</code>) でコメント</p></li>
<li><code>--[[</code> と <code>--]]</code> で挟むとブロックコメント</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="cm">--[[</span>
</span><span class='line'><span class="cm">print(10)  -- 実行されない</span>
</span><span class='line'><span class="cm">--]]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ハイフンを1つ付け足すだけでコメントを解除できる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">---[[</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  <span class="c1">--&gt; 10</span>
</span><span class='line'><span class="c1">--]]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Global Variables</h2>

<ul>
<li>グローバル変数を使うのに宣言する必要はない</li>
<li>グローバル変数は初期化しないと勝手に <code>nil</code> が入る</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>  <span class="c1">--&gt; nil</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>  <span class="c1">--&gt; 10</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>変数を消すには <code>nil</code> を代入する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="kc">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lua では変数が存在するかどうかは、<code>nil</code> かどうかを調べることと同じになる</p>

<h2>The Stand-Alone Interpreter</h2>

<p>Lua 起動時に
- <code>-e</code> オプションでコードを直接コマンドラインから動かせる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lua -e <span class="s2">&quot;print(math.sin(12))&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-l</code> オプションでライブラリを読み込む</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># a というライブラリを読み込み、x=10 を実行し、インタラクティブモードに入る</span>
</span><span class='line'><span class="nv">$ </span>lua -i -l a -e <span class="s2">&quot;x = 10&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>プロンプトは <code>_PROMPT</code> に定義されているのでそれを変えればプロンプトが変えられる</li>
<li>インタラクティブモードでは、<code>=</code> を頭につけると結果を表示してくれる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="o">&gt;</span> <span class="o">=</span> <span class="nb">math.sin</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="c1">--&gt; math.sin(3) の値を表示</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">=</span> <span class="n">a</span>             <span class="c1">--&gt; a の中身を表示</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>コマンドライン引数は <code>arg</code> というテーブルに格納される

<ul>
<li>スクリプト名は <code>arg[0]</code> に入る</li>
<li>スクリプト名より先に引数を書くと、それらは負のインデックスに格納される</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lua -e <span class="s2">&quot;sin=math.sin&quot;</span> script a b
</span></code></pre></td></tr></table></div></figure>


<p>とすると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">arg</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">lua&quot;</span>
</span><span class='line'><span class="n">arg</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">-e&quot;</span>
</span><span class='line'><span class="n">arg</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">sin=math.sin&quot;</span>
</span><span class='line'><span class="n">arg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">script&quot;</span>
</span><span class='line'><span class="n">arg</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">a&quot;</span>
</span><span class='line'><span class="n">arg</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">b&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>になる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 3]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/07/02/unp-chapter-3/"/>
    <updated>2012-07-02T22:04:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/07/02/unp-chapter-3</id>
    <content type="html"><![CDATA[<h1>Sockets Introduction</h1>

<!--more-->


<h2>Socket Address Structures</h2>

<p>ほとんどのソケット関数は引数にソケットアドレス構造体のポインタを必要とする。</p>

<h3>IPv4 Socket Address Structure</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">in_addr</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">in_addr_t</span>       <span class="n">s_addr</span><span class="p">;</span>         <span class="cm">/* 32-bit IPv4 address */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span>         <span class="n">sin_len</span><span class="p">;</span>        <span class="cm">/* length of structure (16) */</span>
</span><span class='line'>    <span class="n">sa_family_t</span>     <span class="n">sin_family</span><span class="p">;</span>     <span class="cm">/* AF_INET */</span>
</span><span class='line'>    <span class="n">in_port_t</span>       <span class="n">sin_port</span><span class="p">;</span>       <span class="cm">/* 16-bit TCP or UDP port number */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">in_addr</span>  <span class="n">sin_addr</span><span class="p">;</span>       <span class="cm">/* 32-bit IPv4 address */</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">sin_zero</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>    <span class="cm">/* unused */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>sin_zero</code> はソケットアドレス構造体のサイズを少なくとも 16 bytes にするため</li>
<li>IP アドレスとポート番号は常にネットワークバイトオーダー</li>
<li><code>sin_addr</code> が構造体になっているのは歴史的な理由から。昔は union でクラス A, B, C のアドレスを処理していたらしい。</li>
</ul>


<h3>Generic Socket Address Structure</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sockaddr</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span>     <span class="n">sa_len</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sa_family_t</span> <span class="n">sa_family</span><span class="p">;</span>      <span class="cm">/* address family: AF_xxx value */</span>
</span><span class='line'>    <span class="kt">char</span>        <span class="n">sa_data</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span>    <span class="cm">/* protocol-specific address */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ソケット関数に渡すときは、<code>sockaddr</code> にキャストして渡す</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">serv</span><span class="p">;</span>  <span class="cm">/* IPv4 */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* fill in serv{} */</span>
</span><span class='line'>
</span><span class='line'><span class="n">bind</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">serv</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">serv</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>IPv6 Socket Address Structure</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">in6_addr</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span>         <span class="n">s6_addr</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>        <span class="cm">/* 128-bit IPv6 address */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># define SIN6_LEN  </span><span class="cm">/* required for compile-time tests */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span>         <span class="n">sin6_len</span><span class="p">;</span>           <span class="cm">/* length of this struct (28) */</span>
</span><span class='line'>    <span class="n">sa_family_t</span>     <span class="n">sin6_family</span><span class="p">;</span>        <span class="cm">/* AF_INET6 */</span>
</span><span class='line'>    <span class="n">in_port_t</span>       <span class="n">sin6_port</span><span class="p">;</span>          <span class="cm">/* transport layer port# */</span>
</span><span class='line'>    <span class="kt">uint32_t</span>        <span class="n">sin6_flowinfo</span><span class="p">;</span>      <span class="cm">/* flow information, undefined */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">in6_addr</span> <span class="n">sin6_addr</span><span class="p">;</span>          <span class="cm">/* IPv6 address */</span>
</span><span class='line'>    <span class="kt">uint32_t</span>        <span class="n">sin6_scope_id</span><span class="p">;</span>      <span class="cm">/* set of interfaces for a scope */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>システムがソケットアドレス構造体の長さをサポートする場合、<code>SIN6_LEN</code> を定義しなくてはならない</li>
<li>アドレスとポート番号はネットワークバイトオーダー</li>
</ul>


<h3>New Generic Socket Address Structure</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sockaddr_storage</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">uint8_t</span>     <span class="n">ss_len</span><span class="p">;</span>     <span class="cm">/* length of this struct (implementation dependent) */</span>
</span><span class='line'>    <span class="n">sa_family_t</span> <span class="n">ss_family</span><span class="p">;</span>  <span class="cm">/* address family: AF_xxx value */</span>
</span><span class='line'>    <span class="cm">/* implementation-dependent elements to provide */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>IPv6 をサポートするためにできた generic socket</li>
<li>システムがサポートするソケットアドレス構造体をカバーできるよう十分大きいサイズが取られる</li>
</ul>


<h2>Value-Result Arguments</h2>

<p>ソケット関数では引数にソケットアドレス構造体とそのサイズを渡すが、
<code>accept</code>, <code>recvfrom</code>, <code>getsockname</code>, <code>getpeername</code> などのプロセスがカーネルから
ソケットアドレス構造体を受け取る関数では、引数に入れたサイズが関数実行後に変わることがある
(<code>sockaddr_un</code> など)。</p>

<h2>Byte Ordering Functions</h2>

<ul>
<li>バイトをデータに格納する順序には2種類ある

<ul>
<li>リトルエンディアン: 下位バイトが先のアドレスにくる</li>
<li>ビッグエンディアン: 上位バイトが先のアドレスにくる</li>
</ul>
</li>
<li>システムによってバイトオーダーが異なるので、ネットワークで扱うバイトオーダーを決める必要がある

<ul>
<li>ネットワークバイトオーダーはビッグエンディアン</li>
</ul>
</li>
<li>ホストバイトオーダーとネットワークバイトオーダーを変換する関数が用意されている</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="kt">uint16_t</span> <span class="n">htons</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">host16bitvalue</span><span class="p">);</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">htonl</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">host32bitvalue</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">uint16_t</span> <span class="n">ntohs</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">net16bitvalue</span><span class="p">);</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">ntohl</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">net32bitvalue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Byte Manipulation Functions</h2>

<ul>
<li>バイト列を操作する関数は2つのグループに分かれる

<ul>
<li><code>b</code> で始まる関数 (4.2BSD)</li>
<li><code>mem</code> で始まる関数 (ANSI C)</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;strings.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">bzero</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">bcopy</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">bcmp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr2</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">memset</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">memcpy</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">memcmp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr2</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>bzero</code> は 0 にセットするが、<code>memset</code> は特定の値にセットできる</li>
<li><code>bcopy</code> と <code>memcpy</code> ではコピー元とコピー先のアドレスを引数に入れる順序が逆</li>
<li><code>bcopy</code> は領域が重なっていても動作するが、<code>memcpy</code> はダメ

<ul>
<li>重なっている場合は <code>memmove</code> を使う</li>
<li><code>bcopy</code> は廃止予定</li>
</ul>
</li>
<li><code>bcmp</code> も <code>memcmp</code> も2つのバイト列が異なっていれば nonzero を返すが、
<code>memcmp</code> の場合、最初に異なったバイトが <em>ptr1</em> > <em>ptr2</em> のとき正、
<em>ptr1</em> &lt; <em>ptr2</em> のとき負の値が返る</li>
</ul>


<h2><code>inet_pton</code> and <code>inet_ntop</code> Functions</h2>

<ul>
<li>IP アドレスの文字列表記と数値の変換を行うには <code>inet_pton</code> と <code>inet_ntop</code> を使う。</li>
<li><code>inet_aton</code>, <code>inet_addr</code>, <code>inet_ntoa</code> は IPv4 のみでしか使えない

<ul>
<li>さらに、<code>inet_addr</code> は戻り値がアドレスを表す数値 (32-bit, ネットワークバイトオーダー) だが、
エラー時に返す値 <code>INADDR_NONE</code> が 2<sup>32</sup> - 1 のため、255.255.255.255 が変換できない</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">inet_pton</span><span class="p">(</span><span class="kt">int</span> <span class="n">family</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">strptr</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">addrptr</span><span class="p">);</span>  <span class="c1">// 文字列から数値</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">inet_ntop</span><span class="p">(</span><span class="kt">int</span> <span class="n">family</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">addrptr</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">strptr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">);</span>  <span class="c1">// 数値から文字列</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>数値はネットワークバイトオーダー</li>
<li><em>family</em> には <code>AF_INET</code> または <code>AF_INET6</code> を入れる</li>
<li><em>len</em> には変換後の文字列を入れるバッファ <em>strptr</em> の長さを入れる。
<code>&lt;netinet/in.h&gt;</code> に <code>INET_ADDRSTRLEN</code> と <code>INET6_ADDRSTRLEN</code> が定義されている。</li>
<li><em>strptr</em> に null は入れられない。メモリを確保してそのサイズを指定する必要がある。</li>
<li><code>inet_pton()</code> に成功すると 1, 失敗すると 0 が返ってくる</li>
<li><code>inet_ntop()</code> に成功すると、戻り値として <em>strptr</em> が返る</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX Environment Chapter 3]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/06/30/apue-chapter-3/"/>
    <updated>2012-06-30T13:49:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/06/30/apue-chapter-3</id>
    <content type="html"><![CDATA[<h1>File I/O</h1>

<!--more-->


<h2>File Descriptors</h2>

<ul>
<li>標準入出力は <code>&lt;unistd.h&gt;</code> に定義されている

<ul>
<li><code>STDIN_FILENO</code>: 0</li>
<li><code>STDOUT_FILENO</code>: 1</li>
<li><code>STDERR_FILENO</code>: 2</li>
<li>0, 1, 2 に割り当てられているのは慣習であり、UNIX の取り決めではない</li>
</ul>
</li>
<li>File descriptor の範囲は 0 から <code>OPEN_MAX</code> まで

<ul>
<li>昔は 19 までだったが最近は 63 まであるシステムが多い</li>
</ul>
</li>
</ul>


<h2>open Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oflag</span><span class="p">,</span> <span class="p">...</span> <span class="cm">/* mode_t mode */</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイルを開いたり作成したりする</li>
<li>第二引数 (<em>oflag</em>) に入れるオプションは <code>&lt;fcntl.h&gt;</code> に定義されている

<ul>
<li><code>O_RDONLY</code>, <code>O_WRONLY</code>, <code>O_RDWR</code> のいずれかは必須</li>
</ul>
</li>
<li>open される file descriptor は使われていないもののうち最小のものになる

<ul>
<li>なので、標準出力(1) を close して open すると 1番に割り当てられたりする</li>
</ul>
</li>
<li>ファイル名が長すぎた (<code>NAME_MAX</code>以上) ときどうするかは OS 依存

<ul>
<li>System V 系だと勝手にはみ出た分を切り捨てる</li>
<li>BSD 系だとエラー (<code>ENAMETOOLONG</code>) を出す</li>
<li>POSIX.1 なら <code>_POSIX_NO_TRUNC</code> を定義すればエラーを出すようにできる</li>
</ul>
</li>
</ul>


<h2>creat Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">creat</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="n">mode_t</span> <span class="n">mode</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>open(pathname, O_WRONLY | O_CREAT | O_TRUNC, mode);</code> と同じ</li>
</ul>


<h2>close Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">close</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>プロセスが終了するときにはカーネルによって自動的に close される</li>
</ul>


<h2>lseek Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">off_t</span> <span class="n">lseek</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">offset</span><span class="p">,</span> <span class="kt">int</span> <span class="n">whence</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>オフセットの位置を指定する</li>
<li>open されたファイルは現在のファイルの始めからのオフセットを非負整数で持っている</li>
<li>デフォルトでは open されたときオフセットは 0 に設定される (<code>O_APPEND</code> を設定している場合を除く)</li>
<li><em>offset</em> の値の適用の仕方は <em>whence</em> の値による

<ul>
<li><code>SEEK_SET</code>: ファイルの始めから <em>offset</em> 進めたところ</li>
<li><code>SEEK_CUR</code>: 現在のオフセットから <em>offset</em> 進めたところ</li>
<li><code>SEEK_END</code>: ファイルの終わり（正確には現在のファイルサイズ）から <em>offset</em> 進めたところ</li>
</ul>
</li>
<li><code>lseek</code> は新しいファイルオフセットを返すので、これを利用して現在のオフセットを取得することができる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">off_t</span> <span class="n">currpos</span> <span class="o">=</span> <span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_CUR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ファイルオフセットをファイルサイズより大きくして write すると、その間は 0 で埋められるが、ディスクブロックは割り当てられない</li>
</ul>


<h2>od command</h2>

<ul>
<li>ファイルコンテンツを見る</li>
<li><code>-c</code> オプションをつけるとコンテンツを文字として表示する</li>
</ul>


<h2>read Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">read</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>戻り値は実際に読み込んだバイト数

<ul>
<li>EOF のときは 0</li>
</ul>
</li>
</ul>


<h2>write Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ディスクがいっぱいで書き込めなくなったときはエラー (-1) を返す</li>
</ul>


<h2>File Sharing</h2>

<ul>
<li>カーネルは open されたファイルを3種類のデータ構造で管理している

<ul>
<li>process table

<ul>
<li>各プロセスが持つ</li>
<li>open された file descriptor のテーブル</li>
<li>各 descriptor は file table へのポインタを持つ</li>
</ul>
</li>
<li>file table

<ul>
<li>ファイルステータス (read, write, append, sync など)、現在のファイルオフセットを持つ</li>
<li>v-node table へのポインタを持つ</li>
</ul>
</li>
<li>v-node table

<ul>
<li>ファイルタイプ、i-node 情報を持つ</li>
<li>i-node はファイルのオーナー、サイズ、実データの格納場所へのポインタなどを持っている</li>
</ul>
</li>
</ul>
</li>
<li>Linux には v-node は無いが、その代わりに generic i-node が使われる</li>
<li>2つのプロセスが同じファイルを open すると、file table は2つできるが、それらが同じ v-node table を指す</li>
</ul>


<h2>Atomic Operations</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">pread</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">offset</span><span class="p">);</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">pwrite</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">offset</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>lseek</code> と <code>read</code> または <code>write</code> を atomic に行なってくれる</p>

<h2>dup and dup2 Functions</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">dup</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">dup2</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">int</span> <span class="n">filedes2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>file descriptor を複製する

<ul>
<li>dup では複製されたディスクリプタは使用可能なディスクリプタのうち最小のものとなる</li>
<li>dup2 では複製されたディスクリプタの番号を <em>filedes2</em> で指定する</li>
</ul>
</li>
<li>元のディスクリプタと複製されたディスクリプタは同じ file table を指す

<ul>
<li>なので、ファイルステータスやファイルオフセットなどが共有される</li>
</ul>
</li>
</ul>


<h2>sync, fsync, and fdatasync Functions</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fsync</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fdatasync</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">sync</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UNIX の実装では、write されたデータはカーネルによって一旦バッファにコピーされ、少し後にディスクに書き込まれる</li>
<li><code>sync</code> を呼ぶと、すべての変更されたブロックを書き込む

<ul>
<li>通常デーモンによって30秒に1回 <code>sync</code> が呼ばれている</li>
<li>ディスクの書き込みが終わるのを待たずに return する</li>
</ul>
</li>
<li><code>fsync</code> は特定のファイルディスクリプタに対して行う

<ul>
<li>ディスクへの書き込みが終わるのを待つ</li>
</ul>
</li>
<li><code>fdatasync</code> はデータの更新のみを行う

<ul>
<li><code>fsync</code> はファイル属性の更新も行う</li>
</ul>
</li>
</ul>


<h2>fcntl Function</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fcntl</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmd</span><span class="p">,</span> <span class="p">...</span> <span class="cm">/* int arg */</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>open されたファイルのプロパティを変更する</li>
<li>以下のようなことができる (<em>cmd</em> で指定)

<ul>
<li>descriptor の複製</li>
<li>descriptor flag の取得・設定</li>
<li>file status flag の取得・設定</li>
<li>オーナーシップ (process ID, group ID) の取得・設定</li>
<li>record lock の取得・設定（詳しくは14章）</li>
</ul>
</li>
</ul>


<h2>/dev/fd</h2>

<ul>
<li><code>/dev/fd</code> に 0, 1, 2 と呼ばれるファイルがあり、それぞれ file descriptor 0, 1, 2 に対応している</li>
<li><code>/dev/fd/n</code> を open する際、<em>mode</em> の値は無視される。 <code>/dev/fd/0</code> は read only であり、</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dev/fd/0&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>としても fd に書き込むことはできない
- shell で使われることが多い</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>filter file2 | cat file1 - file3 | lpr
</span></code></pre></td></tr></table></div></figure>


<p>は file1, filter file2, file3 を cat しているが (<code>-</code> は標準入力)、
<code>-</code> は場合によって標準入力だったり出力だったりわかりにくいので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>filter file2 | cat file1 /dev/fd/0 file3 | lpr
</span></code></pre></td></tr></table></div></figure>


<p>として明確に書くことができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 2]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/05/07/unp-chapter-2/"/>
    <updated>2012-05-07T23:41:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/05/07/unp-chapter-2</id>
    <content type="html"><![CDATA[<h1>The Transport Layer: TCP, UDP, and SCTP</h1>

<!--more-->


<h2>User Datagram Protocol (UDP)</h2>

<ul>
<li>シンプルなプロトコル

<ol>
<li> アプリケーションがメッセージを UDP socket に書く</li>
<li> UDP socket は UDP datagram にカプセル化される</li>
<li> UDP datagram は IP datagram にカプセル化される</li>
<li> IP datagram が目的地に送信される</li>
</ol>
</li>
<li>UDP datagram が目的地に届けられる補償は無い</li>
<li>UDP datagram は長さを持つ

<ul>
<li>datagram の長さの情報はデータと一緒に受信者に届けられる</li>
</ul>
</li>
<li>UDP は <em>connectionless</em> service とも言われる

<ul>
<li>client - server 間に長期間の依存を持たないため</li>
<li>例えば UDP client が socket を作って datagram を server に送り、その後すぐに別の datagram を別の servevr に同じ socket で送ることが可能</li>
</ul>
</li>
</ul>


<h2>Transmission Control Protocol (TCP)</h2>

<ul>
<li>クライアント・サーバ間でコネクションを張る</li>
<li>信頼性 <em>(reliability)</em> がある

<ul>
<li>TCP がデータを送信すると、応答 (acknowledgment) が来るのを待つ</li>
<li>応答が来ない場合、TCP は自動的にデータを再送信し、さらに待つ</li>
<li>しばらく繰り返しても来ない場合は諦める</li>
</ul>
</li>
<li>RTT <em>(round trip time)</em> を推測するアルゴリズムを含んでいる

<ul>
<li>応答にどれだけ時間がかかりそうかを推測する</li>
</ul>
</li>
<li>TCP が送信するデータには各 byte に連番 <em>(sequence numbers)</em> が振られている

<ul>
<li>到着したセグメント（TCP が IP に渡すデータの単位）が壊れていた場合、セグメントを再要求する</li>
<li>データが重複していた場合、番号を見て重複しているデータを削除する</li>
</ul>
</li>
<li><em>flow control</em> を提供する

<ul>
<li>peer に対して何バイトのサイズのデータを受け入れられるか <em>(advertised window)</em> 伝える</li>
<li>送信者が受信バッファを超えるデータを送ることを防ぐ</li>
<li>送信者からデータを受信すると window サイズは小さくなり、受信アプリケーションがバッファからデータを読むと window サイズは大きくなる</li>
</ul>
</li>
<li>TCP コネクションは <em>full-duplex</em> である

<ul>
<li>アプリケーションはいつでもデータの送信と受信ができる</li>
<li>sequence number や window size の状態の経過を追い続ける</li>
</ul>
</li>
</ul>


<h2>Stream Control Transmission Protocol (SCTP)</h2>

<ul>
<li>クライアント・サーバ間の接続は connection ではなく、 <em>association</em> と呼ばれる

<ul>
<li>2システム間の通信が2つ以上のアドレスを使用することができる</li>
</ul>
</li>
<li><em>message-oriented</em> である

<ul>
<li>TCP は byte 指向</li>
</ul>
</li>
<li>接続間で複数のストリーム (multiple stream) を提供する

<ul>
<li>ストリームの1つに含まれる message が失われても、他のストリームの message の配信に影響しない</li>
</ul>
</li>
<li>マルチホーミング (multihoming) を提供する

<ul>
<li>1つの SCTP エンドポイントが複数の IP アドレスをサポートする</li>
<li>ネットワークの不安定さに対するロバスト性を向上させる</li>
</ul>
</li>
</ul>


<h2>Three-Way Handshake</h2>

<p>TCP connection を張るときには以下のような処理が行われる：</p>

<ol>
<li>サーバは <code>socket</code>, <code>bind</code>, <code>listen</code> を呼び、接続を受け入れる準備をする <em>(passive open)</em></li>
<li>クライアントは <code>connect</code> を呼び <em>active open</em> を発行する。
クライアント TCP は SYN (synchronize) segment を送信して、サーバにクライアントが送る予定のデータサイズを教える。</li>
<li>サーバはクライアントの SYN を受け入れ、ACK (acknowledge) と自分の SYN を送る。
SYN にはサーバが送る予定のデータサイズが含まれている。
サーバの SYN とクライアントの SYN に対する ACK は1つのセグメントで送られる。</li>
<li>クライアントはサーバの SYN を受け入れる (ACK)</li>
</ol>


<h2>TCP Connection Termination</h2>

<p>接続を切るときは以下のような処理で行われる：</p>

<ol>
<li>片方のアプリケーションが <code>close</code> を呼び <em>(active close)</em>、TCP は FIN segment を送る。</li>
<li>もう片方の TCP が FIN を受け入れる <em>(passive close)</em>。FIN は end-of-file としてアプリケーションに通知される。</li>
<li>しばらくして、end-of-file を受信したアプリケーションはソケットを <code>close</code> し、FIN を送る。</li>
<li>active close を行った側の TCP が FIN を受け入れる。</li>
</ol>


<p>2 から 3 の間で passive close を行った側から active close を行った側にデータが送られることがある <em>(half-close)</em>。</p>

<h2>TIME_WAIT State</h2>

<ul>
<li>active close を行った側が close を受け取ったあとのタイムアウト待ち状態

<ul>
<li>タイムアウト時間は MSL <em>(maximum segment lifetime)</em> の2倍 (2MSL)</li>
</ul>
</li>
<li>TCP のコネクションを確実に切断する

<ul>
<li>ルータの異常によりループが発生すると古いパケットが残り続ける</li>
<li>そこで TCP がパケットを再送すると、ループが解消されたときに重複してパケットが送られる</li>
</ul>
</li>
<li>古い重複したセグメントをネットワークから expire させる

<ul>
<li>コネクションを再接続するときに、古いパケットが残らないようにする</li>
</ul>
</li>
</ul>


<h2>Four-Way Handshake</h2>

<p>SCTP connection を張るときには以下のような処理が行われる：</p>

<ol>
<li>サーバは <code>socket</code>, <code>bind</code>, <code>listen</code> を呼び、passive open を行う</li>
<li>クライアントは <code>connect</code> を呼び、active open を行う。
これによりクライアントは IP のリスト、初期シーケンス番号、この association での全てのパケットを識別するためのタグ、
クライアントがリクエストするストリーム量、クライアントが受け入れることのできるストリーム量を含んだ INIT メッセージを送る。</li>
<li>サーバはクライアントの INIT を受け取り、 INIT-ACK メッセージを送る。
INIT-ACK には 2. で述べた INIT が持つ情報に加えて state cookie が含まれる。
state cookie にはサーバが association が正当であることを補償するための全ての状態が含まれている。</li>
<li>クライアントはサーバの state cookie を COOKIE-ECHO メッセージとして返す。</li>
<li>サーバは cookie が正しいことを確かめ、COOKIE-ACK メッセージを送り association を成立させる。</li>
</ol>


<p>four-way handshake は SCTP が DoS 攻撃を防ぐために用いられる。</p>

<h2>Association Terminate</h2>

<ul>
<li>SCTP では TCP とは違い half-closed は受け入れられず、片方が association を切断した時にはもう片方はデータの送信をやめなければならない。</li>
<li>SCTP では verification tags があるため、TIME_WAIT state は存在しない。</li>
</ul>


<h2>Port Numbers</h2>

<ul>
<li>UDP, SCTP, TCP はプロセスを区別するために 16-bit integer のポート番号を使用する。</li>
<li>ポート番号は以下の3つのレンジに分かれる

<ul>
<li><em>well-known ports</em>: 0 - 1023<br/>
IANA によって管理されているポート</li>
<li><em>registered ports</em>: 1024 - 49151<br/>
IANA によって管理はされていないが、使い方を決めているポート</li>
<li><em>dynamic (private) ports</em>: 49152 - 65535<br/>
IANA が管理していないポート。 <em>ephemeral ports</em> （transport protocol によってクライアントに割り当てられるポート）に使われる。</li>
</ul>
</li>
<li>接続先を決めるための2つの値である IP アドレスとポート番号の組は <em>socket</em> と呼ばれる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX Environment Chapter 2]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/05/02/apue-chapter-2/"/>
    <updated>2012-05-02T14:31:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/05/02/apue-chapter-2</id>
    <content type="html"><![CDATA[<h1>UNIX Standardization and Implementations</h1>

<!--more-->


<h2>Limits</h2>

<ul>
<li>Compile-time limits

<ul>
<li>short integer の最大値など</li>
<li>ヘッダに定義</li>
<li>コンパイル時にインクルードされる</li>
</ul>
</li>
<li>Runtime limits

<ul>
<li>filename の最大文字数など</li>
<li>プロセスが関数を呼んで値を取得する必要がある</li>
</ul>
</li>
<li>Runtime limits は以下の関数を呼ぶことで取得できる

<ul>
<li><code>sysconf()</code>

<ul>
<li>file や directory に関係しない limit</li>
<li><code>_SC_</code> で始まる値を取得できる</li>
</ul>
</li>
<li><code>pathconf()</code>

<ul>
<li>file や directory に関係する limit</li>
<li><code>_PC_</code> で始まる値を取得できる</li>
</ul>
</li>
<li><code>fpathconf()</code>: <code>pathconf</code> の引数がファイルディスクリプタになった版</li>
</ul>
</li>
<li>limits は未定義なこともある

<ul>
<li>e.g. pathname の最大値

<ol>
<li> <code>&lt;limits.h&gt;</code> に定義されていればその値を使う</li>
<li> 定義されていなければ、<code>pathconf("/", _PC_PATH_MAX)</code> して取得する</li>
<li> 取得できなければ、適当な値を推測して使う</li>
</ol>
</li>
</ul>
</li>
</ul>


<h2>Primitive System Data Types</h2>

<ul>
<li>C のデータ型は UNIX システムに依存することがある</li>
<li><code>&lt;sys/types.h&gt;</code> に実装依存のデータ型 (<em>primitive system data types</em>) が定義されている

<ul>
<li><code>clock_t</code>, <code>size_t</code>, <code>time_t</code> など</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/29/unp-chapter-1/"/>
    <updated>2012-04-29T17:30:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/29/unp-chapter-1</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<!--more-->


<h2>Introduction</h2>

<ul>
<li><em>protocol</em> とは、プログラムが通信する際の約束事</li>
<li>クライアントとサーバはネットワークプロトコルで通信するが、ネットワークプロトコルは複数の層からなる</li>
</ul>


<pre>
Web Client: Application layer
|
TCP (Transmission Control Protocol): Transport layer
|
IP (Internet Protocol): Network layer
|
Ethernet: Datalink layer
</pre>


<ul>
<li>クライアントとサーバがユーザプロセスであっても、 TCP や IP は通常カーネル内のプロトコルスタックとして動く</li>
<li>client と server は <em>LAN (Local Area Network)</em> や <em>WAN (Wide Area Network)</em> でつながっている</li>
<li>router が WAN のブロックを形成している</li>
<li>最大の WAN は <em>Internet</em> と呼ばれる</li>
</ul>


<h2>Error Handling: Wrapper Functions</h2>

<ul>
<li>エラーが起きた時に終了させる事はよくあるので、<em>wrapper function</em> として定義すると良い</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">Socket</span><span class="p">(</span><span class="kt">int</span> <span class="n">family</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="kt">int</span> <span class="n">protocol</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">family</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">protocol</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">err_sys</span><span class="p">(</span><span class="s">&quot;socket error&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>スレッド関数はエラーが起きても <code>errno</code> に値をセットしないため、自分で関数の戻り値を <code>errno</code> にセットする必要がある</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ndone_mutex</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">errno</span> <span class="o">=</span> <span class="n">n</span><span class="p">,</span> <span class="n">err_sys</span><span class="p">(</span><span class="s">&quot;pthread_mutex_lock error&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>wrapper function を書くと見やすくなる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">Pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mptr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">mptr</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="n">errno</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">err_sys</span><span class="p">(</span><span class="s">&quot;pthread_mutex_lock error&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>OSI Model</h2>

<p>ネットワークの階層の有名な定義にISO (International Organization for Standardization) の <em>OSI (Open Systems Interconnecton)</em> Model がある</p>

<pre>
  +--------------+    +--------------+
7 | application  |    |              |
  +--------------+    |              |
6 | presentation |    | application  |   user process
  +--------------+    |              |        ^
5 | session      |    |              |        |
  +==============+    +==============+   ============
4 | transport    |    | TCP |  | UDP |        |
  +--------------+    +--------------+        v
3 | network      |    |  IPv4, IPv6  |      kernel
  +--------------+    +--------------+
2 | datalink     |    | device       |
  +--------------+    | driver       |
1 | physical     |    | hardware     |
  +--------------+    +--------------+
</pre>


<h2>Test Networks and Hosts</h2>

<ul>
<li><code>netstat -i</code> でネットワークインターフェースの情報が見れる

<ul>
<li><code>-n</code> オプションをつけるとアドレスを名前ではなく数字で表示する</li>
<li>loopback interface は <code>lo</code>, Ethernet は <code>eth0</code> 等と表示される</li>
</ul>
</li>
<li><code>netstat -r</code> でルーティングテーブルを表示する</li>
<li><code>ifconfig &lt;interface name&gt;</code> でインターフェースの詳細を表示する</li>
</ul>


<h2>64-Bit Architectures</h2>

<ul>
<li>32-bit Unix system のプログラミングモデルは <em>ILP32</em> model と呼ばれる

<ul>
<li>I: integers</li>
<li>L: long integers</li>
<li>P: pointers</li>
<li>integer も long integer も 32-bit</li>
</ul>
</li>
<li>64-bit Unix system のプログラミングモデルは <em>LP64</em> model と呼ばれる

<ul>
<li>long integer と pointer のみが　64-bit であることを必要とする</li>
<li>他は 32-bit</li>
</ul>
</li>
<li><code>size_t</code> 型は 32-bit system では 32-bit だが、64-bit system では 64-bit である

<ul>
<li>socket address programming 等で <code>size_t</code> が出てくることがある</li>
<li>しかし 64-bit も必要ない</li>
<li>そのため 64-bit system でも 32-bit のままであるような <code>t_scalar_t</code> や <code>t_uscalar_t</code> がある</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX Environment Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/28/apue-chapter-1/"/>
    <updated>2012-04-28T22:45:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/28/apue-chapter-1</id>
    <content type="html"><![CDATA[<h1>UNIX System Overview</h1>

<!--more-->


<h2>UNIX Architecture</h2>

<ul>
<li>OS (Operating System) とは、コンピュータのハードウェアを制御し、プログラムが動作する環境を提供するソフトウェアのこと</li>
<li>このソフトウェアのことを <em>kernel</em> と呼ぶ</li>
<li>kernel とのインターフェースとなるソフトウェア群を <em>system calls</em> と呼ぶ</li>
<li>shell は他のアプリケーションを動かすためのインターフェースとなるアプリケーション</li>
</ul>


<h2>Logging In</h2>

<ul>
<li>ログイン名は たいてい <code>/etc/passwd</code> に書かれている</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 最近はパスワードは別ファイルになっていることが多い</span>
</span><span class='line'>&lt;loginName&gt;:&lt;encryptedPassword&gt;:&lt;userID&gt;:&lt;groupID&gt;:&lt;comment&gt;:&lt;homeDirectory&gt;:&lt;shellProgram&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Files and Directories</h2>

<ul>
<li><em>directory</em> とは directory entries を含んだファイルのこと</li>
<li>directory の中にある名前を <em>filename</em> という

<ul>
<li>filename には <code>/</code> と null 文字以外の全ての文字が使える</li>
</ul>
</li>
<li>UNIX のマニュアルは section 1 から 8 まである

<ul>
<li>ls は Section 1 にある</li>
</ul>
</li>
</ul>


<h2>Input and Output</h2>

<ul>
<li>File descriptors とは、カーネルがプロセスからアクセスされるファイルを識別するための non-negative な整数のこと</li>
<li>Unbuffered I/O は <code>open</code>, <code>read</code>, <code>write</code>, <code>lseek</code>, <code>close</code> によって提供される</li>
<li>Standard I/O は unbuffered I/O にバッファインターフェースを提供する

<ul>
<li>バッファサイズを気にする必要がない</li>
<li>行ごとの処理が楽 (<code>fgets</code> etc.)</li>
</ul>
</li>
</ul>


<h2>Programs and Processes</h2>

<ul>
<li><em>program</em> とは、ディレクトリにある実行可能なファイルのこと</li>
<li>program はメモリに読み込まれ、カーネルによって実行される</li>
<li>実行中のプログラムのことを <em>process</em> と呼ぶ

<ul>
<li><em>task</em> と呼んだりする OS もある</li>
</ul>
</li>
<li>UNIX は全てのプロセスにユニークな <em>process ID</em> を割り振る

<ul>
<li>process ID は non-negative な整数</li>
</ul>
</li>
<li>プロセス内で動いているスレッドは同じアドレス空間、ファイルディスクリプタ、スタック等のプロセスに関する属性を共有する

<ul>
<li>そのため、矛盾を起こさないように同期をとる必要がある</li>
</ul>
</li>
<li>スレッドは thread ID で管理される

<ul>
<li>thread ID はプロセスごとに閉じている</li>
</ul>
</li>
</ul>


<h2>Error Handling</h2>

<ul>
<li>UNIX システム関数でエラーが起こると、たいてい負の値が返り、<code>errno</code> と呼ばれる整数がセットされる

<ul>
<li><code>errno</code> が取りうる値は <code>&lt;errno.h&gt;</code> に定義されている</li>
<li>UNIX マニュアルの Section 2 の始め (<code>intro(2)</code>) で <code>errno</code> の説明が見れる

<ul>
<li>Linux では <code>errno(3)</code></li>
</ul>
</li>
</ul>
</li>
<li><code>errno</code> はエラーが起こらない限りクリアされないので、関数の戻り値を見てから <code>errno</code> を調べる必要がある</li>
<li><code>errno</code> に 0 がセットされることはない</li>
<li><code>strerror()</code> で <code>errno</code> に対応するエラーメッセージが取得できる</li>
<li><code>perror()</code> で引数に渡したメッセージと現在の <code>errno</code> に対応するエラーメッセージを standard error に出力できる</li>
<li><code>&lt;errno.h&gt;</code> に定義されたエラーは fatal なものと nonfatal なものに分かれる

<ul>
<li>fatal なエラーが起きた場合はエラーメッセージを出してプログラムを終了すべきである</li>
<li>リソース不足で起きるエラーなどが nonfatal なエラーに分類される</li>
<li>リソース関連の nonfatal エラーは <code>EAGAIN</code>, <code>ENFILE</code>, <code>ENOBUFS</code>, <code>ENOLCK</code>, <code>ENOSPC</code>, <code>ENOSR</code>, <code>EWOULDBLOCK</code>, <code>ENOMEM</code> など</li>
<li>リソース関連のエラーが起きた場合は少し待ってやり直すことで対応できることがある</li>
</ul>
</li>
</ul>


<h2>User Identification</h2>

<ul>
<li><em>user ID</em> はログイン名が作られたときに割り振られ、変更することはできない</li>
<li>user ID が 0 のユーザは <em>root</em> または <em>superuser</em> と呼ばれる</li>
<li><em>group ID</em> もログイン名が作られた時に割り振られる。</li>
<li>group name を group ID にマップするファイルが <code>/etc/group</code> にあり、group file と呼ばれる</li>
<li><code>getuid()</code> や <code>getgid()</code> で user ID や group ID が取れる</li>
<li>group ID の他に追加でグループに所属させることもできる (<em>supplementary group ID</em>)

<ul>
<li>16 個まで</li>
</ul>
</li>
</ul>


<h2>Signals</h2>

<ul>
<li>signal は何かが起きたことをプロセスに伝える手段

<ul>
<li>例えばゼロ除算が発生すると、<code>SIGFPE</code> がプロセスに送られる</li>
</ul>
</li>
<li>プロセスのシグナルの処理の仕方は 3 通りある

<ol>
<li> シグナルを無視する</li>
<li> デフォルトの動作を実行させる</li>
<li> シグナルが起きた時に呼ぶ関数を与える</li>
</ol>
</li>
<li>DELETE または Ctrl-C は <em>interrupt key</em>, Ctrl-backslash は <em>quit key</em> と呼ばれ、実行中のプロセスを終了させるのに使う</li>
<li><code>kill()</code> を呼ぶとシグナルを送ることができる</li>
<li>シグナルを送るためには、そのプロセスのオーナーでなければならない</li>
</ul>


<h2>Time Values</h2>

<ul>
<li>UNIX は2種類の時間を管理している

<ol>
<li> Calendar time: Epoch (UTC 1970 1/1 00:00:00) からの秒数

<ul>
<li><code>time_t</code> 型はこの値を持っている</li>
</ul>
</li>
<li> Process time: clock によって計測される

<ul>
<li>プロセスによって使われたリソースを計測するのに使う</li>
<li>CPU time ともいう</li>
<li><code>clock_t</code> 型がこの値を持っている</li>
</ul>
</li>
</ol>
</li>
<li>プロセスの実行時間を計測すると、3種類の値が得られる

<ul>
<li>Clock time: プロセスを実行するのにかかった時間

<ul>
<li>システム上で動いている他のプロセスの影響を受ける</li>
</ul>
</li>
<li>User CPU time: ユーザの命令が実行された時間（ループ処理など）</li>
<li>System CPU time: システムコールを行うのにかかった時間</li>
</ul>
</li>
<li>user CPU time と system CPU time を合わせて <em>CPU time</em> と呼ぶ</li>
</ul>


<h2>System Calls and Library Functions</h2>

<ul>
<li>system call のドキュメントは <em>UNIX Programmer&rsquo;s Manual</em> の Section 2 にある</li>
<li>Section 3 にはプログラマが普段使うであろう関数 (Library functions) の説明が書かれている (<code>printf()</code> etc.)

<ul>
<li>ライブラリ関数は複数のシステムコールの組み合わせでできている</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[neobundle.vim を使ってみる]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/17/neobundle/"/>
    <updated>2012-04-17T22:38:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/17/neobundle</id>
    <content type="html"><![CDATA[<p>vundle.vim の後釜である、neobundle を入れてみました。</p>

<p><a href="http://vim-users.jp/2011/10/hack238/">Hack #238: neobundle.vim で plugin をモダンに管理する</a></p>

<!--more-->


<h2>インストール</h2>

<pre><code>$ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle
</code></pre>

<h2>plugin の管理</h2>

<p>最初の方に追加</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="s2">&quot;&quot;&quot; neobundle</span>
</span><span class='line'><span class="s2">filetype plugin indent off</span>
</span><span class='line'><span class="s2">if has(&#39;vim_starting&#39;)</span>
</span><span class='line'><span class="s2">    &quot;</span><span class="nb">set </span>rtp+<span class="o">=</span>~/.vim/bundle/vundle/
</span><span class='line'>    <span class="nb">set </span>rtp+<span class="o">=</span>~/.vim/bundle/neobundle/
</span><span class='line'>    <span class="s2">&quot;call vundle#rc()</span>
</span><span class='line'><span class="s2">    call neobundle#rc(expand(&#39;~/.vim/bundle&#39;))</span>
</span><span class='line'><span class="s2">endif</span>
</span><span class='line'>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/neobundle&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;houtsnip/vim-emacscommandline&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;buftabs&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/unite&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;YankRing&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/neocomplcache&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/vimshell&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;Shougo/vimproc&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;gtags&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;sudo&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;autodate&#39;</span>
</span><span class='line'><span class="s2">NeoBundle &#39;tangledhelix/vim-octopress&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">filetype plugin indent on</span>
</span><span class='line'><span class="s2">&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>plugin のインストール</h2>

<pre><code>:NeoBundleInstall
</code></pre>

<h2>plugin のクリーン</h2>

<pre><code>:NeoBundleClean
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BackTrack 5 RC2 をインストール]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/17/install-backtrack/"/>
    <updated>2012-04-17T21:49:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/17/install-backtrack</id>
    <content type="html"><![CDATA[<p>ペネトレーションテストに特化した Linux ディストリビューションの BackTrack をインストールしました。</p>

<p><a href="http://www.backtrack-linux.org/">http://www.backtrack-linux.org/</a></p>

<!--more-->


<h2>BackTrack とは</h2>

<ul>
<li>Ubuntu がベース (BackTrack4 以降)</li>
<li>様々なセキュリティツールが入っている</li>
</ul>


<h2>インストール</h2>

<p>Virtual Box にインストールした。</p>

<ul>
<li>OS タイプは Ubuntu 64 bit</li>
<li>NAT + ホストオンリーアダプタ</li>
</ul>


<p>起動したら root/toor で root にログインして、
    $ startx
で GUI を起動する。</p>

<h2>設定</h2>

<h3>ユーザの追加</h3>

<pre><code>$ adduser &lt;username&gt;
</code></pre>

<p>useradd だとホームディレクトリの作成や設定のコピー等をやってくれない</p>

<h3>sudo の設定</h3>

<pre><code>$ visudo
</code></pre>

<p>エディタは vi でないので注意。
    %<username> ALL=(ALL) ALL
を追加。</p>

<h3>host 名の変更</h3>

<pre><code>$ sudo vi /etc/hostname
$ sudo vi /etc/hosts
</code></pre>

<h3>IP の設定</h3>

<p>eth1 の部分を以下のように編集</p>

<figure class='code'><figcaption><span>/etc/network/interfaces</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>auto eth1
</span><span class='line'>iface eth1 inet static
</span><span class='line'>    address 192.168.56.121
</span><span class='line'>    netmask 255.255.255.0
</span><span class='line'>    network 192.168.56.0
</span><span class='line'>    broadcast 192.168.56.255
</span></code></pre></td></tr></table></div></figure>


<h3>ssh の設定</h3>

<pre><code>$ sudo apt-get --purge remove openssh-server
$ sudo apt-get install openssh-server
</code></pre>

<figure class='code'><figcaption><span>/etc/ssh/sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># root でのログインを無効にする</span>
</span><span class='line'>PermitRootLogin no
</span><span class='line'>
</span><span class='line'><span class="c"># パスワード認証を一時的に有効にする</span>
</span><span class='line'>PasswordAuthentication yes
</span></code></pre></td></tr></table></div></figure>


<p>sshd 再起動
    $ sudo /etc/init.d/ssh restart
    $ sudo lsof -nPi:22  # 確認</p>

<p>鍵の設定が終わったら、PasswordAuthentication を no に戻しておく。</p>
]]></content>
  </entry>
  
</feed>
