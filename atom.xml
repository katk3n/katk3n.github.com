<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ApprEngineer.log]]></title>
  <link href="http://kentaktwo.github.com/atom.xml" rel="self"/>
  <link href="http://kentaktwo.github.com/"/>
  <updated>2012-01-15T18:35:18+09:00</updated>
  <id>http://kentaktwo.github.com/</id>
  <author>
    <name><![CDATA[kentaktwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX Environment - Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/09/apue-chapter-1/"/>
    <updated>2012-01-09T21:02:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/09/apue-chapter-1</id>
    <content type="html"><![CDATA[<p>unix プログラミングを知っておく必要があるので、勉強することにしました。<br/>
翻訳版が古いので原書を読むことにしました。</p>

<p><a href="http://www.amazon.com/Advanced-Programming-UNIX-Environment-2nd/dp/0201433079">Amazon: Advanced Programming in the UNIX Environment</a></p>

<p>Chapter 1 は UNIX システムについての概要。</p>

<!--more-->


<hr />

<h2>UNIX アーキテクチャ</h2>

<p>Operating System (OS) とは、コンピュータのハードウェアを抽象化したインターフェースをアプリケーションに提供するソフトウェアのこと。
その中でコンピュータのハードウェアリソースを管理し、その下でプログラムが動く環境を提供する中核部分のことを kernel と呼ぶ。
それ以外の部分はユーザランドと呼ぶ。</p>

<p>kernel とのインターフェースとなるソフトウェアのことを system call と呼ぶ。
関数ライブラリ群は system call の上に作られるが、アプリケーションは両方呼ぶことができる。</p>

<p>こんな感じ？</p>

<pre><code>
applications
｜　　｜
｜　　library routines
｜　　｜
system calls
｜
kernel
</code></pre>


<p>shell は他のアプリケーションを動かすための特別なアプリケーションのこと。</p>

<h2>ログイン</h2>

<p>ユーザが UNIX システムにログインするために、 login name と password を入れると、 システムはパスワードファイル（通常は /etc/passwd）を見に行く。
パスワードファイルには、</p>

<ul>
<li>login name</li>
<li>暗号化されたパスワード</li>
<li>user ID（数値）</li>
<li>group ID（数値）</li>
<li>コメント</li>
<li>home directory</li>
<li>使う shell のパス</li>
</ul>


<p>がコロン (:) で区切られて書かれている。</p>

<p>sar:x:205:105:Stephen Rago:/home/sar:/bin/ksh
パスワードは最近のシステムではここではなく、別のファイルに書かれている (Chapter 6) 。</p>

<h2>ファイル・ディレクトリ</h2>

<p>UNIX ファイルシステムは directory と file からなる階層構造になっている。
directory とは、directory entry を含んだ file のこと。
directory entry には、file の属性や filename が格納されている。
file の属性とは file の種類 (file, directory) 、ファイルサイズ、ファイル所有者、アクセス権などのこと。
stat や fstat 関数を用いて属性を取得することができる。詳しくは Chapter 4 で。</p>

<p>filename に使える文字はスラッシュ (/) と null 文字以外。スラッシュは pathname に使われ、 null 文字は終端記号に使われる。
新しく directory が作られると、. と .. の2つの filename が自動的に作られる。 root directory では、.. は . と同じ。</p>

<p>opendir() 関数は、 DIR 構造体のポインタを返す。readdir() 関数は DIR 構造体のポインタを引数に取り、 dirent 構造体のポインタを返す。もう読むエントリが無い場合は null ポインタを返す。
dirent 構造体には directory entry に関する情報が入っており、d_name で directory entry の名前が取れる。</p>

<p>プログラムを終了するとき、exit() 関数を呼ぶが、慣例により、正常終了のときは 0 、エラーのときは 1 から 255 のいずれかを引数に渡す。</p>

<h2>インプット・アウトプット</h2>

<p>File descriptor とは、 kernel が file にアクセスするために用いる識別子で、普通は非負の小さい整数を用いる。
慣例により、標準入力には 0 (STDIN_FILENO)、標準出力には 1 (STDOUT_FILENO)、標準エラー出力には 2 (STDERR_FILENO) が既に割り当てられている。 これらのマクロは unistd.h に定義されている。詳しくは Chapter 3 で。</p>

<h2>プログラム・プロセス</h2>

<p>program とは、実行可能な file のこと。プログラムはメモリに読み込まれ、kernel によって実行される。詳しくは Chapter 8 で。</p>

<p>実行中のプログラムのインスタンスのことを process という。OS によっては task ということもある。
UNIX システムでは、すべてのプロセスにはユニークな番号 (process ID) が振られる。プロセス ID は非負整数。</p>

<h2>エラー</h2>

<p>UNIX システム関数では、エラーが起こると大抵は負の値を返し、errno という整数型の変数に追加の情報が格納される。
errno にセットされる値は errno.h に定義されている。
errno の値が勝手にクリアされることは無いので、errno の値を調べるときは、エラーが起きた直後でなければならない。
また、errno の値が 0 にセットされることは無く、errno.h には 0 に設定されている定数も存在しない。</p>

<h2>ユーザ管理</h2>

<p>user ID は各ユーザに固有の値であり、 login name が作られるときにシステム管理者によって割り当てられる。
user ID が 0 のユーザは root あるいは superuser とよばれる。</p>

<p>group ID はユーザをグループ化して、リソースを共有したりするのに用いられ、login name が作られるときに割り当てられる。
group name と group ID の紐付けは group file という file に書かれている。group file は大抵の場合 /etc/group である。</p>

<p>user ID と group ID は getuid() 関数と getgid() 関数で取得できる。</p>

<h2>シグナル</h2>

<p>Signal はプロセスにある状態になったことを通知するのに用いられる。例えば 0 除算が発生した場合、プロセスに SIGFPE シグナルが送られる。
シグナルが送られた場合、プロセスは</p>

<ul>
<li>シグナルを無視する</li>
<li>シグナルに割り当てられたデフォルトの動作を行う</li>
<li>関数を割り当てる</li>
</ul>


<p>のいずれかを行うことになる。</p>

<p>シグナルは kill() 関数を使って発生させることもできる。詳しくは Chapter 10 で。</p>

<h2>時間管理</h2>

<p>UNIX システムは二種類の時間を管理している:</p>

<p>Calendar time: 1970 年 1 月 1 日 00:00:00 からの経過時間
Process time: プロセスによって消費されるプロセッサのリソースを測る時間。CPU time とも呼ばれる
プログラムの実行時間を測ると、以下の3つの値が取得できる:</p>

<p>Clock time: プロセスが実行するのにかかった時間。この時間はシステム上で走っている他のプロセスの数に依存する。
User CPU time: プログラム中のループ等、ユーザの命令を行うのにかかった時間。
System CPU time: システムコールを行うのにかかった時間
user CPU time と system CPU time の合計が大体 CPU time と同じ。</p>

<h2>システムコール</h2>

<p>UNIX Programmer&#8217;s Manual の Section 2 には、システムコールのドキュメントが書かれている。
Section 3 には printf() の標準関数のドキュメントが書かれている。
標準関数は内部でシステムコールを呼んだりしているものもある。例えば、malloc(3) はsbrk(2) を呼んでいる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress を使ってみる]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/09/octopress/"/>
    <updated>2012-01-09T18:03:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/09/octopress</id>
    <content type="html"><![CDATA[<p>Tumblr を使って自分が勉強した事のメモとかを書いていましたが、
Octopress という技術ブログ向けフレームワークがあるということなので、使って見ました。</p>

<p><a href="http://octopress.org/">http://octopress.org/</a></p>

<!--more-->


<h2>インストール</h2>

<p>以下を参考にしながらインストール。
<a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/</a></p>

<h2>新規投稿</h2>

<pre><code>rake new_post['title']</code></pre>


<h2>デプロイ</h2>

<pre><code># ページの作成
rake generate
# プレビュー
rake preview
# デプロイ
rake deploy
# 作成とデプロイを同時にやる場合
rake_gendeploy
</code></pre>


<h2>markdown 記法</h2>

<p>記事は markdown 記法と呼ばれる記法で書くらしい。</p>

<p>参考：</p>

<ul>
<li><a href="http://www.kotono8.com/wiki/Markdown#.E8.A6.8B.E5.87.BA.E3.81.97">http://www.kotono8.com/wiki/Markdown#.E8.A6.8B.E5.87.BA.E3.81.97</a></li>
<li><a href="http://nakama.cc.sophia.ac.jp/help.php?file=advanced_markdown.html">http://nakama.cc.sophia.ac.jp/help.php?file=advanced_markdown.html</a></li>
</ul>


<p>見た目の変更とかは後々やろうと思います。<br/>
とりあえず、前に書いた記事のうちいくつかを移してみよう。</p>
]]></content>
  </entry>
  
</feed>
