<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ApprEngineer.log]]></title>
  <link href="http://kentaktwo.github.com/atom.xml" rel="self"/>
  <link href="http://kentaktwo.github.com/"/>
  <updated>2012-04-11T23:15:04+09:00</updated>
  <id>http://kentaktwo.github.com/</id>
  <author>
    <name><![CDATA[kentaktwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mojito のインストール]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/11/install-mojito/"/>
    <updated>2012-04-11T21:37:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/11/install-mojito</id>
    <content type="html"><![CDATA[<p>Yahoo! Inc. がリリースした Web アプリケーションフレームワーク、Mojito をインストールしてみました。</p>

<p><a href="http://developer.yahoo.com/cocktails/mojito/">http://developer.yahoo.com/cocktails/mojito/</a></p>

<!--More-->


<h2>Mojito とは</h2>

<ul>
<li>MVC モデルな Web アプリケーションフレームワーク</li>
<li>YUI3 を使ってる</li>
<li>JavaScript で記述</li>
<li>1つのコードで複数のデバイス (PC, Android, iOS, etc.) での表示が可能</li>
<li>Xcode に渡せば iOS アプリも作れる</li>
</ul>


<h2>インストール</h2>

<h3>Node.js のインストール</h3>

<p>Mojito を動かすためには Node.js が必要。<br/>
Node.js の環境管理ツールには nvm などがあるが、<br/>
nvm は zsh だとうまく動かないようなので、nodebrew を使う。</p>

<p>参考： <a href="http://d.hatena.ne.jp/Jxck/20120224/1330035058">http://d.hatena.ne.jp/Jxck/20120224/1330035058</a></p>

<p>nodebrew のインストール</p>

<pre><code>$ curl https://raw.github.com/hokaccha/nodebrew/master/nodebrew | perl - setup
$ wget https://raw.github.com/hokaccha/nodebrew/master/nodebrew
$ perl nodebrew setup
</code></pre>

<p>.zshrc のパスの設定</p>

<pre><code>export PATH=$HOME/.nodebrew/current/bin:/usr/local/bin:$PATH
</code></pre>

<p>Node.js のインストール</p>

<pre><code>$ nodebrew install v0.6.14
$ nodebrew use v0.6.14
</code></pre>

<h3>Mojito のインストール</h3>

<p><a href="http://developer.yahoo.com/cocktails/mojito/docs/quickstart/">http://developer.yahoo.com/cocktails/mojito/docs/quickstart/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mercurial & bitbucket で version 管理]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/28/mercurial-bitbucket/"/>
    <updated>2012-01-28T18:35:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/28/mercurial-bitbucket</id>
    <content type="html"><![CDATA[<p>Bitbucket は Mercurial と呼ばれる分散型のバージョン管理システムを使ったホスティングサービスです。
分散型で有名なものには Git を使った Github などがあります。<br/>
Github はプライベートリポジトリが有料ですが、
Bitbucket は無料で無制限にプライベートリポジトリが使えます。</p>

<!--more-->


<h2>Mercurial とは</h2>

<ul>
<li>分散型バージョン管理システム</li>
<li>Python で実装</li>
<li>コマンドは <code>hg</code>  (mercury が水銀を意味し、その元素記号 Hg に由来するらしい)</li>
<li>コマンドが subversion に似ており、Git より分かりやすい</li>
<li>Google Code とかに使われてる</li>
</ul>


<h2>Bitbucket とは</h2>

<ul>
<li><a href="https://bitbucket.org/">https://bitbucket.org/</a></li>
<li>Mercurial を使ったウェブホスティングサービス</li>
<li>公開リポジトリ、プライベートリポジトリともに無料、容量無制限</li>
<li>無料で使えるプライベートリポジトリのユーザ数は5人まで。それ以降は有料</li>
</ul>


<h2>使ってみる</h2>

<p>Mac OS X で Mercurial と Bitbucket を使ってみました。</p>

<h3>Mercurial のインストール</h3>

<pre><code>$ brew install mercurial
</code></pre>

<h3>Bitbucket を使ったリポジトリの新規作成</h3>

<ul>
<li>Bitbucket 上にリポジトリを作成</li>
<li>ローカルにリポジトリを clone</li>
</ul>


<pre><code>$ hg clone ssh://hg@bitbucket.org/username/repositoryname</code></pre>


<ul>
<li>ファイルを追加・変更</li>
<li>リポジトリにファイルを追加</li>
</ul>


<pre><code>$ hg add * </code></pre>


<ul>
<li>ステータス確認</li>
</ul>


<pre><code>$ hg stat</code></pre>


<ul>
<li>コミット</li>
</ul>


<pre><code>$ hg commit -m "initial commit"</code></pre>


<ul>
<li>更新やコミットはローカルでの操作なので、リモートに更新を反映させるには push する</li>
</ul>


<pre><code>$ hg push</code></pre>


<h2>参考</h2>

<ul>
<li><a href="http://www.slideshare.net/kenjis/mercurialbitbucket">http://www.slideshare.net/kenjis/mercurialbitbucket</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD のセットアップ]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/26/freebsd-setup/"/>
    <updated>2012-01-26T00:16:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/26/freebsd-setup</id>
    <content type="html"><![CDATA[<p>FreeBSD 9.0 のインストールとか設定とか</p>

<!--more-->


<h2>FreeBSD 9.0 のインストール</h2>

<p>FreeBSD 9.x 以降では bsdinstall と呼ばれるインストールプログラムを使う。<br/>
以下を見ながらインストール<br/>
<a href="http://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/bsdinstall.html">http://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/bsdinstall.html</a></p>

<h2>ホスト名の変更</h2>

<pre><code>$ hostname "ホスト名"
</code></pre>

<p>で一時的に変更できるが、OS を再起動すると元に戻ってしまうため、<br/>
<code>/etc/hosts</code>, <code>/etc/resolv.conf</code>, <code>/etc/rc.conf</code> の設定も直しておく (Linux の場合は <code>/etc/sysconfig/network</code>)</p>

<h2>ports からパッケージのインストール</h2>

<h3>ports ツリーの構成</h3>

<pre><code>$ pkg_add -r portsnap  # portsnap が無い場合まず package からインストールする
$ portsnap fetch
$ portsnap extract
$ portsnap update
</code></pre>

<p>ports にあるパッケージは <code>/usr/ports/</code> 以下にカテゴリ別に置かれている。<br/>
<a href="http://www.freebsd.org/cgi/ports.cgi">http://www.freebsd.org/cgi/ports.cgi</a><br/>
からパッケージの検索ができる。<br/>
また、</p>

<pre><code>$ whereis &lt;package name&gt;
</code></pre>

<p>でどこのパッケージがあるか探すことができる。</p>

<h3>sudo</h3>

<p>FreeBSD には デフォルトで sudo は入っていない</p>

<pre><code>$ su root
# cd /usr/ports/security/sudo
# make install clean
</code></pre>

<p>インストール後 visudo で sudoers を編集</p>

<h3>portaudit</h3>

<p>パッケージのセキュリティに関する脆弱性を調べる</p>

<pre><code>$ cd /usr/ports/ports-mgmt/portaudit
$ sudo make install clean
$ portaudit -F
</code></pre>

<h3>portupgrade</h3>

<p>portinstall, portupgrade 等が使えるようになる</p>

<pre><code>$ cd /usr/ports/ports-mgmt/portsupgrade
$ sudo make install clean
</code></pre>

<h3>ports package の設定をやり直す</h3>

<pre><code>$ sudo make config
</code></pre>

<h3>ports package のアンインストール</h3>

<pre><code>$ sudo make deinstall
</code></pre>

<h3>ports package の再インストール</h3>

<pre><code>$ sudo make reinstall
</code></pre>

<h2>login 時の shell の設定</h2>

<pre><code>$ chsh -s /usr/local/bin/zsh
</code></pre>

<h2>httpd 起動のための設定</h2>

<p>accept filter を使うために <code>accf_http.ko</code> というカーネルモジュールを読み込む必要がある。</p>

<pre><code>$ sudo kldload accf_http.ko
</code></pre>

<p>OS 起動時に読み込ませるには、<code>/boot/loader.conf</code> に</p>

<pre><code>accf_http_load="YES"
</code></pre>

<p>を追加する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox に入れたゲスト OS に ssh login]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/25/vbox-portforwarding/"/>
    <updated>2012-01-25T23:51:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/25/vbox-portforwarding</id>
    <content type="html"><![CDATA[<p>家の Mac OS X の VirtualBox に FreeBSD 9.0 を入れました。<br/>
Host から Guest に ssh する設定をしました。</p>

<!-- more -->


<h2>ゲスト OS のポートフォワーディング設定</h2>

<pre><code># ssh の設定
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guestssh/Protocol" TCP
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guestssh/GuestPort" 22
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guestssh/HostPort" 60022

# http の設定
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guesthttp/Protocol" TCP
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guesthttp/GuestPort" 80
$ VBoxManage setextradata "f1" "VBoxInternal/Devices/e1000/0/LUN#0/Config/guesthttp/HostPort" 60080
</code></pre>

<ul>
<li>Guest の 22 番ポートを Host の 60022 番ポートへ</li>
<li>Guest の 80 番ポートを Host の 60080 番ポートへ</li>
</ul>


<p>転送する。f1 は VM の名前。<br/>
自由に使用できるポート番号は 49152 〜 65535 らしい。
50000 番台は CentOS が使っているので、FreeBSD は 60000 番台に割り当てました。</p>

<h2>ゲスト OS の起動</h2>

<pre><code>$ VBoxManage startvm --type vrdp f1
</code></pre>

<h2>ゲスト OS に ssh</h2>

<pre><code>$ ssh -p 60022 localhost
</code></pre>

<h2>ゲスト OS に scp</h2>

<pre><code>$ scp -P 60022 file username@localhost:/home/uername/path
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress を使ってみる]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/01/09/octopress/"/>
    <updated>2012-01-09T18:03:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/01/09/octopress</id>
    <content type="html"><![CDATA[<p>Tumblr を使って自分が勉強した事のメモとかを書いていましたが、
Octopress という技術ブログ向けフレームワークがあるということなので、使ってみました。</p>

<p><a href="http://octopress.org/">http://octopress.org/</a></p>

<!--more-->


<h2>インストール</h2>

<p>以下を参考にしながらインストール。
<a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/</a></p>

<h2>新規投稿</h2>

<pre><code>rake new_post['title']
</code></pre>

<p>なお、自分の環境だとファイルが作られたときのフォーマットが iso-2022-jp になっているようなので、初回は</p>

<pre><code># In vim
:set fileencoding=utf-8
</code></pre>

<p>で文字コードを直す。</p>

<h2>デプロイ</h2>

<pre><code># ページの作成
rake generate
# プレビュー
rake preview
# デプロイ
rake deploy
# 作成とデプロイを同時にやる場合
rake_gendeploy
</code></pre>

<h2>markdown 記法</h2>

<p>記事は markdown 記法と呼ばれる記法で書くらしい。</p>

<p>参考：<br/>
<a href="http://www.kotono8.com/wiki/Markdown#.E8.A6.8B.E5.87.BA.E3.81.97">http://www.kotono8.com/wiki/Markdown#.E8.A6.8B.E5.87.BA.E3.81.97</a>
<a href="http://nakama.cc.sophia.ac.jp/help.php?file=advanced_markdown.html">http://nakama.cc.sophia.ac.jp/help.php?file=advanced_markdown.html</a></p>

<p>見た目の変更とかは後々やろうと思います。<br/>
とりあえず、前に書いた記事のうちいくつかを移してみよう。</p>
]]></content>
  </entry>
  
</feed>
