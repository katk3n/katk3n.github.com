<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: unix | ApprEngineer.log]]></title>
  <link href="http://kentaktwo.github.com/blog/categories/unix/atom.xml" rel="self"/>
  <link href="http://kentaktwo.github.com/"/>
  <updated>2012-07-01T00:26:04+09:00</updated>
  <id>http://kentaktwo.github.com/</id>
  <author>
    <name><![CDATA[kentaktwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX enviroment Chapter 3]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/06/30/apue-chapter-3/"/>
    <updated>2012-06-30T13:49:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/06/30/apue-chapter-3</id>
    <content type="html"><![CDATA[<h1>File I/O</h1>

<!--more-->


<h2>File Descriptors</h2>

<ul>
<li>標準入出力は <code>&lt;unistd.h&gt;</code> に定義されている

<ul>
<li><code>STDIN_FILENO</code>: 0</li>
<li><code>STDOUT_FILENO</code>: 1</li>
<li><code>STDERR_FILENO</code>: 2</li>
<li>0, 1, 2 に割り当てられているのは慣習であり、UNIX の取り決めではない</li>
</ul>
</li>
<li>File descriptor の範囲は 0 から <code>OPEN_MAX</code> まで

<ul>
<li>昔は 19 までだったが最近は 63 まであるシステムが多い</li>
</ul>
</li>
</ul>


<h2>open Function</h2>

<p>``` c</p>

<h1>include &lt;fcntl.h></h1>

<p>int open(const char <em>pathname, int oflag, ... /</em> mode_t mode */ );
<code>``
- ファイルを開いたり作成したりする
- 第二引数 (_oflag_) に入れるオプションは</code>&lt;fcntl.h>` に定義されている</p>

<pre><code>- `O_RDONLY`, `O_WRONLY`, `O_RDWR` のいずれかは必須
</code></pre>

<ul>
<li>open される file descriptor は使われていないもののうち最小のものになる

<ul>
<li>なので、標準出力(1) を close して open すると 1番に割り当てられたりする</li>
</ul>
</li>
<li>ファイル名が長すぎた (<code>NAME_MAX</code>以上) ときどうするかは OS 依存

<ul>
<li>System V 系だと勝手にはみ出た分を切り捨てる</li>
<li>BSD 系だとエラー (<code>ENAMETOOLONG</code>) を出す</li>
<li>POSIX.1 なら <code>_POSIX_NO_TRUNC</code> を定義すればエラーを出すようにできる</li>
</ul>
</li>
</ul>


<h2>creat Function</h2>

<p>``` c</p>

<h1>include &lt;fcntl.h></h1>

<p>int creat(const char *pathname, mode_t mode);
<code>``
-</code>open(pathname, O_WRONLY | O_CREAT | O_TRUNC, mode);` と同じ</p>

<h2>close Function</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int close(int filedes);
```
- プロセスが終了するときにはカーネルによって自動的に close される</p>

<h2>lseek Function</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>off_t lseek(int filedes, off_t offset, int whence);
<code>``
- オフセットの位置を指定する
- open されたファイルは現在のファイルの始めからのオフセットを非負整数で持っている
- デフォルトでは open されたときオフセットは 0 に設定される (</code>O_APPEND` を設定している場合を除く)
- <em>offset</em> の値の適用の仕方は <em>whence</em> の値による</p>

<pre><code>- `SEEK_SET`: ファイルの始めから _offset_ 進めたところ
- `SEEK_CUR`: 現在のオフセットから _offset_ 進めたところ
- `SEEK_END`: ファイルの終わり（正確には現在のファイルサイズ）から _offset_ 進めたところ
</code></pre>

<ul>
<li><code>lseek</code> は新しいファイルオフセットを返すので、これを利用して現在のオフセットを取得することができる
<code>c
off_t currpos = lseek(fd, 0, SEEK_CUR);
</code></li>
<li>ファイルオフセットをファイルサイズより大きくして write すると、その間は 0 で埋められるが、ディスクブロックは割り当てられない</li>
</ul>


<h2>od command</h2>

<ul>
<li>ファイルコンテンツを見る</li>
<li><code>-c</code> オプションをつけるとコンテンツを文字として表示する</li>
</ul>


<h2>read Function</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>ssize_t read(int filedes, void *buf, size_t nbytes);
```
- 戻り値は実際に読み込んだバイト数</p>

<pre><code>- EOF のときは 0
</code></pre>

<h2>write Function</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>ssize_t write(int filedes, const void *buf, size_t nbytes);
```
- ディスクがいっぱいで書き込めなくなったときはエラー (-1) を返す</p>

<h2>File Sharing</h2>

<ul>
<li>カーネルは open されたファイルを3種類のデータ構造で管理している

<ul>
<li>process table

<ul>
<li>各プロセスが持つ</li>
<li>open された file descriptor のテーブル</li>
<li>各 descriptor は file table へのポインタを持つ</li>
</ul>
</li>
<li>file table

<ul>
<li>ファイルステータス (read, write, append, sync など)、現在のファイルオフセットを持つ</li>
<li>v-node table へのポインタを持つ</li>
</ul>
</li>
<li>v-node table

<ul>
<li>ファイルタイプ、i-node 情報を持つ</li>
<li>i-node はファイルのオーナー、サイズ、実データの格納場所へのポインタなどを持っている</li>
</ul>
</li>
</ul>
</li>
<li>Linux には v-node は無いが、その代わりに generic i-node が使われる</li>
<li>2つのプロセスが同じファイルを open すると、file table は2つできるが、それらが同じ v-node table を指す</li>
</ul>


<h2>Atomic Operations</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>ssize_t pread(int filedes, void <em>buf, size_t nbytes, off_t offset);
ssize_t pwrite(int filedes, const void </em>buf, size_t nbytes, off_t offset);
<code>``
</code>lseek<code>と</code>read<code>または</code>write` を atomic に行なってくれる</p>

<h2>dup and dup2 Functions</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int dup(int filedes);
int dup2(int filedes, int filedes2);
```
- file descriptor を複製する</p>

<pre><code>- dup では複製されたディスクリプタは使用可能なディスクリプタのうち最小のものとなる
- dup2 では複製されたディスクリプタの番号を _filedes2_ で指定する
</code></pre>

<ul>
<li>元のディスクリプタと複製されたディスクリプタは同じ file table を指す

<ul>
<li>なので、ファイルステータスやファイルオフセットなどが共有される</li>
</ul>
</li>
</ul>


<h2>sync, fsync, and fdatasync Functions</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int fsync(int filedes);
int fdatasync(int filedes);
int sync(void);
<code>``
- UNIX の実装では、write されたデータはカーネルによって一旦バッファにコピーされ、少し後にディスクに書き込まれる
-</code>sync` を呼ぶと、すべての変更されたブロックを書き込む</p>

<pre><code>- 通常デーモンによって30秒に1回 `sync` が呼ばれている
- ディスクの書き込みが終わるのを待たずに return する
</code></pre>

<ul>
<li><code>fsync</code> は特定のファイルディスクリプタに対して行う

<ul>
<li>ディスクへの書き込みが終わるのを待つ</li>
</ul>
</li>
<li><code>fdatasync</code> はデータの更新のみを行う

<ul>
<li><code>fsync</code> はファイル属性の更新も行う</li>
</ul>
</li>
</ul>


<h2>fcntl Function</h2>

<p>``` c</p>

<h1>include &lt;fcntl.h></h1>

<p>int fcntl(int filedes, int cmd, ... /<em> int arg </em>/ );
```
- open されたファイルのプロパティを変更する
- 以下のようなことができる (<em>cmd</em> で指定)</p>

<pre><code>- descriptor の複製
- descriptor flag の取得・設定
- file status flag の取得・設定
- オーナーシップ (process ID, group ID) の取得・設定
- record lock の取得・設定（詳しくは14章）
</code></pre>

<h2>/dev/fd</h2>

<ul>
<li><code>/dev/fd</code> に 0, 1, 2 と呼ばれるファイルがあり、それぞれ file descriptor 0, 1, 2 に対応している</li>
<li><code>/dev/fd/n</code> を open する際、<em>mode</em> の値は無視される。 <code>/dev/fd/0</code> は read only であり、
<code>c
  fd = open("/dev/fd/0", O_RDWR);
</code>
としても fd に書き込むことはできない</li>
<li>shell で使われることが多い
<code>sh
filter file2 | cat file1 - file3 | lpr
</code>
は file1, filter file2, file3 を cat しているが (<code>-</code> は標準入力)、
<code>-</code> は場合によって標準入力だったり出力だったりわかりにくいので、
<code>sh
filter file2 | cat file1 /dev/fd/0 file3 | lpr
</code>
として明確に書くことができる。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 2]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/05/07/unp-chapter-2/"/>
    <updated>2012-05-07T23:41:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/05/07/unp-chapter-2</id>
    <content type="html"><![CDATA[<h1>The Transport Layer: TCP, UDP, and SCTP</h1>

<!--more-->


<h2>User Datagram Protocol (UDP)</h2>

<ul>
<li>シンプルなプロトコル

<ol>
<li>アプリケーションがメッセージを UDP socket に書く</li>
<li>UDP socket は UDP datagram にカプセル化される</li>
<li>UDP datagram は IP datagram にカプセル化される</li>
<li>IP datagram が目的地に送信される</li>
</ol>
</li>
<li>UDP datagram が目的地に届けられる補償は無い</li>
<li>UDP datagram は長さを持つ

<ul>
<li>datagram の長さの情報はデータと一緒に受信者に届けられる</li>
</ul>
</li>
<li>UDP は <em>connectionless</em> service とも言われる

<ul>
<li>client - server 間に長期間の依存を持たないため</li>
<li>例えば UDP client が socket を作って datagram を server に送り、その後すぐに別の datagram を別の servevr に同じ socket で送ることが可能</li>
</ul>
</li>
</ul>


<h2>Transmission Control Protocol (TCP)</h2>

<ul>
<li>クライアント・サーバ間でコネクションを張る</li>
<li>信頼性 <em>(reliability)</em> がある

<ul>
<li>TCP がデータを送信すると、応答 (acknowledgment) が来るのを待つ</li>
<li>応答が来ない場合、TCP は自動的にデータを再送信し、さらに待つ</li>
<li>しばらく繰り返しても来ない場合は諦める</li>
</ul>
</li>
<li>RTT <em>(round trip time)</em> を推測するアルゴリズムを含んでいる

<ul>
<li>応答にどれだけ時間がかかりそうかを推測する</li>
</ul>
</li>
<li>TCP が送信するデータには各 byte に連番 <em>(sequence numbers)</em> が振られている

<ul>
<li>到着したセグメント（TCP が IP に渡すデータの単位）が壊れていた場合、セグメントを再要求する</li>
<li>データが重複していた場合、番号を見て重複しているデータを削除する</li>
</ul>
</li>
<li><em>flow control</em> を提供する

<ul>
<li>peer に対して何バイトのサイズのデータを受け入れられるか <em>(advertised window)</em> 伝える</li>
<li>送信者が受信バッファを超えるデータを送ることを防ぐ</li>
<li>送信者からデータを受信すると window サイズは小さくなり、受信アプリケーションがバッファからデータを読むと window サイズは大きくなる</li>
</ul>
</li>
<li>TCP コネクションは <em>full-duplex</em> である

<ul>
<li>アプリケーションはいつでもデータの送信と受信ができる</li>
<li>sequence number や window size の状態の経過を追い続ける</li>
</ul>
</li>
</ul>


<h2>Stream Control Transmission Protocol (SCTP)</h2>

<ul>
<li>クライアント・サーバ間の接続は connection ではなく、 <em>association</em> と呼ばれる

<ul>
<li>2システム間の通信が2つ以上のアドレスを使用することができる</li>
</ul>
</li>
<li><em>message-oriented</em> である

<ul>
<li>TCP は byte 指向</li>
</ul>
</li>
<li>接続間で複数のストリーム (multiple stream) を提供する

<ul>
<li>ストリームの1つに含まれる message が失われても、他のストリームの message の配信に影響しない</li>
</ul>
</li>
<li>マルチホーミング (multihoming) を提供する

<ul>
<li>1つの SCTP エンドポイントが複数の IP アドレスをサポートする</li>
<li>ネットワークの不安定さに対するロバスト性を向上させる</li>
</ul>
</li>
</ul>


<h2>Three-Way Handshake</h2>

<p>TCP connection を張るときには以下のような処理が行われる：</p>

<ol>
<li>サーバは <code>socket</code>, <code>bind</code>, <code>listen</code> を呼び、接続を受け入れる準備をする <em>(passive open)</em></li>
<li>クライアントは <code>connect</code> を呼び <em>active open</em> を発行する。
クライアント TCP は SYN (synchronize) segment を送信して、サーバにクライアントが送る予定のデータサイズを教える。</li>
<li>サーバはクライアントの SYN を受け入れ、ACK (acknowledge) と自分の SYN を送る。
SYN にはサーバが送る予定のデータサイズが含まれている。
サーバの SYN とクライアントの SYN に対する ACK は1つのセグメントで送られる。</li>
<li>クライアントはサーバの SYN を受け入れる (ACK)</li>
</ol>


<h2>TCP Connection Termination</h2>

<p>接続を切るときは以下のような処理で行われる：</p>

<ol>
<li>片方のアプリケーションが <code>close</code> を呼び <em>(active close)</em>、TCP は FIN segment を送る。</li>
<li>もう片方の TCP が FIN を受け入れる <em>(passive close)</em>。FIN は end-of-file としてアプリケーションに通知される。</li>
<li>しばらくして、end-of-file を受信したアプリケーションはソケットを <code>close</code> し、FIN を送る。</li>
<li>active close を行った側の TCP が FIN を受け入れる。</li>
</ol>


<p>2 から 3 の間で passive close を行った側から active close を行った側にデータが送られることがある <em>(half-close)</em>。</p>

<h2>TIME_WAIT State</h2>

<ul>
<li>active close を行った側が close を受け取ったあとのタイムアウト待ち状態

<ul>
<li>タイムアウト時間は MSL <em>(maximum segment lifetime)</em> の2倍 (2MSL)</li>
</ul>
</li>
<li>TCP のコネクションを確実に切断する

<ul>
<li>ルータの異常によりループが発生すると古いパケットが残り続ける</li>
<li>そこで TCP がパケットを再送すると、ループが解消されたときに重複してパケットが送られる</li>
</ul>
</li>
<li>古い重複したセグメントをネットワークから expire させる

<ul>
<li>コネクションを再接続するときに、古いパケットが残らないようにする</li>
</ul>
</li>
</ul>


<h2>Four-Way Handshake</h2>

<p>SCTP connection を張るときには以下のような処理が行われる：</p>

<ol>
<li>サーバは <code>socket</code>, <code>bind</code>, <code>listen</code> を呼び、passive open を行う</li>
<li>クライアントは <code>connect</code> を呼び、active open を行う。
これによりクライアントは IP のリスト、初期シーケンス番号、この association での全てのパケットを識別するためのタグ、
クライアントがリクエストするストリーム量、クライアントが受け入れることのできるストリーム量を含んだ INIT メッセージを送る。</li>
<li>サーバはクライアントの INIT を受け取り、 INIT-ACK メッセージを送る。
INIT-ACK には 2. で述べた INIT が持つ情報に加えて state cookie が含まれる。
state cookie にはサーバが association が正当であることを補償するための全ての状態が含まれている。</li>
<li>クライアントはサーバの state cookie を COOKIE-ECHO メッセージとして返す。</li>
<li>サーバは cookie が正しいことを確かめ、COOKIE-ACK メッセージを送り association を成立させる。</li>
</ol>


<p>four-way handshake は SCTP が DoS 攻撃を防ぐために用いられる。</p>

<h2>Association Terminate</h2>

<ul>
<li>SCTP では TCP とは違い half-closed は受け入れられず、片方が association を切断した時にはもう片方はデータの送信をやめなければならない。</li>
<li>SCTP では verification tags があるため、TIME_WAIT state は存在しない。</li>
</ul>


<h2>Port Numbers</h2>

<ul>
<li>UDP, SCTP, TCP はプロセスを区別するために 16-bit integer のポート番号を使用する。</li>
<li>ポート番号は以下の3つのレンジに分かれる

<ul>
<li><em>well-known ports</em>: 0 - 1023<br/>
IANA によって管理されているポート</li>
<li><em>registered ports</em>: 1024 - 49151<br/>
IANA によって管理はされていないが、使い方を決めているポート</li>
<li><em>dynamic (private) ports</em>: 49152 - 65535<br/>
IANA が管理していないポート。 <em>ephemeral ports</em> （transport protocol によってクライアントに割り当てられるポート）に使われる。</li>
</ul>
</li>
<li>接続先を決めるための2つの値である IP アドレスとポート番号の組は <em>socket</em> と呼ばれる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX environment Chapter 2]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/05/02/apue-chapter-2/"/>
    <updated>2012-05-02T14:31:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/05/02/apue-chapter-2</id>
    <content type="html"><![CDATA[<h1>UNIX Standardization and Implementations</h1>

<!--more-->


<h2>Limits</h2>

<ul>
<li>Compile-time limits

<ul>
<li>short integer の最大値など</li>
<li>ヘッダに定義</li>
<li>コンパイル時にインクルードされる</li>
</ul>
</li>
<li>Runtime limits

<ul>
<li>filename の最大文字数など</li>
<li>プロセスが関数を呼んで値を取得する必要がある</li>
</ul>
</li>
<li>Runtime limits は以下の関数を呼ぶことで取得できる

<ul>
<li><code>sysconf()</code>

<ul>
<li>file や directory に関係しない limit</li>
<li><code>_SC_</code> で始まる値を取得できる</li>
</ul>
</li>
<li><code>pathconf()</code>

<ul>
<li>file や directory に関係する limit</li>
<li><code>_PC_</code> で始まる値を取得できる</li>
</ul>
</li>
<li><code>fpathconf()</code>: <code>pathconf</code> の引数がファイルディスクリプタになった版</li>
</ul>
</li>
<li>limits は未定義なこともある

<ul>
<li>e.g. pathname の最大値

<ol>
<li><code>&lt;limits.h&gt;</code> に定義されていればその値を使う</li>
<li>定義されていなければ、<code>pathconf("/", _PC_PATH_MAX)</code> して取得する</li>
<li>取得できなければ、適当な値を推測して使う</li>
</ol>
</li>
</ul>
</li>
</ul>


<h2>Primitive System Data Types</h2>

<ul>
<li>C のデータ型は UNIX システムに依存することがある</li>
<li><code>&lt;sys/types.h&gt;</code> に実装依存のデータ型 (<em>primitive system data types</em>) が定義されている

<ul>
<li><code>clock_t</code>, <code>size_t</code>, <code>time_t</code> など</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/29/unp-chapter-1/"/>
    <updated>2012-04-29T17:30:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/29/unp-chapter-1</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<!--more-->


<h2>Introduction</h2>

<ul>
<li><em>protocol</em> とは、プログラムが通信する際の約束事</li>
<li>クライアントとサーバはネットワークプロトコルで通信するが、ネットワークプロトコルは複数の層からなる</li>
</ul>


<pre>
Web Client: Application layer
|
TCP (Transmission Control Protocol): Transport layer
|
IP (Internet Protocol): Network layer
|
Ethernet: Datalink layer
</pre>


<ul>
<li>クライアントとサーバがユーザプロセスであっても、 TCP や IP は通常カーネル内のプロトコルスタックとして動く</li>
<li>client と server は <em>LAN (Local Area Network)</em> や <em>WAN (Wide Area Network)</em> でつながっている</li>
<li>router が WAN のブロックを形成している</li>
<li>最大の WAN は <em>Internet</em> と呼ばれる</li>
</ul>


<h2>Error Handling: Wrapper Functions</h2>

<ul>
<li>エラーが起きた時に終了させる事はよくあるので、<em>wrapper function</em> として定義すると良い
``` c
int
Socket(int family, int type, int protocol)
{
  int n;
  if ((n = socket(family, type, protocol)) &lt; 0)

<pre><code>  err_sys("socket error");
</code></pre>

<p>  return (n);
}
```</p></li>
<li><p>スレッド関数はエラーが起きても <code>errno</code> に値をセットしないため、自分で関数の戻り値を <code>errno</code> にセットする必要がある
<code>c
int n;
if ((n = pthread_mutex_lock(&amp;ndone_mutex)) != 0)
  errno = n, err_sys("pthread_mutex_lock error");
</code>
wrapper function を書くと見やすくなる
``` c
void
Pthread_mutex_lock(pthread_mutex_t *mptr)
{
  int n;</p>

<p>  if ((n = pthread_mutex_lock(mptr)) == 0)</p>

<pre><code>  return;
</code></pre>

<p>  errno = n;
  err_sys("pthread_mutex_lock error");
}
```</p></li>
</ul>


<h2>OSI Model</h2>

<p>ネットワークの階層の有名な定義にISO (International Organization for Standardization) の <em>OSI (Open Systems Interconnecton)</em> Model がある</p>

<pre>
  +--------------+    +--------------+
7 | application  |    |              |
  +--------------+    |              |
6 | presentation |    | application  |   user process
  +--------------+    |              |        ^
5 | session      |    |              |        |
  +==============+    +==============+   ============
4 | transport    |    | TCP |  | UDP |        |
  +--------------+    +--------------+        v
3 | network      |    |  IPv4, IPv6  |      kernel
  +--------------+    +--------------+
2 | datalink     |    | device       |
  +--------------+    | driver       |
1 | physical     |    | hardware     |
  +--------------+    +--------------+
</pre>


<h2>Test Networks and Hosts</h2>

<ul>
<li><code>netstat -i</code> でネットワークインターフェースの情報が見れる

<ul>
<li><code>-n</code> オプションをつけるとアドレスを名前ではなく数字で表示する</li>
<li>loopback interface は <code>lo</code>, Ethernet は <code>eth0</code> 等と表示される</li>
</ul>
</li>
<li><code>netstat -r</code> でルーティングテーブルを表示する</li>
<li><code>ifconfig &lt;interface name&gt;</code> でインターフェースの詳細を表示する</li>
</ul>


<h2>64-Bit Architectures</h2>

<ul>
<li>32-bit Unix system のプログラミングモデルは <em>ILP32</em> model と呼ばれる

<ul>
<li>I: integers</li>
<li>L: long integers</li>
<li>P: pointers</li>
<li>integer も long integer も 32-bit</li>
</ul>
</li>
<li>64-bit Unix system のプログラミングモデルは <em>LP64</em> model と呼ばれる

<ul>
<li>long integer と pointer のみが　64-bit であることを必要とする</li>
<li>他は 32-bit</li>
</ul>
</li>
<li><code>size_t</code> 型は 32-bit system では 32-bit だが、64-bit system では 64-bit である

<ul>
<li>socket address programming 等で <code>size_t</code> が出てくることがある</li>
<li>しかし 64-bit も必要ない</li>
<li>そのため 64-bit system でも 32-bit のままであるような <code>t_scalar_t</code> や <code>t_uscalar_t</code> がある</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX environment Chapter 1]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/04/28/apue-chapter-1/"/>
    <updated>2012-04-28T22:45:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/04/28/apue-chapter-1</id>
    <content type="html"><![CDATA[<h1>UNIX System Overview</h1>

<!--more-->


<h2>UNIX Architecture</h2>

<ul>
<li>OS (Operating System) とは、コンピュータのハードウェアを制御し、プログラムが動作する環境を提供するソフトウェアのこと</li>
<li>このソフトウェアのことを <em>kernel</em> と呼ぶ</li>
<li>kernel とのインターフェースとなるソフトウェア群を <em>system calls</em> と呼ぶ</li>
<li>shell は他のアプリケーションを動かすためのインターフェースとなるアプリケーション</li>
</ul>


<h2>Logging In</h2>

<ul>
<li>ログイン名は たいてい <code>/etc/passwd</code> に書かれている
``` sh

<h1>最近はパスワードは別ファイルになっていることが多い</h1>

<p><loginName>:<encryptedPassword>:<userID>:<groupID>:<comment>:<homeDirectory>:<shellProgram>
```</p></li>
</ul>


<h2>Files and Directories</h2>

<ul>
<li><em>directory</em> とは directory entries を含んだファイルのこと</li>
<li>directory の中にある名前を <em>filename</em> という

<ul>
<li>filename には <code>/</code> と null 文字以外の全ての文字が使える</li>
</ul>
</li>
<li>UNIX のマニュアルは section 1 から 8 まである

<ul>
<li>ls は Section 1 にある</li>
</ul>
</li>
</ul>


<h2>Input and Output</h2>

<ul>
<li>File descriptors とは、カーネルがプロセスからアクセスされるファイルを識別するための non-negative な整数のこと</li>
<li>Unbuffered I/O は <code>open</code>, <code>read</code>, <code>write</code>, <code>lseek</code>, <code>close</code> によって提供される</li>
<li>Standard I/O は unbuffered I/O にバッファインターフェースを提供する

<ul>
<li>バッファサイズを気にする必要がない</li>
<li>行ごとの処理が楽 (<code>fgets</code> etc.)</li>
</ul>
</li>
</ul>


<h2>Programs and Processes</h2>

<ul>
<li><em>program</em> とは、ディレクトリにある実行可能なファイルのこと</li>
<li>program はメモリに読み込まれ、カーネルによって実行される</li>
<li>実行中のプログラムのことを <em>process</em> と呼ぶ

<ul>
<li><em>task</em> と呼んだりする OS もある</li>
</ul>
</li>
<li>UNIX は全てのプロセスにユニークな <em>process ID</em> を割り振る

<ul>
<li>process ID は non-negative な整数</li>
</ul>
</li>
<li>プロセス内で動いているスレッドは同じアドレス空間、ファイルディスクリプタ、スタック等のプロセスに関する属性を共有する

<ul>
<li>そのため、矛盾を起こさないように同期をとる必要がある</li>
</ul>
</li>
<li>スレッドは thread ID で管理される

<ul>
<li>thread ID はプロセスごとに閉じている</li>
</ul>
</li>
</ul>


<h2>Error Handling</h2>

<ul>
<li>UNIX システム関数でエラーが起こると、たいてい負の値が返り、<code>errno</code> と呼ばれる整数がセットされる

<ul>
<li><code>errno</code> が取りうる値は <code>&lt;errno.h&gt;</code> に定義されている</li>
<li>UNIX マニュアルの Section 2 の始め (<code>intro(2)</code>) で <code>errno</code> の説明が見れる

<ul>
<li>Linux では <code>errno(3)</code></li>
</ul>
</li>
</ul>
</li>
<li><code>errno</code> はエラーが起こらない限りクリアされないので、関数の戻り値を見てから <code>errno</code> を調べる必要がある</li>
<li><code>errno</code> に 0 がセットされることはない</li>
<li><code>strerror()</code> で <code>errno</code> に対応するエラーメッセージが取得できる</li>
<li><code>perror()</code> で引数に渡したメッセージと現在の <code>errno</code> に対応するエラーメッセージを standard error に出力できる</li>
<li><code>&lt;errno.h&gt;</code> に定義されたエラーは fatal なものと nonfatal なものに分かれる

<ul>
<li>fatal なエラーが起きた場合はエラーメッセージを出してプログラムを終了すべきである</li>
<li>リソース不足で起きるエラーなどが nonfatal なエラーに分類される</li>
<li>リソース関連の nonfatal エラーは <code>EAGAIN</code>, <code>ENFILE</code>, <code>ENOBUFS</code>, <code>ENOLCK</code>, <code>ENOSPC</code>, <code>ENOSR</code>, <code>EWOULDBLOCK</code>, <code>ENOMEM</code> など</li>
<li>リソース関連のエラーが起きた場合は少し待ってやり直すことで対応できることがある</li>
</ul>
</li>
</ul>


<h2>User Identification</h2>

<ul>
<li><em>user ID</em> はログイン名が作られたときに割り振られ、変更することはできない</li>
<li>user ID が 0 のユーザは <em>root</em> または <em>superuser</em> と呼ばれる</li>
<li><em>group ID</em> もログイン名が作られた時に割り振られる。</li>
<li>group name を group ID にマップするファイルが <code>/etc/group</code> にあり、group file と呼ばれる</li>
<li><code>getuid()</code> や <code>getgid()</code> で user ID や group ID が取れる</li>
<li>group ID の他に追加でグループに所属させることもできる (<em>supplementary group ID</em>)

<ul>
<li>16 個まで</li>
</ul>
</li>
</ul>


<h2>Signals</h2>

<ul>
<li>signal は何かが起きたことをプロセスに伝える手段

<ul>
<li>例えばゼロ除算が発生すると、<code>SIGFPE</code> がプロセスに送られる</li>
</ul>
</li>
<li>プロセスのシグナルの処理の仕方は 3 通りある

<ol>
<li>シグナルを無視する</li>
<li>デフォルトの動作を実行させる</li>
<li>シグナルが起きた時に呼ぶ関数を与える</li>
</ol>
</li>
<li>DELETE または Ctrl-C は <em>interrupt key</em>, Ctrl-backslash は <em>quit key</em> と呼ばれ、実行中のプロセスを終了させるのに使う</li>
<li><code>kill()</code> を呼ぶとシグナルを送ることができる</li>
<li>シグナルを送るためには、そのプロセスのオーナーでなければならない</li>
</ul>


<h2>Time Values</h2>

<ul>
<li>UNIX は2種類の時間を管理している

<ol>
<li>Calendar time: Epoch (UTC 1970 1/1 00:00:00) からの秒数

<ul>
<li><code>time_t</code> 型はこの値を持っている</li>
</ul>
</li>
<li>Process time: clock によって計測される

<ul>
<li>プロセスによって使われたリソースを計測するのに使う</li>
<li>CPU time ともいう</li>
<li><code>clock_t</code> 型がこの値を持っている</li>
</ul>
</li>
</ol>
</li>
<li>プロセスの実行時間を計測すると、3種類の値が得られる

<ul>
<li>Clock time: プロセスを実行するのにかかった時間

<ul>
<li>システム上で動いている他のプロセスの影響を受ける</li>
</ul>
</li>
<li>User CPU time: ユーザの命令が実行された時間（ループ処理など）</li>
<li>System CPU time: システムコールを行うのにかかった時間</li>
</ul>
</li>
<li>user CPU time と system CPU time を合わせて <em>CPU time</em> と呼ぶ</li>
</ul>


<h2>System Calls and Library Functions</h2>

<ul>
<li>system call のドキュメントは <em>UNIX Programmer's Manual</em> の Section 2 にある</li>
<li>Section 3 にはプログラマが普段使うであろう関数 (Library functions) の説明が書かれている (<code>printf()</code> etc.)

<ul>
<li>ライブラリ関数は複数のシステムコールの組み合わせでできている</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
