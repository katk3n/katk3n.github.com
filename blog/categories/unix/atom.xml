<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: unix | ApprEngineer.log]]></title>
  <link href="http://kentaktwo.github.com/blog/categories/unix/atom.xml" rel="self"/>
  <link href="http://kentaktwo.github.com/"/>
  <updated>2013-05-01T23:22:46+09:00</updated>
  <id>http://kentaktwo.github.com/</id>
  <author>
    <name><![CDATA[kentaktwo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS6.4 インストール]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/04/07/centos6-install/"/>
    <updated>2013-04-07T18:18:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/04/07/centos6-install</id>
    <content type="html"><![CDATA[<p>CentOS 6.4 (64-bit) を Virtual Box VM にインストール</p>

<!--more-->


<h1>VirtualBox VM 準備</h1>

<p>ネットワークの設定は</p>

<ul>
<li>ネットワークアダプタ1: NAT</li>
<li>ネットワークアダプタ2: ホストオンリーアダプタ</li>
</ul>


<p>ストレージにインストーラをセットして起動</p>

<h1>インストール</h1>

<p>"Install or Update an existing System" を選択して開始</p>

<h2>Disk Found</h2>

<p>Skip を選択</p>

<h2>Warning, Error processing Drive</h2>

<p>"Re-initialize all" を選択</p>

<h2>Time Zone Selection</h2>

<p>"System clock uses UTC" にチェックを入れ、"Asia/Tokyo" を選択し、OK</p>

<h2>Partitioning Type</h2>

<p>"Use entire drive" を選択</p>

<h1>初期設定</h1>

<h2>ユーザの追加</h2>

<pre><code># useradd -g wheel &lt;username&gt;
# passwd &lt;username&gt;
# vi /etc/sudoers  # wheel に sudo 権限を与える
# usermod -G wheel &lt;username&gt;  # useradd で wheel group に入れ忘れた場合
</code></pre>

<h2>iptables, SELinux 無効化</h2>

<pre><code># chkconfig iptables off
# chkconfig ip6tables off
# vi /etc/sysconfig/selinux
SELINUX=disabled
</code></pre>

<p>SELINUX を無効にすると、kernel panic を起こすことがあるので、<br/>
<code>/boot/grub/grub.conf</code> の <code>kernel</code> 行に <code>enforcing=0</code> を追記する。<br/>
kernel panic を起こしてしまった場合は <a href="http://h2np.net/mynotebook/post/130">http://h2np.net/mynotebook/post/130</a></p>

<h2>ホスト名変更</h2>

<p><code>/etc/sysconfig/network</code> を編集</p>

<h2>ネットワーク設定</h2>

<p>ホストマシンと通信するため、ホストオンリーアダプタをセットしたデバイスの設定ファイルを編集
``` sh /etc/sysconfig/network-scripts/ifcfg-eth1</p>

<h1>追加・変更箇所</h1>

<p>ONBOOT=yes
BOOTPROTO=none
IPADDR=192.168.56.101
NETMASK=255.255.255.0
GATEWAY=192.168.56.0
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX environment Chapter 5]]></title>
    <link href="http://kentaktwo.github.com/blog/2013/01/18/apue-chapter-5/"/>
    <updated>2013-01-18T21:10:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2013/01/18/apue-chapter-5</id>
    <content type="html"><![CDATA[<h1>Standard I/O Library</h1>

<!--more-->


<h2>Stream</h2>

<ul>
<li>システムコールでの I/O は file descriptor を使用していた。</li>
<li>standard I/O library では、<em>stream</em> と呼ばれるものを使用する。</li>
<li>stream は single-byte, multibyte ("wide") 両方の文字セットで使用できる。</li>
<li>read や write を single-byte か multibyte どちらで行うかを決めるものを stream's orientation と呼ぶ。</li>
<li><code>fwide()</code> 関数で stream's orientation を変更することができる。</li>
</ul>


<h2>FILE Object</h2>

<ul>
<li><code>fopen()</code> などで stream を open すると、<code>FILE</code> オブジェクトのポインタが返ってくる。</li>
<li><code>FILE</code> には standard I/O library が stream を扱うのに必要な情報が入っている。</li>
<li><code>FILE *</code> を file pointer と呼ぶ。</li>
</ul>


<h2>Standard Input, Standard Output, and Standard Error</h2>

<p><code>STDIN_FILENO</code>, <code>STDOUT_FILENO</code>, <code>STDERR_FILENO</code> file descriptor に対応する file pointer として、
<code>stdin</code>, <code>stdout</code>, <code>stderr</code> が <code>&lt;stdio.h&gt;</code> で定義されている。</p>

<h2>Buffering</h2>

<p>standard I/O library は <code>read()</code> や <code>write()</code> の呼び出し回数をできるだけ少なくするために、
buffering を行なっている。3種類の buffering が提供されている:</p>

<ol>
<li>Fully buffered: 実際の I/O は buffer がいっぱいになったときに実行される。<br/>
ディスクの読み込みなどは fully buffered である。</li>
<li>Line buffered: input や output で改行記号を検出したときに I/O が行われる。<br/>
stdin や stdout などのターミナル関連での buffering は Line buffered である。</li>
<li>Unbuffered: buffering しない。<br/>
standard error stream などは Unbuffered である (すぐに表示してほしいため)。</li>
</ol>


<!--dummy comment line for breaking list-->


<ul>
<li>buffering は <code>setbuf()</code> や <code>setvbuf()</code> で変更することができる。</li>
<li>standard I/O buffer の中身を書きだすことを <em>flush</em> と呼ぶ。

<ul>
<li>flush は buffer がいっぱいになったときなどに standard I/O が自動的に行なってくれるが、
<code>fflush()</code> を呼ぶことで明示的に行うこともできる。</li>
</ul>
</li>
</ul>


<h2>Opening a Stream</h2>

<p>``` c
FILE <em>fopen(const char </em>restrict pathname, const char <em>restrict type);
FILE </em>freopen(const char <em>restrict pathname, const char </em>restrict type, FILE <em>restrict fp);
FILE </em>fdopen(int filedes, const char *restrict type);</p>

<p>return file pointer if OK, NULL on error
<code>``
-</code>fopen()<code>はファイル名を指定して open する。
-</code>freopen()` はファイル名を指定して、指定した stream に open する。</p>

<pre><code>- stdin, stdout, stderr などに open したい場合に使う。
</code></pre>

<ul>
<li><code>fdopen()</code> は file descriptor を指定して open する。</li>
<li><em>type</em> は

<ul>
<li><code>r</code> はそのまま、<code>w</code> は truncate する、<code>a</code> は追記する</li>
<li><code>+</code> をつけると read, write 両方になる</li>
<li><code>fdopen()</code> の場合、既にファイルが open されているため、truncate は行われない。</li>
</ul>
</li>
</ul>


<h2>Closing a Stream</h2>

<ul>
<li>open stream を close するには <code>fclose()</code> を使う。</li>
<li>buffering された output data は close される前に flush される。</li>
<li>buffering された input data は破棄される。</li>
<li>standard I/O library が自動的に確保した buffer は解放される。</li>
<li><code>exit()</code> が呼ばれると自動的に <code>close()</code> される。</li>
</ul>


<h2>Reading and Writing a Stream</h2>

<p>unformatted I/O を行う関数には、3種類ある。</p>

<h3>Character-at-a-time I/O</h3>

<p>文字単位で入出力する。
``` c</p>

<h1>include &lt;stdio.h></h1>

<p>/<em> Input Functions </em>/
int getc(FILE <em>fp);
int fgetc(FILE </em>fp);
int getchar(void);</p>

<p>return next character if OK, EOF on end of file or error</p>

<p>/<em> Output Functions </em>/
int putc(int c, FILE <em>fp);
int fputc(int c, FILE </em>fp);
int putchar(int c);</p>

<p>return c if OK, EOF on error
<code>``
-</code>getchar()<code>は</code>getc(stdin)<code>と同じ
-</code>getc()<code>はマクロの場合があるが、</code>fgetc()<code>は必ず関数である
-</code>EOF` は多くの場合 -1 として定義される</p>

<p><code>EOF</code> が返ってきたときに、EOF なのかエラーなのかわからないため、それを判別する関数が用意されている。
``` c</p>

<h1>include &lt;stdio.h></h1>

<p>int ferror(FILE <em>fp);
int feof(FILE </em>fp);</p>

<p>return nonzero if condition is true, 0 otherwise
<code>``
- FILE Object の中で、error flag や end-of-file flag が管理されている。
-</code>clearerr()` でそれらの flag をクリアできる。</p>

<p><code>ungetc()</code> で1文字読み戻すことができる。
``` c</p>

<h1>include &lt;stdio.h></h1>

<p>int ungetc(int c, FILE *fp);</p>

<p>return c if OK, EOF on error
```
- 読み戻せるのは1文字まで</p>

<h3>Line-at-a-time I/O</h3>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>char <em>fgets(char </em>restrict buf, int n, FILE <em>restrict fp);
char </em>gets(char *buf);</p>

<p>return buf if OK, NULL on end of file or error
<code>``
- 改行記号に達するか、_n - 1_ byte まで読み込む (最後に null byte を入れるため)
-</code>gets()` は buffer size を指定できないため、使ってはいけない</p>

<p>```</p>

<h1>include &lt;stdio.h></h1>

<p>int fputs(const char <em>restrict str, FILE </em>restrict fp);
int puts(const char *str);</p>

<p>return non-negative value if OK, EOF on error
<code>``
- null byte まで書きだす (null byte は書き出されない)
- 改行記号が入っている必要はない
-</code>puts()<code>に</code>gets()` のような脆弱性は無いが、使わない方がいいだろう</p>

<h3>Binary I/O</h3>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>size_t fread(void <em>restrict ptr, size_t size, size_t nobj, FILE </em>restrict fp);
size_t fwrite(const void <em>restrict ptr, size_t size, size_t nobj, FILE </em>restrict fp);</p>

<p>return number of objects read or written
```
- 1単位あたりのサイズを <em>size</em> で指定して、読み書きする単位数を <em>nobj</em> で指定する</p>

<pre><code>- _size_ は `sizeof(float)` や構造体のサイズなど
</code></pre>

<ul>
<li>バイナリや、構造体を読み書きするのに使う

<ul>
<li>システムによってデータ構造が違ったりするので、異なるシステム間ではうまく動作しない</li>
</ul>
</li>
</ul>


<h2>Standard I/O Efficiency</h2>

<ul>
<li>システムコールを呼ぶのが一番コストがかかる</li>
<li>standard I/O を使うと、システムコールを呼ぶ回数を減らすように buffering してくれるので、
直接システムコールを呼ぶより高速になることが多い

<ul>
<li>効率良くなるように自分でシステムコールを呼ぶ調整をしている場合は別</li>
</ul>
</li>
</ul>


<h2>Positioning a Stream</h2>

<p>standard I/O stream の位置を調べる関数は3種類ある:
1. <code>ftell()</code>, <code>fseek()</code>: 位置は <code>long</code> で表す
2. <code>ftello()</code>, <code>fseeko()</code>: <code>ftell()</code> と <code>fseek()</code> の <code>long</code> が <code>off_t</code> に置き換わったもの
3. <code>fgetpos()</code>, fsetpos()<code>:</code>fpos_t` を使って位置を表す。UNIX でないシステムではこれを使う</p>

<h2>Formatted I/O</h2>

<h3>Formatted Output</h3>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>int printf(const char <em>restrict format, ...);
int fprintf(FILE </em>restrict fp, const char *restrict format, ...);</p>

<p>return number of characters output if OK, nagative value if output error</p>

<p>int sprintf(char <em>restrict buf, const char </em>restrict format, ...);
int snprintf(char <em>restrict buf, size_t n, const char </em>restrict format, ...);</p>

<p>return number of characters stored in array if OK, negative value if encoding error
<code>
- `sprintf()` はオーバーフローする恐れがあるので、`snprintf()` を使うこと。
- % 記号で始まるやつ (conversion specification) のフォーマットは以下の通り
</code> c
%[flags][fldwidth][precision][lenmodifier]convtype
<code>``
- "..." の代わりに、</code>va_list<code>になった</code>vprintf()<code>系の関数もある (</code>&lt;stdarg.h>` を includeする)。</p>

<h3>Formatted Input</h3>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>int scanf(const char <em>restrict format, ...);
int fscanf(FILE </em>restrict fp, const char <em>restrict format, ...);
int sscanf(const char </em>restrict buf, const char *restrict format, ...);</p>

<p>return number of input items assigned, EOF if input error or end of file before any conversion
<code>
- conversion specification のフォーマットは以下の通り
</code> c
%[*][fldwidth][lenmodifier]convtype
<code>``
- 頭にアスタリスクがついているやつについては conversion 結果が変数に格納されない
- "..." の代わりに、</code>va_list<code>になった</code>vscanf()<code>系の関数もある (</code>&lt;stdarg.h>` を includeする)。</p>

<h2>Implementation Details</h2>

<ul>
<li><code>fileno()</code> 関数で file pointer に対応する file descriptor が取得できる。</li>
</ul>


<h2>Temporary Files</h2>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>char <em>tmpnam(char </em>ptr);
returns pointer to unique pathname</p>

<p>FILE *tmpfile(void);
returns file pointer if OK, NULL on error
<code>``
-</code>tmpnam()` は存在しているファイル名とかぶらないパス名を作成する。</p>

<pre><code>- 最大 `TMP_MAX` 回は異なるパス名が生成される (`TMP_MAX` は `&lt;stdio.h&gt;` で定義されている)。
- _ptr_ が `NULL` の場合、作られたパス名は static area に格納される。
- _ptr_ が `NULL` でない場合、その参照先の buffer は少なくとも
 `L_tmpnam` 以上のサイズがある必要がある (`L_tmpnam` は `&lt;stdio.h&gt;` で定義されている)。
</code></pre>

<ul>
<li><code>tmpfile()</code> は type が <code>wb+</code> の一時ファイルを作成する。これはプログラム終了時に削除される。</li>
</ul>


<p>以下の2つの関数が XSI で定義されている
``` c</p>

<h1>include &lt;stdio.h></h1>

<p>char <em>tempnam(const char </em>directory, const char *prefix);
returns pointer to unique pathname</p>

<h1>include &lt;stdio.h></h1>

<p>int mkstemp(char *template);
returns file descriptor if OK, -1 on error
<code>``
-</code>tempnam()<code>はディレクトリとプレフィックスが指定できる</code>tmpnam()` である。</p>

<pre><code>- _directory_ は環境変数 `TMP_DIR` が最優先される。
`TMP_DIR` が参照するディレクトリが存在しない場合、スキップされる。
- _directory_ が `NULL` の場合、`P_tmpdir` が使われる。
- _prefix_ にはファイル名の先頭を最大5文字まで指定することができる。
</code></pre>

<ul>
<li><code>mkstemp()</code> は一時ファイルを作るが、file pointer の代わりに file descriptor を返す。

<ul>
<li><em>template</em> には、最後が <code>XXXXXX</code> で終わるような文字列を渡す。そこにユニークな文字が入る。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Programming in the UNIX enviroment Chapter 4]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/10/14/apue-chapter-4/"/>
    <updated>2012-10-14T14:25:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/10/14/apue-chapter-4</id>
    <content type="html"><![CDATA[<h1>Files and Directories</h1>

<!--more-->


<h2>stat, fstat and lstat Functions</h2>

<p>``` c</p>

<h1>include &lt;sys/stat.h></h1>

<p>int stat(const char <em>restrict pathname, struct stat </em>restrict buf);
int fstat(int filedes, struct stat <em>buf);
int lstat(const char </em>restrict pathname, struct stat *restrict buf);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li>ファイルについての情報が書かれた構造体 (stat 構造体) を返す。

<ul>
<li><code>stat()</code> はファイル名</li>
<li><code>fstat()</code> はファイルディスクリプタ</li>
<li><code>lstat()</code> はシンボリックリンク
(<code>stat()</code> の場合はシンボリックリンクのときはその参照先)</li>
</ul>
</li>
<li>restrict ポインタはそのポインタが別名を持たないことを保証し、
コンパイル時の最適化を効率的に行うことができる。</li>
<li>stat 構造体の定義は実装によるが、だいたい以下のようになる</li>
</ul>


<p>``` c
struct stat {</p>

<pre><code>mode_t      st_mode;    /* file type &amp; mode (permissions) */
ino_t       st_ino;     /* i-node number (serial number) */
dev_t       st_dev;     /* device number (file system) */
dev_t       st_rdev;    /* device number for special files */
nlink_t     st_nlink;   /* number of links */
uid_t       st_uid;     /* user ID of owner */
gid_t       st_gid;     /* group ID of owner */
off_t       st_size;    /* size in bytes, for regular files */
time_t      st_atime;   /* time of last access */
time_t      st_mtime;   /* time of last modification */
time_t      st_ctime;   /* time of last file status change */
blksize_t   st_blksize; /* best I/O block size */
blkcnt_t    st_blocks;  /* number of disk blocks allocated */
</code></pre>

<p>};
```</p>

<h2>File Types</h2>

<ul>
<li>ファイルの種類は7種類

<ul>
<li>Regular file</li>
<li>Directory file</li>
<li>Block special file: ディスクドライブなどのデバイスに buffered I/O アクセスする</li>
<li>Character special file: デバイスに unbuffered I/O アクセスする</li>
<li>FIFO: プロセス間通信で使う。pipe とも呼ばれる。</li>
<li>Socket: プロセス間のネットワーク通信に使う。</li>
<li>Symbolic link: 他のファイルを参照するファイル</li>
</ul>
</li>
<li>ファイルの種類は <code>st_mode</code> に入っている。</li>
<li>ファイルの種類を調べるには <code>S_ISREG()</code>, <code>S_ISDIR()</code> などのマクロを使う。

<ul>
<li>Linux で <code>S_ISSOCK()</code> マクロを使うには <code>_GNU_SOURCE</code> を定義する必要がある。</li>
</ul>
</li>
</ul>


<h2>Set-User-ID and Set-Group-ID</h2>

<ul>
<li>すべてのプロセスは関連する ID を持っている

<ul>
<li>real user ID, real group ID<br/>
自分が誰なのかを表す。login 時に password file から読み取られる。</li>
<li>effective user ID, effective group ID, supplementary group ID<br/>
ファイルアクセスの権限を表す。</li>
<li>saved set-user-ID, saved set-group-ID<br/>
プログラム実行時の effective user ID と effective group ID のコピー</li>
</ul>
</li>
<li>プログラムが実行されると、通常 effective user (group) ID には real user (group) ID がセットされるが、
<em>set-user-ID</em> bit や <em>set-group-ID</em> bit を立てると、
effective user (group) ID をそのファイルのオーナー (<code>st_uid</code>, <code>st_gid</code>) にすることができる。

<ul>
<li><code>passwd(1)</code> はスーパーユーザーで実行される必要がある。</li>
</ul>
</li>
<li>set-user-ID (set-group-ID) bit は<code>st_mode</code> の中に含まれ、<code>S_ISUID()</code>, <code>S_ISGID()</code> で調べることができる。</li>
</ul>


<h2>File Access Permissions</h2>

<ul>
<li>directory の execute 権限は search bit とも呼ばれる

<ul>
<li>directory の read 権限は directory 内のファイル名のリストを表示したりする (directory file を読む) 権限</li>
<li>directory の execute 権限は directory にアクセスする権限</li>
</ul>
</li>
<li>ファイルを削除するには、そのファイルがある directory に write と execute 権限があることが必要。
そのファイル自体に read や write 権限がある必要はない。</li>
<li>owner ID はファイルのプロパティであり、effective ID はプロセスのプロパティである。</li>
</ul>


<h2>access Function</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int access(const char *pathname, int mode);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li>(effective でなく) real user (group) ID がファイルへの権限を持っているか調べる。</li>
<li>set-user-ID されていても、real user ID についての権限が調べられる。</li>
</ul>


<h2>umask Function</h2>

<p>``` c</p>

<h1>include &lt;sys/stat.h></h1>

<p>mode_t umask(mode_t cmask);</p>

<p>return: 変更前の mask
```
- ファイル作成時に umask に設定した権限を除外することができる。</p>

<pre><code>- `S_IROTH | S_IWOTH` みたいにして設定
</code></pre>

<ul>
<li>プログラム内で設定した umask はプログラムが終了すると元に戻る。</li>
</ul>


<h2>chmod and fchmod Functions</h2>

<p>``` c</p>

<h1>include &lt;sys/stat.h></h1>

<p>int chmod(const char *pathname, mode_t mode);
int fchmod(int filedes, mode_t mode);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li>ファイルのアクセス権限を変更する。</li>
<li>現在の権限から group execute 権限を取り除き、set-group-ID するには</li>
</ul>


<p><code>c
struct stat statbuf;
stat("foo", &amp;statbuf);
chmod("foo", (statbuf.st_mode &amp; ~S_IXGRP) | S_ISGID);
</code></p>

<ul>
<li><code>ls -l</code> したときに execute 権限にある <code>S</code> は execute 権限は無いが、
set-user-ID (set-group-ID) されてるという意味。</li>
</ul>


<h2>Sticky Bit</h2>

<ul>
<li>sticky bit がセットされたプログラムが実行されると、
プロセス終了時にそのコピーがスワップ領域にコピーされる。</li>
<li>次回以降そのプログラム実行時のメモリへのロードが高速になる。</li>
<li>sticky bit をセットにするには <code>S_ISVTX</code> をセットする。</li>
<li>最近の UNIX システムでは <em>saved-text</em> bit と呼ばれる。</li>
<li>最近の UNIX システムでは Virtual memory システムだったり、ファイルシステムが高速
になったりで、このテクニックの必要は薄くなっている。</li>
<li>最近は sticky bit は directory にセットされる使い方をしている。

<ul>
<li>directory に sticky bit がセットされると、directory 内のファイルは
directory への write 権限を持っていて、かつ

<ul>
<li>ファイルのオーナーである</li>
<li>ディレクトリのオーナーである</li>
<li>スーパーユーザーである
のいずれかを満たすユーザにしか消去や名前の変更ができないようになる。</li>
</ul>
</li>
<li>sticky bit がセットされている directory には、<code>/tmp</code> などがある。

<ul>
<li><code>/tmp</code> には色んなユーザがファイルを作成するので、
パーミッションは 777 になっているが、sticky bit がセットされているので、
ファイルの削除などはオーナーにしかできない。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>chown, fchown, and lchown Functions</h2>

<ul>
<li><code>chown()</code> でファイルの user ID や group ID を変更することができる。</li>
</ul>


<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int chown(const char <em>pathname, uid_t owner, gid_t group);
int fchown(int filedes, uid_t owner, gid_t group);
int lchown(const char </em>pathname, uid_t owner, gid_t group);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li><code>lchown()</code> はシンボリックリンク自体のオーナーを変更する</li>
<li><em>owner</em> または <em>group</em> を -1 にすると、その ID は変更されない</li>
<li><code>_POSIX_CHOWN_RESTRICTED</code> が有効になっていると、他のユーザのファイルの user ID は変更できない。
自分のファイルの group ID は変更できるが、自分が所属しているグループにしか変更できない。</li>
<li>superuser のプロセスからこれらの関数が実行されると、set-user-ID と set-group-ID の bit はクリアされる</li>
</ul>


<h2>File Size</h2>

<ul>
<li><code>stat</code> 構造体の <code>st_size</code> にはファイルのサイズがバイト単位で入っている</li>
<li>このフィールドは regular files, directories, symbolic links のときのみ意味をなす

<ul>
<li>regular file の場合、ファイルサイズ 0 が許容される。これはファイルの最初が end-of-file の場合である。</li>
<li>directory の場合、ファイルサイズは 16 や 512 などの複数の値になる。</li>
<li>symbolic link の場合、ファイルサイズはリンク先のファイル名の長さ (byte) になる。
例えば、リンク先が "usr/lib" のとき、ファイルサイズは 7 になる。</li>
</ul>
</li>
<li>最近の UNIX システムでは、<code>st_blksize</code> と <code>st_blocks</code> というフィールドも用意されている

<ul>
<li><code>st_blksize</code> はファイル I/O の望ましいブロックサイズ</li>
<li><code>st_blocks</code> は割り当てられた 512-byte ブロックの数</li>
<li>standard I/O library では、効率化のため、1回に <code>st_blksize</code> の分だけ read や write を行う</li>
</ul>
</li>
</ul>


<h2>File Truncation</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int truncate(const char *pathname, off_t length);
int ftruncate(int filedes, off_t length);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li>ファイルの長さを <em>length</em> バイトに切り詰める</li>
<li>truncate 前のファイルサイズが <em>length</em> より大きい場合、<em>length</em> より後ろのデータにはアクセスできなくなる</li>
<li>truncate 前のファイルサイズが <em>length</em> より小さい場合、どうなるかは実装依存だが、
XSI-conforming system の場合、ファイルサイズは大きくなる (hole ができる)</li>
</ul>


<h2>File Systems</h2>

<h3>Hard Links</h3>

<ul>
<li>各 i-node は link count を持っている。これは自身の i-node を参照しているディレクトリの数である。</li>
<li>link count が 0 になったときのみ、このファイルは削除することができる。

<ul>
<li>ディレクトリのエントリを削除する関数が delete でなく unlink なのはそのため。</li>
</ul>
</li>
<li>link count は <code>stat</code> 構造体の中の <code>st_nlink</code> メンバに格納されている。この型は <code>nlink_t</code> 型である。</li>
<li>link count の最大値は <code>LINK_MAX</code> で定義されている。</li>
</ul>


<h3>Symbolic Links</h3>

<ul>
<li>symbolic link の指す data block の中にはこのリンクが参照するファイル名が書かれている。</li>
<li>この i-node には file type に <code>S_IFLNK</code> がセットされている。</li>
</ul>


<h3>Directory</h3>

<ul>
<li>directory entry には ファイル名や i-node 番号などが書かれている。</li>
<li>i-node 番号の型は <code>ino_t</code> 型である。</li>
<li>directory entry に書かれた i-node 番号は同じファイルシステム上のものであり、
別のファイルシステムの i-node を参照することはできない。
<code>ln(1)</code> コマンドをファイルシステムをまたがって叩くことができないのはそのためである。</li>
<li><code>mv(1)</code> は directory entry を変更しているだけで、実際のファイルの中身が変更されているわけではない。</li>
<li>leaf directory (他の directory を含んでいない directory) の link count は常に2となる (<code>.</code> と親ディレクトリからの参照)</li>
<li>leaf directory でない directory の link count は 3 以上となる (<code>.</code>, 子ディレクトリの <code>..</code>, 親ディレクトリからの参照)</li>
</ul>


<h2>link, unlink, remove, and rename Functions</h2>

<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int link(cont char <em>existingpath, const char </em>newpath);
int unlink(const char *pathname);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li><code>link()</code> は <em>existingpath</em> を参照する新しい directory entry を <em>newpath</em> に作成する。

<ul>
<li><em>newpath</em> がすでに存在する場合はエラーとなる。</li>
<li>POSIX.1 はファイルシステムをまたいで link することを許しているが、
ほとんどの実装ではそれぞれのパスは同じファイルシステム上になくてはならない。</li>
<li>directory の hard link を作成できる実装の場合、それができるのは superuser に限られる。

<ul>
<li>loop が発生する恐れがあるため。</li>
<li>多くのファイルシステムの実装では directory の hard link を作ることを許可していない。</li>
</ul>
</li>
</ul>
</li>
<li><p><code>unlink()</code> は directory entry を削除し、 link count を減らす。</p>

<ul>
<li>link count が 0 になったときのみ、このファイルの中身を削除することができるが、
ファイルが open されているときはまだ削除できない。

<ul>
<li>ファイルが close されたときに、kernel がそのファイルを open しているプロセス数をチェックする。
それが 0 なら、次に link count をチェックし、それも 0 ならファイルの中身を削除する。</li>
</ul>
</li>
<li><em>pathname</em> が symbolic link の場合、<code>unlink()</code> は参照先ではなく、symbolic link 自体を削除する。</li>
</ul>
</li>
<li><p>superuser は <code>unlink()</code> に directory を指定することもできるが、それよりも <code>rmdir()</code> を使うべきである。</p></li>
<li>file と directory 両方に使える関数に <code>remove()</code> がある。</li>
</ul>


<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>int remove(const char *pathname);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li><p><code>remove()</code> は対象が file なら <code>unlink()</code> と同じであり、directory なら <code>rmdir()</code> と同じである。</p></li>
<li><p>file や directory は <code>rename()</code> で名前を変えることができる。</p></li>
</ul>


<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<p>int rename(const char <em>oldname, const char </em>newname);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li><em>newname</em> が既に存在していた場合、<em>newname</em> は削除され、<em>oldname</em> が <em>newname</em> に rename される。

<ul>
<li>directory の場合、<em>newname</em> は空である必要がある。</li>
</ul>
</li>
<li>symbolic link の場合、参照先ではなく、リンク自身が rename される。</li>
<li><em>oldname</em> と <em>newname</em> が同じ場合、変更されずに、0 が返る。</li>
</ul>


<h2>Symbolic Links</h2>

<ul>
<li>symbolic link は i-node を直接参照する hard link とは違い、間接的にファイルを参照する。</li>
<li>symbolic link はファイルシステムをまたぐことに関する制限はない。</li>
<li>directory を指す symbolic link を作る際にも root 権限は必要ない。</li>
<li>ファイル名でファイルを参照する関数には、symbolic link をたどり参照先のファイルを見るものと、
たどらずに、symbolic link 自体を見るものがある。

<ul>
<li><code>chown()</code> がどちらになるかは実装による</li>
<li><code>open()</code> は symbolic link をたどるが、<code>O_CREAT</code> と <code>O_EXCL</code> の両方が付いている場合は例外で、
その時に symbolic link を開こうとすると、エラーとなり、 <code>errno</code> に <code>EEXIST</code> がセットされる。
これは権限のあるプロセスが誤ってファイルに書き込みをしないようにするためである。</li>
</ul>
</li>
</ul>


<h2>symlink and readlink Functions</h2>

<ul>
<li>symbolic link を作成するには <code>symlink()</code> を使う</li>
</ul>


<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int symlink(const char <em>actualpath, const char </em>sympath);</p>

<p>return 0 if OK, -1 on error
```</p>

<ul>
<li><code>open()</code> は symbolic link をたどってしまうため、symbolic link 自身を open したい場合は <code>readlink()</code> を使う</li>
</ul>


<p>``` c</p>

<h1>include &lt;unistd.h></h1>

<p>ssize_t readlink(const char <em>restrict pathname, char </em>restrict buf, size_t bufsize);</p>

<p>return number of bytes read if OK, -1 on error
```
- この関数1つで open, read, close を行なっている。</p>

<h2>File Times</h2>

<p>各ファイルでは3種類の時刻が管理されている
- <code>st_atime</code>: 最後にファイルにアクセスされた時刻。<code>read()</code> など。<code>ls -u</code> でソート
- <code>st_mtime</code>: 最後にファイルの中身が変更された時刻。<code>write()</code> など。<code>ls -t</code> でソート
- <code>st_ctime</code>: 最後に i-node のステータスが変更された時刻。<code>chmod(), chown()</code> など。<code>ls -c</code> でソート</p>

<h2>utime Function</h2>

<p>ファイルの access time や modification time を変更するには <code>utime()</code> を使う</p>

<p>``` c</p>

<h1>include &lt;utime.h></h1>

<p>int utime(const char <em>pathname, const struct utimbuf </em>times);</p>

<p>return 0 if OK, -1 on error
<code>
`utimbuf` 構造体は以下のようになっている
</code> c
struct utimbuf {</p>

<pre><code>time_t actime;  /* access time */
time_t modtime; /* modification time*/
</code></pre>

<p>}
```</p>

<ul>
<li><em>times</em> が null の場合、access time と modification time は現在の時刻に更新される。</li>
<li>chenged-status time を変更する関数は無い。<code>utime()</code> が実行されると自動的に更新される。</li>
</ul>


<h2>mkdir and rmdir Functions</h2>

<ul>
<li><code>mkdir()</code> で空の directory を作成できる。
``` c

<h1>include &lt;sys/stat.h></h1>

<p>int mkdir(const char *pathname, mode_t mode);
return 0 if OK, -1 on error
```</p></li>
<li><code>.</code> と <code>..</code> は自動的に作られる。</li>
<li><em>mode</em> にはプロセスの mask による変更が加えられる。</li>
<li><p>directory の場合、execute bit を付けないと directory 内のファイルにアクセスできなくなるので注意</p></li>
<li><p>空の directory を削除するには <code>rmdir()</code> を使う
``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int rmdir(const char *pathname);</p></li>
</ul>


<p>return 0 if OK, -1 on error
```
- link count が 0 でも、その directory を open しているプロセスがあれば、close されるまで領域は解放されない。
解放はされないが、その directory 内に新しくファイルを置くことはできなくなる。</p>

<h2>Reading Directories</h2>

<p>directory を読むには、以下のような関数を使う
``` c</p>

<h1>include &lt;dirent.h></h1>

<p>DIR <em>opendir(const char </em>pathname);    return pointer if OK, NULL on error
struct dirent <em>readdir(DIR </em>dp);       return pointer if OK, NULL at end of directory or error
void rewinddir(DIR <em>dp);
int closedir(DIR </em>dp);                 return 0 if OK, -1 on error
long telldir(DIR <em>dp);                 return current location in directory associated with dp
void seekdir(DIR </em>dp, long loc);
<code>
`dirent` 構造体 の定義は実装依存だが、少なくとも以下の2つは含まれている
</code> c
struct dirent {</p>

<pre><code>ino_t d_ino;                    /* i-node number */ 
char  d_name[NAME_MAX + 1];     /* null-terminated filename */
</code></pre>

<p>}
```</p>

<ul>
<li><code>DIR</code> は <code>FILE</code> 構造体のようなもので、directory が read されるのを管理するための構造体</li>
<li>directory entries の順番は実装依存だが、たいていアルファベット順にはなっていない</li>
<li><code>rewinddir()</code> は DIR のポインタを先頭に戻す</li>
</ul>


<h2>chdir, fchdir, and getcwd Functions</h2>

<ul>
<li>すべてのプロセスは current working directory を持っている。

<ul>
<li>user がログインすると、current working directory が <code>/etc/passwd</code> の第6フィールドにセットされた home directory に設定される。</li>
</ul>
</li>
<li><p>current working directory はプロセスの attribute である。</p></li>
<li><p><code>chdir()</code> や <code>fchdir()</code> を使うと、それを呼んだプロセスの current working directory が変更できる
``` c</p>

<h1>include &lt;unistd.h></h1>

<p>int chdir(const char *pathname);
int fchdir(int filedes);</p></li>
</ul>


<p>return 0 if OK, -1 on error
```</p>

<ul>
<li>kernel は current working directory の full path を管理しているわけではない</li>
<li>full path を取得するのは、v-node を辿っていけばいいが、そのような関数は既にあり、<code>getcwd()</code> で full path が取得できる
``` c

<h1>include &lt;unistd.h></h1>

<p>char <em>getcwd(char </em>buf, size_t size);</p></li>
</ul>


<p>return buf if OK, NULL on error
```</p>

<h2>Device Special Files</h2>

<p><code>stat</code> 構造体には <code>st_dev</code> と <code>st_rdev</code> の2つのフィールドがある。</p>

<ul>
<li>すべてのファイルシステムには major と minor 2種類のデバイス番号が付けられている。

<ul>
<li>型は <code>dev_t</code> 型</li>
<li>major number はデバイスドライバを識別する番号</li>
<li>minor number はサブデバイスを識別する番号</li>
<li>同じディスクドライブにあるファイルシステムはたいてい同じ major number を持つが、異なる minor number を持つ</li>
</ul>
</li>
<li>major, minor number はそれぞれ <code>major()</code>, <code>minor()</code> マクロで取得できる</li>
<li><code>st_dev</code> はそのファイル名や i-node が格納されているデバイス番号</li>
<li>character special files と block special files の場合のみ <code>st_rdev</code> に値が入っている。
これは実際のデバイスのデバイス番号である。

<ul>
<li><code>/dev/tty0</code> や <code>/dev/hda3</code> などの <code>st_dev</code> のデバイス番号は 0/7 などの <code>devfs</code> 仮想ファイルシステムになっている。
実際のデバイス番号は <code>st_rdev</code> に書かれた 4/0 などである。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iptables を無効にする]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/10/14/disable-iptables/"/>
    <updated>2012-10-14T00:37:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/10/14/disable-iptables</id>
    <content type="html"><![CDATA[<p>VM に Cent OS 入れたのだが、外からアクセスできない。
どうもインストール時には iptables が動いてて、外からのアクセスを拒否してるらしい。</p>

<pre><code>$ sudo /etc/rc.d/init.d/iptables stop
</code></pre>

<p>で iptables を無効にできる。</p>

<p>参考: <a href="http://www.server-world.info/query?os=CentOS_6&amp;p=initial_conf&amp;f=2">http://www.server-world.info/query?os=CentOS_6&amp;p=initial_conf&amp;f=2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Network Programming Chapter 3]]></title>
    <link href="http://kentaktwo.github.com/blog/2012/07/02/unp-chapter-3/"/>
    <updated>2012-07-02T22:04:00+09:00</updated>
    <id>http://kentaktwo.github.com/blog/2012/07/02/unp-chapter-3</id>
    <content type="html"><![CDATA[<h1>Sockets Introduction</h1>

<!--more-->


<h2>Socket Address Structures</h2>

<p>ほとんどのソケット関数は引数にソケットアドレス構造体のポインタを必要とする。</p>

<h3>IPv4 Socket Address Structure</h3>

<p>``` c</p>

<h1>include &lt;netinet/in.h></h1>

<p>struct in_addr {</p>

<pre><code>in_addr_t       s_addr;         /* 32-bit IPv4 address */
</code></pre>

<p>};</p>

<p>struct sockaddr_in {</p>

<pre><code>uint8_t         sin_len;        /* length of structure (16) */
sa_family_t     sin_family;     /* AF_INET */
in_port_t       sin_port;       /* 16-bit TCP or UDP port number */
struct in_addr  sin_addr;       /* 32-bit IPv4 address */
char            sin_zero[8];    /* unused */
</code></pre>

<p>};
<code>``
-</code>sin_zero<code>はソケットアドレス構造体のサイズを少なくとも 16 bytes にするため
- IP アドレスとポート番号は常にネットワークバイトオーダー
-</code>sin_addr` が構造体になっているのは歴史的な理由から。昔は union でクラス A, B, C のアドレスを処理していたらしい。</p>

<h3>Generic Socket Address Structure</h3>

<p>``` c</p>

<h1>include &lt;sys/socket.h></h1>

<p>struct sockaddr {</p>

<pre><code>uint8_t     sa_len;
sa_family_t sa_family;      /* address family: AF_xxx value */
char        sa_data[14];    /* protocol-specific address */
</code></pre>

<p>};
<code>
- ソケット関数に渡すときは、`sockaddr` にキャストして渡す
</code> c
struct sockaddr_in serv;  /<em> IPv4 </em>/</p>

<p>/<em> fill in serv{} </em>/</p>

<p>bind(sockfd, (struct sockaddr *)&amp;serv, sizeof(serv));
```</p>

<h3>IPv6 Socket Address Structure</h3>

<p>``` c</p>

<h1>include &lt;netinet/in.h></h1>

<p>struct in6_addr {</p>

<pre><code>uint8_t         s6_addr[16];        /* 128-bit IPv6 address */
</code></pre>

<p>};</p>

<h1>define SIN6_LEN  /<em> required for compile-time tests </em>/</h1>

<p>struct sockaddr_in6 {</p>

<pre><code>uint8_t         sin6_len;           /* length of this struct (28) */
sa_family_t     sin6_family;        /* AF_INET6 */
in_port_t       sin6_port;          /* transport layer port# */
uint32_t        sin6_flowinfo;      /* flow information, undefined */
struct in6_addr sin6_addr;          /* IPv6 address */
uint32_t        sin6_scope_id;      /* set of interfaces for a scope */
</code></pre>

<p>};
<code>``
- システムがソケットアドレス構造体の長さをサポートする場合、</code>SIN6_LEN` を定義しなくてはならない
- アドレスとポート番号はネットワークバイトオーダー</p>

<h3>New Generic Socket Address Structure</h3>

<p>``` c</p>

<h1>include &lt;netinet/in.h></h1>

<p>struct sockaddr_storage {</p>

<pre><code>uint8_t     ss_len;     /* length of this struct (implementation dependent) */
sa_family_t ss_family;  /* address family: AF_xxx value */
/* implementation-dependent elements to provide */
</code></pre>

<p>};
```
- IPv6 をサポートするためにできた generic socket
- システムがサポートするソケットアドレス構造体をカバーできるよう十分大きいサイズが取られる</p>

<h2>Value-Result Arguments</h2>

<p>ソケット関数では引数にソケットアドレス構造体とそのサイズを渡すが、
<code>accept</code>, <code>recvfrom</code>, <code>getsockname</code>, <code>getpeername</code> などのプロセスがカーネルから
ソケットアドレス構造体を受け取る関数では、引数に入れたサイズが関数実行後に変わることがある
(<code>sockaddr_un</code> など)。</p>

<h2>Byte Ordering Functions</h2>

<ul>
<li>バイトをデータに格納する順序には2種類ある

<ul>
<li>リトルエンディアン: 下位バイトが先のアドレスにくる</li>
<li>ビッグエンディアン: 上位バイトが先のアドレスにくる</li>
</ul>
</li>
<li>システムによってバイトオーダーが異なるので、ネットワークで扱うバイトオーダーを決める必要がある

<ul>
<li>ネットワークバイトオーダーはビッグエンディアン</li>
</ul>
</li>
<li>ホストバイトオーダーとネットワークバイトオーダーを変換する関数が用意されている
``` c

<h1>include &lt;netinet/in.h></h1>

<p>uint16_t htons(uint16_t host16bitvalue);
uint32_t htonl(uint32_t host32bitvalue);</p></li>
</ul>


<p>uint16_t ntohs(uint16_t net16bitvalue);
uint32_t ntohl(uint32_t net32bitvalue);
```</p>

<h2>Byte Manipulation Functions</h2>

<ul>
<li>バイト列を操作する関数は2つのグループに分かれる

<ul>
<li><code>b</code> で始まる関数 (4.2BSD)</li>
<li><code>mem</code> で始まる関数 (ANSI C)
``` c

<h1>include &lt;strings.h></h1>

void bzero(void <em>dest, size_t nbytes);
void bcopy(const void </em>src, void <em>dest, size_t nbytes);
int bcmp(const void </em>ptr1, const void *ptr2, size_t nbytes);
<code>
</code> c

<h1>include &lt;string.h></h1>

<p>void <em>memset(void </em>dest, int c, size_t len);
void <em>memcpy(void </em>dest, const void <em>src, size_t nbytes);
int memcmp(const void </em>ptr1, const void *ptr2, size_t nbytes);
```</p></li>
</ul>
</li>
<li><code>bzero</code> は 0 にセットするが、<code>memset</code> は特定の値にセットできる</li>
<li><code>bcopy</code> と <code>memcpy</code> ではコピー元とコピー先のアドレスを引数に入れる順序が逆</li>
<li><code>bcopy</code> は領域が重なっていても動作するが、<code>memcpy</code> はダメ

<ul>
<li>重なっている場合は <code>memmove</code> を使う</li>
<li><code>bcopy</code> は廃止予定</li>
</ul>
</li>
<li><code>bcmp</code> も <code>memcmp</code> も2つのバイト列が異なっていれば nonzero を返すが、
<code>memcmp</code> の場合、最初に異なったバイトが <em>ptr1</em> > <em>ptr2</em> のとき正、
<em>ptr1</em> &lt; <em>ptr2</em> のとき負の値が返る</li>
</ul>


<h2><code>inet_pton</code> and <code>inet_ntop</code> Functions</h2>

<ul>
<li>IP アドレスの文字列表記と数値の変換を行うには <code>inet_pton</code> と <code>inet_ntop</code> を使う。</li>
<li><code>inet_aton</code>, <code>inet_addr</code>, <code>inet_ntoa</code> は IPv4 のみでしか使えない

<ul>
<li>さらに、<code>inet_addr</code> は戻り値がアドレスを表す数値 (32-bit, ネットワークバイトオーダー) だが、
エラー時に返す値 <code>INADDR_NONE</code> が 2<sup>32</sup> - 1 のため、255.255.255.255 が変換できない
``` c

<h1>include &lt;arpa/inet.h></h1>

<p>int inet_pton(int family, const char <em>strptr, void </em>addrptr);  // 文字列から数値
const char <em>inet_ntop(int family, const void </em>addrptr, char *strptr, size_t len);  // 数値から文字列
```</p></li>
</ul>
</li>
<li>数値はネットワークバイトオーダー</li>
<li><em>family</em> には <code>AF_INET</code> または <code>AF_INET6</code> を入れる</li>
<li><em>len</em> には変換後の文字列を入れるバッファ <em>strptr</em> の長さを入れる。
<code>&lt;netinet/in.h&gt;</code> に <code>INET_ADDRSTRLEN</code> と <code>INET6_ADDRSTRLEN</code> が定義されている。</li>
<li><em>strptr</em> に null は入れられない。メモリを確保してそのサイズを指定する必要がある。</li>
<li><code>inet_pton()</code> に成功すると 1, 失敗すると 0 が返ってくる</li>
<li><code>inet_ntop()</code> に成功すると、戻り値として <em>strptr</em> が返る</li>
</ul>

]]></content>
  </entry>
  
</feed>
